language: go_test.go
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp970dpygo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp970dpygo_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp970dpygo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp970dpygo_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp970dpygo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp970dpygo_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp970dpygo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n == 3 {\n        return true\n    }\n\n\
    \    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n\n    d := 6\n\
    \    for i := 3; i <= n/3; i++ {\n        if n%d == 0 {\n            return false\n\
    \        }\n        d = d + 6\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmpeds4kr3a_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmpeds4kr3a_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpeds4kr3a_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= int(n); i += 2 {\n        if n % i == 0 {\n            return false\n   \
    \     }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp34zj1g34_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp34zj1g34_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp34zj1g34_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp34zj1g34_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp34zj1g34_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp34zj1g34_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp34zj1g34_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n %\
    \ i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpnty3ab8v_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphln7cmiq_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n %\
    \ i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpnty3ab8v_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n%i == 0 {\n            return false\n        }\n \
    \   }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphln7cmiq_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073242
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    d := 3\n    for i := 3; i <= int(n/2); i++ {\n        if n%d == 0 {\n\
    \            return false\n        }\n        d = d + 2\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n%i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= int(n/2); i++ {\n        if n%d == 0 {\n            return false\n      \
    \  }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqbnbjvy_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= int(sqrt(n)); i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjy6y2_ut_test.go:23:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphln7cmiq_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n%i == 0 {\n            return false\n        }\n \
    \   }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= int(n); i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpn2alvqpb_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpn2alvqpb_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpn2alvqpb_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpn2alvqpb_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpn2alvqpb_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpn2alvqpb_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpn2alvqpb_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphln7cmiq_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n == 3 {\n        return true\n    }\n\n\
    \    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n    for i :=\
    \ 3; i <= int(n/2); i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n\n        if d % i == 0 {\n            return false\n        }\n\n\
    \        d = d + i\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpmd2vxdcv_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpmd2vxdcv_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpmd2vxdcv_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpmd2vxdcv_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpmd2vxdcv_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpmd2vxdcv_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073242
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= int(n/2); i += 2 {\n        if n%d == 0 {\n            return false\n   \
    \     }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n%i\
    \ == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpc2jon1eg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    d := 3\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n\
    \            return false\n        }\n\n        if d % i == 0 {\n            return\
    \ false\n        }\n\n        d = d + i\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp1754jd0s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp1754jd0s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp1754jd0s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp1754jd0s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmp1754jd0s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmp1754jd0s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073242
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqbnbjvy_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n%i\
    \ == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpc2jon1eg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n == 1 {\n        return false\n    }\n\n\
    \    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n   \
    \ }\n\n    d := 3\n    for i := 3; i <= int(n/2); i++ {\n        if n % i == 0\
    \ {\n            return false\n        }\n\n        if d % i == 0 {\n        \
    \    return false\n        }\n\n        d = d + 2\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpbz48o_b__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpbz48o_b__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpbz48o_b__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpbz48o_b__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpbz48o_b__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpbz48o_b__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n       \
    \ }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n%i\
    \ == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpc2jon1eg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphln7cmiq_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9idaari6_test.go:22:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n/2; i++ {\n        if n%i\
    \ == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpc2jon1eg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n == 3 {\n        return true\n    }\n\n\
    \    for i := 4; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpg1ssgcho_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpg1ssgcho_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    if n == 1 {\n        return false\n    }\n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/2);\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    for i := 2;\
    \ i < n; i++ {\n        if n%i == 0 {\n            return false\n        }\n \
    \   }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073460
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i := 3; i\
    \ <= int(n/2); i++ {\n        if n%d == 0 {\n            return false\n      \
    \  }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
    \ int) bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2 {\n\
    \        return true\n    }\n\n    for i := 3; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpxdd8qw2n_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpxdd8qw2n_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpxdd8qw2n_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpxdd8qw2n_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpxdd8qw2n_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpxdd8qw2n_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpxdd8qw2n_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073460
