language: go_test.go
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors[len(factors)-1] = factors[len(factors)-1]\
    \ * n\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpgfvqpbfm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpgfvqpbfm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4qwlckib_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4qwlckib_test.go:31\
    \ +0xa1d\ntesting.tRunner(0xc0000cc4e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n      \
    \      factors[i] = i\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp_xme8uuz_test.go:14\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp_xme8uuz_test.go:32\
    \ +0xc37\ntesting.tRunner(0xc000103520, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.023s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i-1] * j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074558
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp1ui1lwz2_test.go:16\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp1ui1lwz2_test.go:32\
    \ +0xb25\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp_37anf2x_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp_37anf2x_test.go:31\
    \ +0xa1d\ntesting.tRunner(0xc000198ea0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factorizer := func(n *int) bool {\n        if *n % 2 == 0 {\n \
    \           factors = append(factors, 2)\n            *n /= 2\n            return\
    \ true\n        }\n        if *n % 3 == 0 {\n            factors = append(factors,\
    \ 3)\n            *n /= 3\n            return true\n        }\n        if *n %\
    \ 5 == 0 {\n            factors = append(factors, 5)\n            *n /= 5\n  \
    \          return true\n        }\n        if *n % 7 == 0 {\n            factors\
    \ = append(factors, 7)\n            *n /= 7\n            return true\n       \
    \ }\n        if *n % 11 == 0 {\n            factors = append(factors, 11)\n  \
    \          *n /= 11\n            return true\n        }\n        if *n % 13 ==\
    \ 0 {\n            factors = append(factors, 13)\n            *n /= 13\n     \
    \       return true\n        }\n        if *n % 17 == 0 {\n            factors\
    \ = append(factors, 17)\n            *n /= 17\n            return true\n     \
    \   }\n        if *n % 19 == 0 {\n            factors = append(factors, 19)\n\
    \            *n /= 19\n            return true\n        }\n        if *n % 23\
    \ == 0 {\n            factors = append(factors, 23)\n            *n /= 23\n  \
    \          return true\n        }\n        if *n % 29 == 0 {\n            factors\
    \ = append(factors, 29)\n            *n /= 29\n            return true\n     \
    \   }\n        if *n % 31 == 0 {\n            factors = append(factors, 31)\n\
    \            *n /= 31\n            return true\n        }\n        if *n % 37\
    \ == 0 {\n            factors = append(factors, 37)\n            *n /= 37\n  \
    \          return true\n        }\n        if *n % 41 == 0 {\n            factors\
    \ = append(factors, 41)\n            *n /= 41\n            return true\n     \
    \   }\n        if *n % 43 == 0 {\n            factors = append(factors, 43)\n\
    \            *n /= 43\n            return true\n        }\n        if *n % 47\
    \ == 0 {\n            factors = append(factors, 47)\n            *n /= 47\n  \
    \          return true\n        }\n        if *n % 53 == 0 {\n            factors\
    \ = append(factors, 53)\n            *n /= 53\n            return true\n     \
    \   }\n        if *n % 59 == 0 {\n            factors = append(factors, 59)\n\
    \            *n /= 59\n            return true\n        }\n        if *n % 61\
    \ == 0 {\n            factors = append(factors, 61)\n            *n /= 61\n  \
    \          return true\n        }\n        if *n % 67 == 0 {\n            factors\
    \ = append(factors, 67)\n            *n /= 67\n            return true\n     \
    \   }\n        if *n % 71 == 0 {\n            \nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6lvyschi_test.go:111:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074546
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074558
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp_37anf2x_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp_37anf2x_test.go:31\
    \ +0xa1d\ntesting.tRunner(0xc000198ea0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i-1] *= i\n            factors[i-1]--\n    \
    \    }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpdpc0y2yr_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=-1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpdpc0y2yr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-1) %!s(int=0)\
    \ %!s(int=-1)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpdpc0y2yr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-1)\
    \ %!s(int=0) %!s(int=-1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-1)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpdpc0y2yr_test.go:43: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=-1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=-1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-1)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpdpc0y2yr_test.go:43: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=-1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j]\n                n /= i\n            }\n        }\n    }\n   \
    \ return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp0h1buke6_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp0h1buke6_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074548
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp5jdjfdhh_test.go:16\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp5jdjfdhh_test.go:30\
    \ +0x9f3\ntesting.tRunner(0xc000199040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074549
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 2; i*j <= n; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j-1]\n                n /= i\n            }\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpss0gunz5_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpss0gunz5_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpss0gunz5_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpss0gunz5_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpss0gunz5_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074548
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \            i++\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074562
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        for\
    \ j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i] + 1\n                break\n            }\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp80q5p4_j_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp80q5p4_j_test.go:33\
    \ +0xa1e\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            if n%i == 0 && n%j == 0 {\n                factors[i] = factors[i]\
    \ + 1\n                factors[j] = factors[j] + 1\n            }\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp12ycfksx_test.go:15\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp12ycfksx_test.go:31\
    \ +0x9b4\ntesting.tRunner(0xc00019b1e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpkge51m2b_test.go:16\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpkge51m2b_test.go:29\
    \ +0x8c6\ntesting.tRunner(0xc0001036c0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074548
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp_vslfpg9_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp_vslfpg9_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5ll3fa2a_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5ll3fa2a_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 0; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j]\n                factors[j] = 0\n            }\n        }\n  \
    \  }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074562
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpoibak4f3_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpoibak4f3_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpoibak4f3_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpoibak4f3_test.go:46: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpoibak4f3_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n      \
    \      factors[i-1]++\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpdtjr0j0f_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpdtjr0j0f_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpdtjr0j0f_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpdtjr0j0f_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpdtjr0j0f_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n != 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpiq82gvqx_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpiq82gvqx_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpiq82gvqx_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpiq82gvqx_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpgnmrwgz7_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpgnmrwgz7_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpgnmrwgz7_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpgnmrwgz7_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpgnmrwgz7_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpc_2c3rkd_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp5jdjfdhh_test.go:16\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp5jdjfdhh_test.go:30\
    \ +0x9f3\ntesting.tRunner(0xc000199040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074549
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4qwlckib_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4qwlckib_test.go:31\
    \ +0xa1d\ntesting.tRunner(0xc0000cc4e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp5jdjfdhh_test.go:16\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp5jdjfdhh_test.go:30\
    \ +0x9f3\ntesting.tRunner(0xc000199040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074549
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i] * j\n                n /= i\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp8vrl6iv8_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp8vrl6iv8_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp8vrl6iv8_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp8vrl6iv8_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp8vrl6iv8_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    factors[2] = 2\n\
    \    factors[3] = 1\n    factors[4] = 2\n    factors[5] = 2\n    factors[6] =\
    \ 1\n    factors[7] = 2\n    factors[8] = 2\n    factors[9] = 1\n    factors[10]\
    \ = 2\n    factors[11] = 2\n    factors[12] = 1\n    factors[13] = 2\n    factors[14]\
    \ = 2\n    factors[15] = 1\n    factors[16] = 2\n    factors[17] = 2\n    factors[18]\
    \ = 1\n    factors[19] = 2\n    factors[20] = 2\n    factors[21] = 2\n    factors[22]\
    \ = 1\n    factors[23] = 2\n    factors[24] = 2\n    factors[25] = 1\n    factors[26]\
    \ = 2\n    factors[27] = 2\n    factors[28] = 1\n    factors[29] = 2\n    factors[30]\
    \ = 2\n    factors[31] = 2\n    factors[32] = 1\n    factors[33] = 2\n    factors[34]\
    \ = 2\n    factors[35] = 1\n    factors[36] = 2\n    factors[37] = 2\n    factors[38]\
    \ = 1\n    factors[39] = 2\n    factors[40] = 2\n    factors[41] = 2\n    factors[42]\
    \ = 1\n    factors[43] = 2\n    factors[44] = 2\n    factors[45] = 1\n    factors[46]\
    \ = 2\n    factors[47] = 2\n    factors[48] = 1\n    factors[49] = 2\n    factors[50]\
    \ = 2\n    factors[51] = 2\n    factors[52] = 1\n    factors[53] = 2\n    factors[54]\
    \ = 2\n    factors[55] = 1\n    factors[56] = 2\n    factors[57] = 2\n    factors[58]\
    \ = 1\n    factors[59] = 2\n    factors[60] = 2\n    factors[61] = 2\n    factors[62]\
    \ = 1\n    factors[63] = 2\n    factors[64] = 2\n    factors[65] = 1\n    factors[66]\
    \ = 2\n    factors[67] = 2\n    factors[68] = 1\n    factors[69] = 2\n    factors[70]\
    \ = 2\n    factors[71] = 2\n    factors[72] = 1\n    factors[73] = 2\n    factors[74]\
    \ = 2\n    factors[75] = 1\n    \nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7m07yiu6_test.go:90:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074549
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpt8xdnbmy_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpt8xdnbmy_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpt8xdnbmy_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpt8xdnbmy_test.go:42: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpt8xdnbmy_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074548
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmplrs6yzbm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplrs6yzbm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors[len(factors)-1] = factors[len(factors)-1]\
    \ * n\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpgfvqpbfm_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpgfvqpbfm_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpgfvqpbfm_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074558
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    factors[2] = 2\n\
    \    factors[3] = 1\n    factors[4] = n\n    factors[5] = 2\n    factors[6] =\
    \ 1\n    factors[7] = n\n    factors[8] = 2\n    factors[9] = 1\n    factors[10]\
    \ = n\n    factors[11] = 2\n    factors[12] = 1\n    factors[13] = n\n    factors[14]\
    \ = 2\n    factors[15] = 1\n    factors[16] = n\n    factors[17] = 2\n    factors[18]\
    \ = 1\n    factors[19] = n\n    factors[20] = 2\n    factors[21] = 1\n    factors[22]\
    \ = n\n    factors[23] = 2\n    factors[24] = 1\n    factors[25] = n\n    factors[26]\
    \ = 2\n    factors[27] = 1\n    factors[28] = n\n    factors[29] = 2\n    factors[30]\
    \ = 1\n    factors[31] = n\n    factors[32] = 2\n    factors[33] = 1\n    factors[34]\
    \ = n\n    factors[35] = 2\n    factors[36] = 1\n    factors[37] = n\n    factors[38]\
    \ = 2\n    factors[39] = 1\n    factors[40] = n\n    factors[41] = 2\n    factors[42]\
    \ = 1\n    factors[43] = n\n    factors[44] = 2\n    factors[45] = 1\n    factors[46]\
    \ = n\n    factors[47] = 2\n    factors[48] = 1\n    factors[49] = n\n    factors[50]\
    \ = 2\n    factors[51] = 1\n    factors[52] = n\n    factors[53] = 2\n    factors[54]\
    \ = 1\n    factors[55] = n\n    factors[56] = 2\n    factors[57] = 1\n    factors[58]\
    \ = n\n    factors[59] = 2\n    factors[60] = 1\n    factors[61] = n\n    factors[62]\
    \ = 2\n    factors[63] = 1\n    factors[64] = n\n    factors[65] = 2\n    factors[66]\
    \ = 1\n    factors[67] = n\n    factors[68] = 2\n    factors[69] = 1\n    factors[70]\
    \ = n\n    factors[71] = 2\n    factors[72] = 1\n    factors[73] = n\n    factors[74]\
    \ = 2\n    factors[75] = 1\nfunc TestFactorize(t *testing.T) {\n  candidate :=\
    \ factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuc4yk1eq_test.go:89:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074549
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpjz4kn3b8_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpjz4kn3b8_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpjz4kn3b8_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpjz4kn3b8_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpjz4kn3b8_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors[len(factors)-1]++\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9b4_x01p_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9b4_x01p_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        for\
    \ j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ += j\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpy7llm51n_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpy7llm51n_test.go:33\
    \ +0xa1e\ntesting.tRunner(0xc000103380, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074550
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors := append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84dd8tb0_test.go:15:13: factors declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    n /= 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpbgnj0p4v_test.go:43: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpbgnj0p4v_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpbgnj0p4v_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpbgnj0p4v_test.go:43: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpbgnj0p4v_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=7) %!s(int=29)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpbgnj0p4v_test.go:43: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=7) %!s(int=3307)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpbgnj0p4v_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=643)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpbgnj0p4v_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074551
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp0z2m6lv9_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp0z2m6lv9_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp0z2m6lv9_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp0z2m6lv9_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp0z2m6lv9_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int"
  timestamp: 1660074551
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074558
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj_5l19u3_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpj_5l19u3_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpdyqsrxh1_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpdyqsrxh1_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpdyqsrxh1_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpdyqsrxh1_test.go:46: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpdyqsrxh1_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074551
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors[len(factors)-1]++\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9b4_x01p_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp9b4_x01p_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9b4_x01p_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n      \
    \      factors[i] = i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpzkpx6mfn_test.go:14\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpzkpx6mfn_test.go:29\
    \ +0x8dc\ntesting.tRunner(0xc0000d4680, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074551
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n        factor++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpz412wh2k_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpz412wh2k_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpz412wh2k_test.go:44: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpz412wh2k_test.go:44: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpz412wh2k_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpz412wh2k_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074551
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpfv72yzmk_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfv72yzmk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074565
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.015s\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j]\n                n /= i\n            }\n        }\n    }\n   \
    \ return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp0h1buke6_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp0h1buke6_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp0h1buke6_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp4qwlckib_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp4qwlckib_test.go:31\
    \ +0xa1d\ntesting.tRunner(0xc0000cc4e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpoibak4f3_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpoibak4f3_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpoibak4f3_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpoibak4f3_test.go:46: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpoibak4f3_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp88_q4hi4_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp88_q4hi4_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.12s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpj3_0haqr_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpxsp1mh2w_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxsp1mh2w_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=16)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcu9jc49b_test.go:44: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=57) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcu9jc49b_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3249) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s("
  timestamp: 1660074548
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        for\
    \ j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i] * j\n                break\n            }\n        }\n    }\n \
    \   return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpa067c87f_test.go:17\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpa067c87f_test.go:33\
    \ +0xa5e\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074551
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4q_rl58y_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4q_rl58y_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int="
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpcpp_rqog_test.go:45: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcpp_rqog_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp2j5pqwew_test.go:45: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp2j5pqwew_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmphr_diajg_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmphr_diajg_test.go:42:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmphr_diajg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\n\
    FAIL\n"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpsg1icf30_test.go:47: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpsg1icf30_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=342) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s("
  timestamp: 1660074550
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.10s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpse6kb37x_test.go:43: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpse6kb37x_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074547
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\nfunc factorize(n int) []int {\n    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    if n > 1 {\n        factors[len(factors)-1] = factors[len(factors)-1]\
    \ * n\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpv3dzqkj6_test.go:46: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpv3dzqkj6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpv3dzqkj6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpv3dzqkj6_test.go:46: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpv3dzqkj6_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074551
