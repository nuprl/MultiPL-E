language: go_test.go
name: HumanEval_57_monotonic
results:
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n\
    \        }\n\n        if k > i {\n            i++\n        } else if k < j {\n\
    \            j--\n        } else {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpq6aig6a__test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpq6aig6a__test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpsbh6vrgh_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpsbh6vrgh_test.go:47\
    \ +0x857\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for {\n        if\
    \ i == j {\n            break\n        }\n\n        if l[i] > l[j] {\n       \
    \     k = i\n        } else {\n            k = j\n        }\n\n        i++\n \
    \       j--\n    }\n\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpleqwupkb_test.go:23\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpleqwupkb_test.go:43\
    \ +0x925\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        return true\n        }\n        if i == j {\n            return false\n\
    \        }\n        if l[i] > l[k] {\n            i = k\n        } else {\n  \
    \          j = k\n        }\n        k++\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpzvqcbmng_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpzvqcbmng_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpzvqcbmng_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpzvqcbmng_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpzvqcbmng_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] < l[j]\
    \ {\n            return false\n        }\n        if l[i] > l[j] {\n         \
    \   return true\n        }\n        i++\n        j--\n    }\n    return false\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp5vhmlyh8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp5vhmlyh8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp5vhmlyh8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp5vhmlyh8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp16hmqsra_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp16hmqsra_test.go:44\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] < l[j] {\n            return false\n\
    \        }\n        if l[i] > l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpdyugnfk6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpdyugnfk6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpdyugnfk6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n            j--\n\
    \        } else {\n            i++\n            k++\n        }\n    }\n    return\
    \ k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpfw2bc39e_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpfw2bc39e_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpfw2bc39e_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpfw2bc39e_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpfw2bc39e_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpfw2bc39e_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       return false\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpoqq6tkbh_test.go:19\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpoqq6tkbh_test.go:41\
    \ +0x6e5\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        if i == j {\n            break\n\
    \        }\n        if l[i] > l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n        if i == j {\n            break\n        }\n \
    \       if l[i] < l[j] {\n            i++\n        } else {\n            j--\n\
    \        }\n        if i == j {\n            break\n        }\n        if l[i]\
    \ > l[j] {\n            i++\n        } else {\n            j--\n        }\n  \
    \  }\n    return j > k\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp7xjnt1w1_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp7xjnt1w1_test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    for {\n        if i == j {\n \
    \           break\n        }\n\n        if l[i] > l[j] {\n            return false\n\
    \        }\n\n        if l[i] < l[j] {\n            i++\n        } else {\n  \
    \          j--\n        }\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmphtvix96g_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmphtvix96g_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmphtvix96g_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n    l := l[0]\n    for {\n\
    \        if i == j {\n            break\n        }\n\n        if l[i] > l[j] {\n\
    \            k = i\n        } else {\n            k = j\n        }\n\n       \
    \ if k == i {\n            return false\n        }\n\n        i = k\n        j\
    \ = k\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0bkusp0_test.go:17:7: no new variables on left side of :=

    /tmp/tmpc0bkusp0_test.go:17:10: cannot use l[0] (variable of type int) as type
    []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for k < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            i++\n        } else {\n            j--\n        }\n        k++\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpg61pqewk_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpg61pqewk_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpg61pqewk_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n    \
    \    }\n        if k == i {\n            return false\n        }\n        if l[i]\
    \ > l[k] {\n            i++\n        } else {\n            j--\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp7j0ac7cw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp7j0ac7cw_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp7j0ac7cw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            return true\n        }\n \
    \       i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpfciyz9re_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpfciyz9re_test.go:44\
    \ +0x7c5\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    for {\n        if l[i] > l[j] {\n  \
    \          return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            return true\n        }\n \
    \       i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp07ayw4v0_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp07ayw4v0_test.go:44\
    \ +0x7c5\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n    l := l[:]\n\n    for\
    \ {\n        if i > j {\n            break\n        }\n\n        if l[i] > l[j]\
    \ {\n            i++\n        } else if l[i] < l[j] {\n            j--\n     \
    \   } else {\n            i++\n            j--\n        }\n\n        if i == j\
    \ {\n            break\n        }\n\n        if l[i] > l[j] {\n            i++\n\
    \        } else {\n            j--\n        }\n    }\n\n    return j > k\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_q2w4gf_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpznwg5a3n_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpznwg5a3n_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3encej3x_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n            j--\n\
    \        } else {\n            i++\n            j--\n            k++\n       \
    \ }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpnbm0e75y_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpnbm0e75y_test.go:49\
    \ +0x865\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n    }\n    return k == len(l)\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpn8dv6wsk_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpn8dv6wsk_test.go:46\
    \ +0x7a5\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            k = i\n        }\n        i++\n        j--\n    }\n    return k ==\
    \ i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            break\n        }\n       \
    \ i++\n        j--\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpr9hw1zgl_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpr9hw1zgl_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074906
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev\
    \ {\n            return false\n        }\n        prev = v\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpvgqh4dqa_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpvgqh4dqa_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpsbh6vrgh_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpsbh6vrgh_test.go:47\
    \ +0x857\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3encej3x_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            i++\n            j--\n        }\n        if i == j {\n          \
    \  i++\n            j = k\n        }\n        k++\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074906
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] < l[j]\
    \ {\n            return false\n        }\n        if l[i] > l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp1dfbkbp9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp1dfbkbp9_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp1dfbkbp9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpvafkns4j_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpvafkns4j_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001991e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    for i < j {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        i++\n            j--\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074906
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpznwg5a3n_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpznwg5a3n_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l)-1\n\n    for i < j {\n        if l[i] < l[j]\
    \ {\n            return false\n        }\n\n        if l[i] > l[j] {\n       \
    \     return true\n        }\n\n        i++\n        j--\n    }\n\n    return\
    \ false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpreyg0s_c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpreyg0s_c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpreyg0s_c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpreyg0s_c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    switch l[0] {\n    case 0:\n        return true\n    case 1:\n  \
    \      return monotonic(l[1:])\n    default:\n        return monotonic(l[1:])\
    \ && monotonic(l[:1])\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp68u42u8k_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp68u42u8k_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp68u42u8k_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp68u42u8k_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp68u42u8k_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp68u42u8k_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpbgvvxngw_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpbgvvxngw_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpbgvvxngw_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            return false\n        }\n        if l[i] > l[j] {\n\
    \            return true\n        }\n        if l[i] > l[k] {\n            k =\
    \ i\n        }\n        i++\n        j--\n    }\n    return l[k] < l[j]\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpken0l9_r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpken0l9_r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpken0l9_r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpken0l9_r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    for {\n        if l[i] > l[j] {\n  \
    \          return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            break\n        }\n       \
    \ i++\n        j--\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp6o_hgm0e_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp6o_hgm0e_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp16hmqsra_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp16hmqsra_test.go:44\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] < l[j]\
    \ {\n            return false\n        }\n        if l[i] > l[j] {\n         \
    \   return true\n        }\n        i++\n        j--\n    }\n    return false\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp5vhmlyh8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp5vhmlyh8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp5vhmlyh8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp5vhmlyh8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    k := 0\n    l := l[0]\n\n    for\
    \ i < j {\n        if k < l {\n            if l+1 != k {\n                return\
    \ false\n            }\n            k = k + 1\n        }\n        if k == l {\n\
    \            k = k + 1\n        }\n        l = l+1\n        i = i + 1\n      \
    \  j = j - 1\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazupz2k__test.go:18:7: no new variables on left side of :=

    /tmp/tmpazupz2k__test.go:18:10: cannot use l[0] (variable of type int) as type
    []int in assignment

    /tmp/tmpazupz2k__test.go:21:16: invalid operation: k < l (mismatched types int
    and []int)

    /tmp/tmpazupz2k__test.go:22:18: cannot convert 1 (untyped int constant) to []int

    /tmp/tmpazupz2k__test.go:27:17: invalid operation: k == l (mismatched types int
    and []int)

    /tmp/tmpazupz2k__test.go:30:15: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if l[i]\
    \ < l[j] {\n            return false\n        }\n        if l[i] > l[j] {\n  \
    \          return true\n        }\n        if i == j {\n            return true\n\
    \        }\n        if l[i] > l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n        k++\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp9ptgndta_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp9ptgndta_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp9ptgndta_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            return true\n      \
    \  }\n        if l[i] > l[j] {\n            i++\n        } else {\n          \
    \  j--\n        }\n        k++\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpzbsj8_ef_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpzbsj8_ef_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpzbsj8_ef_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpzbsj8_ef_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpzbsj8_ef_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for {\n        if i == j\
    \ {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpxwnntv3f_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpxwnntv3f_test.go:47\
    \ +0x857\ntesting.tRunner(0xc00019b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            i++\n        } else {\n            j--\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyfrdvu8_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            i++\n            j--\n        } else {\n            i++\n       \
    \     k++\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp9szb9c2z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp9szb9c2z_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9szb9c2z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9szb9c2z_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp9szb9c2z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp9szb9c2z_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n    }\n    return j > k\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpw3gn75ly_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpw3gn75ly_test.go:46\
    \ +0x7d4\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    for {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   return true\n        }\n        if i == j {\n            break\n        }\n\
    \        i++\n        j--\n    }\n\n    return false\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpvqbukgi7_test.go:18\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpvqbukgi7_test.go:48\
    \ +0x7a5\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       return false\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] > l[j] {\n            return false\n        }\n        if l[i] <\
    \ l[j] {\n            i++\n        } else {\n            j--\n        }\n    }\n\
    \n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpk79z0crd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpk79z0crd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk79z0crd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk79z0crd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpk79z0crd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpk79z0crd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l)-1\n    k := 0\n\n    for i < j {\n      \
    \  if l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n\
    \        }\n\n        if k > i {\n            i++\n        } else if k < j {\n\
    \            j--\n        } else {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp5ybotwve_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp5ybotwve_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        return true\n        }\n        if i == j {\n            return true\n\
    \        }\n        if l[i] > l[k] {\n            k = i\n        } else {\n  \
    \          i = j\n        }\n        j = k\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpqlh27moe_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpqlh27moe_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpqlh27moe_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpqlh27moe_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    for i < j {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        i++\n        } else {\n            j--\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp4m9nznuz_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp4m9nznuz_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp4m9nznuz_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] > l[j] {\n            return false\n        }\n\n        if l[i]\
    \ < l[j] {\n            i++\n        } else {\n            j--\n        }\n\n\
    \        if i == j {\n            i++\n            j--\n            k++\n    \
    \    }\n    }\n\n    return k == len(l)\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpwdifptcp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpwdifptcp_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpwdifptcp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpwdifptcp_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpwdifptcp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpwdifptcp_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            return true\n        }\n \
    \       i++\n        j--\n    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpfciyz9re_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpfciyz9re_test.go:44\
    \ +0x7c5\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev\
    \ {\n            return false\n        }\n        prev = v\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpvgqh4dqa_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpvgqh4dqa_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n\
    \        }\n\n        if k > i {\n            return false\n        }\n\n    \
    \    if l[i] > l[k] {\n            i++\n        } else {\n            j--\n  \
    \      }\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpkip4ewjv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpkip4ewjv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpkip4ewjv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpkip4ewjv_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpkip4ewjv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            k = i\n        }\n        i++\n        j--\n    }\n    return k ==\
    \ i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else if l[i] > l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        if k == len(l) {\n            return\
    \ true\n        }\n        if l[i] < l[k] {\n            k++\n        } else if\
    \ l[i] > l[k] {\n            k--\n        } else {\n            k++\n        }\n\
    \    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic({0xc0000c4550?, 0x450700?, 0x8?})\n\
    \t/tmp/tmpo6_zxgdy_test.go:31 +0xbc\ncommand-line-arguments_test.TestMonotonic(0x0?)\n\
    \t/tmp/tmpo6_zxgdy_test.go:49 +0x93\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            k = i\n        }\n        i++\n        j--\n    }\n    return k ==\
    \ i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpimjtcw_test.go:15:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] < l[j] {\n            i++\n        }\
    \ else {\n            j--\n        }\n    }\n    return j >= i\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpi_6mc0wx_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpi_6mc0wx_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       return false\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmph_cun6ei_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmph_cun6ei_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    for i < j {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        return true\n        }\n        i++\n        j--\n    }\n\n    return\
    \ false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmppi2m0ctn_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmppi2m0ctn_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmppi2m0ctn_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmppi2m0ctn_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmppi2m0ctn_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if l[i] > l[j] {\n\
    \            return false\n        }\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if i == j {\n            break\n        }\n       \
    \ i++\n        j--\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpr9hw1zgl_test.go:16\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpr9hw1zgl_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            k = i\n        }\n        i++\n        j--\n    }\n    return k ==\
    \ i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpffkp4wjv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpffkp4wjv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpffkp4wjv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpffkp4wjv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpffkp4wjv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpffkp4wjv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            return false\n        }\n        if l[i] > l[j] {\n\
    \            return true\n        }\n        if l[i] == l[j] {\n            i++\n\
    \            j--\n        }\n        if i == j {\n            i++\n        }\n\
    \        if i == j {\n            j--\n        }\n        if i == j {\n      \
    \      k++\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp3ncdjvv4_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp3ncdjvv4_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp3ncdjvv4_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp3ncdjvv4_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i] > l[j]\
    \ {\n            return false\n        }\n        if l[i] < l[j] {\n         \
    \   i++\n        } else {\n            j--\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp7tyb3w8w_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp7tyb3w8w_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n       \
    \ if v < min {\n            min = v\n        }\n        if v > max {\n       \
    \     max = v\n        }\n    }\n\n    return min <= max\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpwt6kjgb8_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpwt6kjgb8_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for {\n        if\
    \ i == j {\n            break\n        }\n\n        if l[i] < l[j] {\n       \
    \     i++\n        } else if l[i] > l[j] {\n            j--\n        } else {\n\
    \            i++\n            j--\n        }\n\n        if k == len(l) {\n   \
    \         return true\n        }\n        k++\n    }\n\n    return false\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpl97_14ci_test.go:23\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpl97_14ci_test.go:55\
    \ +0xad4\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if l[i] > l[j] {\n            return false\n\
    \        }\n        if l[i] < l[j] {\n            i++\n        } else {\n    \
    \        j--\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpi8qqsns6_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpi8qqsns6_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n\
    \        }\n\n        if k > i {\n            i++\n        } else if k < j {\n\
    \            j--\n        } else {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpbw_nqn79_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpbw_nqn79_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpbw_nqn79_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpbw_nqn79_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpbw_nqn79_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpbw_nqn79_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n    \
    \    }\n        if l[i] < l[k] {\n            i++\n        } else {\n        \
    \    j--\n        }\n    }\n    return j > i\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp57qnssxv_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp57qnssxv_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp57qnssxv_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp57qnssxv_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp57qnssxv_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp57qnssxv_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n    \
    \    }\n        if k > i {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpu1dcs7nk_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpu1dcs7nk_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpu1dcs7nk_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n    k := 0\n\n    for i < j {\n    \
    \    if l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n\
    \        }\n\n        if k > i {\n            i++\n        } else if k < j {\n\
    \            j--\n        } else {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpq6aig6a__test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpq6aig6a__test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpxdyrvfie_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpxdyrvfie_test.go:47\
    \ +0x857\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            i++\n\
    \        } else {\n            j--\n        }\n        if i == j {\n         \
    \   break\n        }\n        if l[i] > l[j] {\n            k++\n        } else\
    \ {\n            k--\n        }\n    }\n    return k == 0 && i == j\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpx13pj4hp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpx13pj4hp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpx13pj4hp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpx13pj4hp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpx13pj4hp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpx13pj4hp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpk89tqv96_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpk89tqv96_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmp2uzyoc___test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmp2uzyoc___test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        return true\n        }\n        if i == j {\n            break\n    \
    \    }\n        if l[i] < l[k] {\n            i++\n        } else {\n        \
    \    j--\n        }\n        k++\n    }\n    return false\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpzq7lq6xg_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpzq7lq6xg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpzq7lq6xg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpzq7lq6xg_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpzq7lq6xg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: null
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] < l[j] {\n            k = i\n        } else {\n            k = j\n    \
    \    }\n        if k == i {\n            return false\n        }\n        if l[i]\
    \ > l[k] {\n            j = k\n        } else {\n            i = k\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074910
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n  \
    \  }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] < l[j] {\n            k =\
    \ i\n        } else {\n            k = j\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpvafkns4j_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpvafkns4j_test.go:38\
    \ +0x925\ntesting.tRunner(0xc0001991e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9d7jq_uw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9d7jq_uw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    i := 0\n    j := len(l) - 1\n\n    k := 0\n    l := l[0]\n\n    for\
    \ {\n        if i == j {\n            break\n        }\n\n        if l[i] > l[j]\
    \ {\n            k = i\n        } else {\n            k = j\n        }\n\n   \
    \     i++\n        j--\n\n        if i == j {\n            break\n        }\n\
    \    }\n\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt298_eer_test.go:18:7: no new variables on left side of :=

    /tmp/tmpt298_eer_test.go:18:10: cannot use l[0] (variable of type int) as type
    []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        i++\n        j--\n\
    \    }\n    return k == i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpq6u13o_p_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpq6u13o_p_test.go:38\
    \ +0x926\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n\n    prev := l[0]\n    for _, v := range l[1:] {\n        if v < prev\
    \ {\n            return false\n        }\n        prev = v\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpvgqh4dqa_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpvgqh4dqa_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    last := l[0]\n    for _, v := range l[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk_v1507g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk_v1507g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for i < j {\n        if\
    \ l[i] > l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n\
    \            k = i\n        }\n        i++\n        j--\n    }\n    return k ==\
    \ i\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpti0d2mzo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpti0d2mzo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n    }\n    return k == len(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpr4qi0cry_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpr4qi0cry_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l)-1\n    k := 0\n    for {\n        if l[i] >\
    \ l[j] {\n            return false\n        }\n        if l[i] < l[j] {\n    \
    \        return true\n        }\n        if i == j {\n            return true\n\
    \        }\n        if l[i] < l[k] {\n            i++\n        } else {\n    \
    \        j--\n        }\n        k++\n    }\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmptutdwz90_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmptutdwz90_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmptutdwz90_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmptutdwz90_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            i++\n\
    \        } else if l[i] < l[j] {\n            j--\n        } else {\n        \
    \    i++\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpsbh6vrgh_test.go:20\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpsbh6vrgh_test.go:47\
    \ +0x857\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l []int) bool {\n    if len(l) == 0 {\n        return false\n \
    \   }\n    i := 0\n    j := len(l) - 1\n    k := 0\n    for {\n        if i ==\
    \ j {\n            break\n        }\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        k++\n    }\n    return k == len(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpug4t5vu5_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpug4t5vu5_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
