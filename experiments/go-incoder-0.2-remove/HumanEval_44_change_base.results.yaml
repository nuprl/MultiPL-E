language: go_test.go
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return\n    }\n    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 128:\n        return fmt.Sprintf(\"%llX\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%016x\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %016X\", x)\n    case 1024:\n        return fmt.Sprintf(\"%0128x\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%0128X\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%016llx\", x)\n    case 8192:\n        return fmt.Sprintf(\"%016llX\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%0128llx\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%0128llX\", x)\n    case 65536:\n        return\
    \ fmt.Sprintf(\"%016llllx\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %016llllX\", x)\n    case 262144:\n        return fmt.Sprintf(\"%0128llllx\",\
    \ x)\n    case 524288:\n        return fmt.Sprintf(\"%0128llllX\", x)\n    case\
    \ 1048576:\n        return fmt.Sprintf(\"%016llllllx\", x)\n    case 2097152:\n\
    \        return fmt.Sprintf(\"%016llllllX\", x)\n    case 4194304:\n        return\
    \ fmt.Sprintf(\"%0128llllllx\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %0128llllllX\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%016llllllllx\"\
    , x)\n    case 33554432:\n        return fmt.Sprintf(\"%016llllllllX\", x)\n \
    \   case 67108864:\n        return fmt.Sprintf(\"%016llllllllllx\", x)\n    case\
    \ 134217728:\n        return fmt.Sprintf(\"%016llllllllllX\", x)\n    case 268435456:\n\
    \        return fmt.Sprintf(\"%0128llllllllllx\", x)\n    case 536870912:\n  \
    \      return fmt.Sprintf(\"%0128llllllllllX\", x)\n    case 1073741824:\n   \
    \     return fmt.Sprintf(\"%016ll\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpodgkcuhx_test.go:74:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Printf(\"base must be\
    \ greater than 1\\n\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphfkq3wtr_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    result := \"\"\n    switch\
    \ base {\n    case 2:\n        result = fmt.Sprintf(\"%v\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 32:\n        result = fmt.Sprintf(\"%v\", x)\n    case 64:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 128:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 256:\n        result = fmt.Sprintf(\"%v\", x)\n    case 512:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 1024:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 2048:\n        result = fmt.Sprintf(\"%v\", x)\n    case 4096:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 8192:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 16384:\n        result = fmt.Sprintf(\"%v\", x)\n    case 32768:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 65536:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 131072:\n        result = fmt.Sprintf(\"%v\", x)\n    case\
    \ 262144:\n        result = fmt.Sprintf(\"%v\", x)\n    case 524288:\n       \
    \ result = fmt.Sprintf(\"%v\", x)\n    case 1048576:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 2097152:\n        result = fmt.Sprintf(\"%v\", x)\n    case\
    \ 4194304:\n        result = fmt.Sprintf(\"%v\", x)\n    case 8388608:\n     \
    \   result = fmt.Sprintf(\"%v\", x)\n    case 16777216:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 33554432:\n        result = fmt.Sprintf(\"%v\", x)\n    case\
    \ 67108864:\n        result = fmt.Sprintf(\"%v\", x)\n    case 134217728:\n  \
    \      result = fmt.Sprintf(\"%v\", x)\n    case 268435456:\n        result =\
    \ fmt.Sprintf(\"%v\", x)\n    case 536870912:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 1073741824:\n        result = fmt.Sprintf(\"%v\", x)\n    case\
    \ 2147483648:\n        result = fmt.Sprintf(\"%v\", x)\n    case 4294967296:\n\
    \        result = fmt.Sprintf(\"%v\", x)\n    case 8589934592:\n        result\
    \ = fmt.Sprintf(\"%v\", x)\n    case 17179869184:\n        result = fmt.Sprintf(\"\
    %v\", x)\n    case 34359738368:\n        result = fmt.S\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6zpy8dn_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return\n    }\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxk7v1qvh_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqms80iji_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1ql_4yyn_test.go:41: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    result := \"\"\n    if base < 10 {\n        fmt.Printf(\"\
    base must be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        result = fmt.Sprintf(\"%d\", x)\n    case 8:\n        result\
    \ = fmt.Sprintf(\"%d\", x)\n    case 16:\n        result = fmt.Sprintf(\"%d\"\
    , x)\n    case 32:\n        result = fmt.Sprintf(\"%d\", x)\n    case 64:\n  \
    \      result = fmt.Sprintf(\"%d\", x)\n    case 128:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 256:\n        result = fmt.Sprintf(\"%d\", x)\n    case 512:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 1024:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 2048:\n        result = fmt.Sprintf(\"%d\", x)\n    case 4096:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 8192:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 16384:\n        result = fmt.Sprintf(\"%d\", x)\n    case 32768:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 65536:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 131072:\n        result = fmt.Sprintf(\"%d\", x)\n    case\
    \ 262144:\n        result = fmt.Sprintf(\"%d\", x)\n    case 524288:\n       \
    \ result = fmt.Sprintf(\"%d\", x)\n    case 1048576:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 2097152:\n        result = fmt.Sprintf(\"%d\", x)\n    case\
    \ 4194304:\n        result = fmt.Sprintf(\"%d\", x)\n    case 8388608:\n     \
    \   result = fmt.Sprintf(\"%d\", x)\n    case 16777216:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 33554432:\n        result = fmt.Sprintf(\"%d\", x)\n    case\
    \ 67108864:\n        result = fmt.Sprintf(\"%d\", x)\n    case 134217728:\n  \
    \      result = fmt.Sprintf(\"%d\", x)\n    case 268435456:\n        result =\
    \ fmt.Sprintf(\"%d\", x)\n    case 536870912:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 1073741824:\n        result = fmt.Sprintf(\"%d\", x)\n    case\
    \ 2147483648:\n        result = fmt.Sprintf(\"%d\", x)\n    case 4294967296:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 8589934592:\n        result\
    \ = fmt.Sprintf(\"%d\", x)\n    case 17179869184:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case 34359738368:\n        result = fmt.Sprintf(\"%d\", x)\n   \
    \ case 68719476736:\n        result = fmt.Sprintf(\"%d\", x)\n    case 137438953472:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 274877906944:\n        result\
    \ = fmt.Sprintf(\"%d\", x)\n    case 549755813888:\n        result = fmt.Sprintf(\"\
    %d\", x)\n    case \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8kl4qwh_test.go:95:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprlmi7gxq_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Printf(\"base must be\
    \ greater than 1\\n\")\n        return \"\"\n    }\n    if base > 36 {\n     \
    \   fmt.Printf(\"base must be less than 36\\n\")\n        return \"\"\n    }\n\
    \    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprxqbl014_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscfcbe91_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbz7ae64d_test.go:99:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%v\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 64:\n        return fmt.Sprintf(\"%v\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 512:\n        return fmt.Sprintf(\"%v\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4096:\n        return fmt.Sprintf(\"%v\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 32768:\n        return fmt.Sprintf(\"%v\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 262144:\n        return fmt.Sprintf(\"%v\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%v\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%v\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%v\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%v\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%v\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%v\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 13\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ja81i5i_test.go:83:12: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    result := \"\"\n    x /= base\n    for i := 0; i < base; i++\
    \ {\n        if x%base == 0 {\n            result += string(i)\n        }\n  \
    \      x /= base\n    }\n    return result\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp157ex8nu_test.go:23:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9snyu_8y_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8eu9jzd7_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp8eu9jzd7_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp8eu9jzd7_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%v\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 64:\n        return fmt.Sprintf(\"%v\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 512:\n        return fmt.Sprintf(\"%v\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4096:\n        return fmt.Sprintf(\"%v\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 32768:\n        return fmt.Sprintf(\"%v\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 262144:\n        return fmt.Sprintf(\"%v\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%v\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%v\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%v\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%v\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%v\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%v\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 13\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ja81i5i_test.go:83:12: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 2:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 2:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 2:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 2:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj6br9she_test.go:114:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%G\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %G\", x)\n    case 16:\n        return fmt.Sprintf(\"%a\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %A\", x)\n    case 10:\n        return fmt.Sprintf(\"%A\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%c\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 16:\n        return fmt.Sprintf(\"%C\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 10:\n        return fmt.Sprintf(\"%e\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 16:\n        return fmt.Sprintf(\"%G\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%G\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%G\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %G\", x)\n    case 16:\n        return fmt.Sprintf(\"%a\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %A\", x)\n    case 10:\n        return fmt.\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr5v9qdm0_test.go:101:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph1oxp9yh_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt4tgbpe__test.go:14:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph1oxp9yh_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    result := \"\"\n    switch\
    \ base {\n    case 2:\n        result = fmt.Sprintf(\"%d\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%o\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %x\", x)\n    case 32:\n        result = fmt.Sprintf(\"%X\", x)\n    case 64:\n\
    \        result = fmt.Sprintf(\"%llx\", x)\n    case 128:\n        result = fmt.Sprintf(\"\
    %q\", x)\n    default:\n        fmt.Println(\"Base must be less than 128\")\n\
    \        return \"\"\n    }\n    return result\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp9_o6_uii_test.go:27:18: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return\n    }\n    if x == 0 {\n        return\
    \ fmt.Sprintf(\"0\")\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d%s\"\
    , x, change_base(x / base, base))\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_fxd6d12_test.go:14:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074735
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 512:\n        return fmt.Sprintf(\"%x\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4096:\n        return fmt.Sprintf(\"%x\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 32768:\n        return fmt.Sprintf(\"%x\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 262144:\n        return fmt.Sprintf(\"%x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%x\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%X\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%o\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%X\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%o\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%x\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%x\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk5yoqsq1_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph1oxp9yh_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1ql_4yyn_test.go:41: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 512:\n        return fmt.Sprintf(\"%llx\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4096:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 8192:\n        return fmt.Sprintf(\"%llx\", x)\n    case 16384:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 32768:\n        return fmt.Sprintf(\"%llx\"\
    , x)\n    case 65536:\n        return fmt.Sprintf(\"%llx\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 524288:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 1048576:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2097152:\n     \
    \   return fmt.Sprintf(\"%llx\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 16777216:\n        return fmt.Sprintf(\"%llx\", x)\n    case 33554432:\n   \
    \     return fmt.Sprintf(\"%llx\", x)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 134217728:\n        return fmt.Sprintf(\"%llx\", x)\n   \
    \ case 268435456:\n        return fmt.Sprintf(\"%llx\", x)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 1073741824:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%llx\", x)\n  \
    \  case 8589934592:\n        return fmt.Sprintf(\"%llx\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 137438953472:\n        return \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcaqhz3ga_test.go:85:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if x < base {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%v\", x,\
    \ base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7wl13duj_test.go:44: expected '22', got '23'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7wl13duj_test.go:44: expected\
    \ '100', got '03'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp7wl13duj_test.go:44: expected '11101010', got '12'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp7wl13duj_test.go:44: expected '10000', got '02'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp7wl13duj_test.go:44: expected\
    \ '1000', got '02'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmp7wl13duj_test.go:44: expected '111', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpomnuivrl_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpomnuivrl_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpomnuivrl_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8eu9jzd7_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp8eu9jzd7_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp8eu9jzd7_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 512:\n        return fmt.Sprintf(\"%llx\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4096:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 8192:\n        return fmt.Sprintf(\"%llx\", x)\n    case 16384:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 32768:\n        return fmt.Sprintf(\"%llx\"\
    , x)\n    case 65536:\n        return fmt.Sprintf(\"%llx\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 524288:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 1048576:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2097152:\n     \
    \   return fmt.Sprintf(\"%llx\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 16777216:\n        return fmt.Sprintf(\"%llx\", x)\n    case 33554432:\n   \
    \     return fmt.Sprintf(\"%llx\", x)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 134217728:\n        return fmt.Sprintf(\"%llx\", x)\n   \
    \ case 268435456:\n        return fmt.Sprintf(\"%llx\", x)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 1073741824:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%llx\", x)\n  \
    \  case 8589934592:\n        return fmt.Sprintf(\"%llx\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 137438953472:\n        return \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcaqhz3ga_test.go:85:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %lx\", x)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpn3n02bys_test.go:20:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsy73clmc_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    result := \"\"\n    switch base {\n    case 10:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %x\", x)\n    case 2:\n        result = fmt.Sprintf(\"%o\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%b\", x)\n    default:\n        fmt.Printf(\"\
    base %d is not supported\\n\", base)\n    }\n    return result\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base 3 is not supported\nbase 3 is not supported\nbase 3 is not supported\n\
    base 4 is not supported\nbase 5 is not supported\nbase 6 is not supported\nbase\
    \ 7 is not supported\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpkwxnd4fi_test.go:52: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpkwxnd4fi_test.go:52: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpkwxnd4fi_test.go:52:\
    \ expected '11101010', got '352'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpkwxnd4fi_test.go:52: expected '10000', got '20'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpkwxnd4fi_test.go:52: expected '1000', got '10'\n    ---\
    \ FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpkwxnd4fi_test.go:52: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpkwxnd4fi_test.go:52:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpkwxnd4fi_test.go:52: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpkwxnd4fi_test.go:52: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpkwxnd4fi_test.go:52: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpkwxnd4fi_test.go:52:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpkwxnd4fi_test.go:52: expected '7', got '111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return\n    }\n    if x == 0 {\n       \
    \ fmt.Println(\"Cannot change base of 0\")\n        return\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0j4b9yl1_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    default:\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpybqm97at_test.go:26:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpl9vivs63_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpl9vivs63_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpl9vivs63_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x\
    \ /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n\
    \    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %=\
    \ base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n \
    \   if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x\
    \ /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n\
    \    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %=\
    \ base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n \
    \   if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx5qofp8t_test.go:134:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 512:\n        return fmt.Sprintf(\"%x\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4096:\n        return fmt.Sprintf(\"%x\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 32768:\n        return fmt.Sprintf(\"%x\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 262144:\n        return fmt.Sprintf(\"%x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%x\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%X\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%o\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%X\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%o\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%x\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%x\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk5yoqsq1_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    if x < \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0quenczk_test.go:119:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    if x == 1 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if x == 2 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if\
    \ x == 3 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 4 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 5 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 6 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    if x == 7 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 8\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 9 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if x == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 11 {\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n    if x == 12 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x\
    \ == 13 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 14 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 15 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if x == 16 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 17 {\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n    if x == 18 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x\
    \ == 19 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 20 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 21 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if x == 22 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 23 {\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n    if x == 24 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x\
    \ == 25 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 26 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 27 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if x == 28 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 29 {\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n    if x == 30 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x\
    \ == 31 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 32 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if x == 33 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if x == 34 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 35 {\n        return fmt.Sprintf(\"%d\", \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp97dhmus2_test.go:123:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    result := \"\"\n    switch base {\n    case 10:\n\
    \        result = fmt.Sprintf(\"%d\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %x\", x)\n    case 2:\n        result = fmt.Sprintf(\"%o\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%b\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %hx\", x)\n    case 32:\n        result = fmt.Sprintf(\"%x\", x)\n    case 64:\n\
    \        result = fmt.Sprintf(\"%llx\", x)\n    case 128:\n        result = fmt.Sprintf(\"\
    %qx\", x)\n    case 256:\n        result = fmt.Sprintf(\"%llx\", x)\n    case\
    \ 512:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 1024:\n        result\
    \ = fmt.Sprintf(\"%nqx\", x)\n    case 2048:\n        result = fmt.Sprintf(\"\
    %nqx\", x)\n    case 4096:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case\
    \ 8192:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 16384:\n        result\
    \ = fmt.Sprintf(\"%nqx\", x)\n    case 32768:\n        result = fmt.Sprintf(\"\
    %nqx\", x)\n    case 65536:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case\
    \ 131072:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 262144:\n     \
    \   result = fmt.Sprintf(\"%nqx\", x)\n    case 524288:\n        result = fmt.Sprintf(\"\
    %nqx\", x)\n    case 1048576:\n        result = fmt.Sprintf(\"%nqx\", x)\n   \
    \ case 2097152:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 4194304:\n\
    \        result = fmt.Sprintf(\"%nqx\", x)\n    case 8388608:\n        result\
    \ = fmt.Sprintf(\"%nqx\", x)\n    case 16777216:\n        result = fmt.Sprintf(\"\
    %nqx\", x)\n    case 33554432:\n        result = fmt.Sprintf(\"%nqx\", x)\n  \
    \  case 67108864:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 134217728:\n\
    \        result = fmt.Sprintf(\"%nqx\", x)\n    case 268435456:\n        result\
    \ = fmt.Sprintf(\"%nqx\", x)\n    case 536870912:\n        result = fmt.Sprintf(\"\
    %nqx\", x)\n    case 1073741824:\n        result = fmt.Sprintf(\"%nqx\", x)\n\
    \    case 2147483648:\n        result = fmt.Sprintf(\"%nqx\", x)\n    case 4294967296:\n\
    \        result = fmt.Sprintf(\"%nqx\", x)\n    case 8589934592:\n        result\
    \ = fmt.Sprintf(\"%nqx\", x)\n    case 17179869\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1o93ax4_test.go:82:18: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074735
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n    }\n    if x == 0 {\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmytgr4ms_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8:\n        return fmt.Sprintf(\"%v\", x/10)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x/100)\n    case 32:\n        return fmt.Sprintf(\"\
    %v\", x/1000)\n    case 64:\n        return fmt.Sprintf(\"%v\", x/10000)\n   \
    \ case 128:\n        return fmt.Sprintf(\"%v\", x/100000)\n    case 256:\n   \
    \     return fmt.Sprintf(\"%v\", x/1000000)\n    case 512:\n        return fmt.Sprintf(\"\
    %v\", x/10000000)\n    case 1024:\n        return fmt.Sprintf(\"%v\", x/100000000)\n\
    \    case 2048:\n        return fmt.Sprintf(\"%v\", x/1000000000)\n    case 4096:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000)\n    case 8192:\n        return\
    \ fmt.Sprintf(\"%v\", x/100000000000)\n    case 16384:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000000)\n    case 32768:\n        return fmt.Sprintf(\"%v\", x/10000000000000)\n\
    \    case 65536:\n        return fmt.Sprintf(\"%v\", x/100000000000000)\n    case\
    \ 131072:\n        return fmt.Sprintf(\"%v\", x/1000000000000000)\n    case 262144:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000)\n    case 524288:\n \
    \       return fmt.Sprintf(\"%v\", x/100000000000000000)\n    case 1048576:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000)\n    case 2097152:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000000)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%v\", x/100000000000000000000)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000000)\n    case 16777216:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000000000)\n    case 33554432:\n\
    \        return fmt.Sprintf(\"%v\", x/100000000000000000000000)\n    case 67108864:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000000000)\n    case 134217728:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000000000000)\n    case 268435456:\n\
    \        return fmt.Sprintf(\"%v\", x/100000000000000000000000000)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000)\n    case\
    \ 1073741824:\n        return fmt.Sprintf(\"%v\", x/10000000000000000000000000000)\n\
    \    case 2147483648:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsqcpo9ck_test.go:72:55: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n   \
    \ if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if\
    \ x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x\
    \ == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x ==\
    \ 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0\
    \ {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n \
    \       return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n \
    \   }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n  \
    \  }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n  \
    \  x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7qqfg2qu_test.go:145:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if x < 0 {\n        x *= -1\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvsgdepzf_test.go:44: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvsgdepzf_test.go:44: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvsgdepzf_test.go:44:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvsgdepzf_test.go:44: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvsgdepzf_test.go:44: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvsgdepzf_test.go:44: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvsgdepzf_test.go:44:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpvsgdepzf_test.go:44: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvsgdepzf_test.go:44: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvsgdepzf_test.go:44: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvsgdepzf_test.go:44:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpvsgdepzf_test.go:44: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Printf(\"base must be\
    \ greater than 1\\n\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    if x == 0 {\n        return \"\"\n    }\n    if x == 1 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x -= int(x)\n    return fmt.Sprintf(\"\
    %d%s\", x, change_base(x - int(x), base))\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpf67cqrit_test.go:55: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpf67cqrit_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpf67cqrit_test.go:55:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpf67cqrit_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpf67cqrit_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpf67cqrit_test.go:55: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpf67cqrit_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpf67cqrit_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpf67cqrit_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpf67cqrit_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpf67cqrit_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpf67cqrit_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpl9vivs63_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpl9vivs63_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpl9vivs63_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    result := \"\"\n    switch\
    \ base {\n    case 2:\n        result = fmt.Sprintf(\"%d\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%o\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %x\", x)\n    case 32:\n        result = fmt.Sprintf(\"%X\", x)\n    case 64:\n\
    \        result = fmt.Sprintf(\"%llx\", x)\n    default:\n        fmt.Printf(\"\
    base must be 2, 8, 16 or 32\\n\")\n        return \"\"\n    }\n    return result\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpatx39eoq_test.go:27:18: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzvjfre12_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        fmt.Printf(\"base %d is not supported\\n\", base)\n    }\n    return\
    \ \"\"\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpt9q4035u_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   if x == 0 {\n        return \"0\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi839qols_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1.\")\n        return \"\"\n    }\n    if base > 10 {\n    \
    \    fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n    }\n\
    \    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4h8f5yby_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than or equal to 2\")\n        return \"\"\n    }\n    if base >\
    \ 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n     \
    \   return \"\"\n    }\n    if base == 2 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmphy99641h_test.go:52: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmphy99641h_test.go:52: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmphy99641h_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmphy99641h_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmphy99641h_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmphy99641h_test.go:52: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmphy99641h_test.go:52:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmphy99641h_test.go:52: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmphy99641h_test.go:52: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmphy99641h_test.go:52: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmphy99641h_test.go:52:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmphy99641h_test.go:52: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscfcbe91_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return\n    }\n    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 128:\n        return fmt.Sprintf(\"%llX\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%016x\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %016X\", x)\n    case 1024:\n        return fmt.Sprintf(\"%0128x\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%0128X\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%0256x\", x)\n    case 8192:\n        return fmt.Sprintf(\"%0256X\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%0512x\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%0512X\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %01024x\", x)\n    case 131072:\n        return fmt.Sprintf(\"%01024X\", x)\n\
    \    case 262144:\n        return fmt.Sprintf(\"%02048x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%02048X\", x)\n    case 1048576:\n        return\
    \ fmt.Sprintf(\"%04096x\", x)\n    case 2097152:\n        return fmt.Sprintf(\"\
    %04096X\", x)\n    case 4194304:\n        return fmt.Sprintf(\"%08192x\", x)\n\
    \    case 8388608:\n        return fmt.Sprintf(\"%08192X\", x)\n    case 16777216:\n\
    \        return fmt.Sprintf(\"%016384x\", x)\n    case 33554432:\n        return\
    \ fmt.Sprintf(\"%016384X\", x)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %032768x\", x)\n    case 134217728:\n        return fmt.Sprintf(\"%032768X\",\
    \ x)\n    case 268435456:\n        return fmt.Sprintf(\"%065536x\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%065536X\", x)\n    case 1073741824:\n\
    \        return fmt.Sprintf(\"%0131072x\", x)\n    case 2147483648:\n        return\
    \ fmt.Sprintf(\"%0131072X\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"\
    %0262144x\", x)\n    case \nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8omh2h83_test.go:80:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptehi9gjm_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1gdtmxdw_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp1gdtmxdw_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp1gdtmxdw_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%q\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp40h3xpz7_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp40h3xpz7_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpl9vivs63_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpl9vivs63_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpl9vivs63_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpl9vivs63_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpl9vivs63_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpl9vivs63_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Printf(\"base must be\
    \ greater than 1\\n\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    if x == 0 {\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Printf(\"\
    x must be greater than 0\\n\")\n        return \"\"\n    }\n    if base == 2 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n  \
    \  if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base\
    \ == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base\
    \ == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n\
    \        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n  \
    \  if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base\
    \ == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base\
    \ == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n\
    \        return fmt.S\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw6tqncm8_test.go:113:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return\n    }\n    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%lx\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    default:\n        fmt.Printf(\"Base must be 2, 8, 16 or 32.\\\
    n\")\n        return\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2t4ha1mw_test.go:14:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n/tmp/tmp2t4ha1mw_test.go:29:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    default:\n\
    \        fmt.Printf(\"Invalid base: %d\\n\", base)\n    }\n    return \"\"\n}\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp33dszd3o_test.go:19:10:\
    \ duplicate case 10 (constant of type int) in expression switch\n\t/tmp/tmp33dszd3o_test.go:15:10:\
    \ previous case\n/tmp/tmp33dszd3o_test.go:21:10: duplicate case 16 (constant of\
    \ type int) in expression switch\n\t/tmp/tmp33dszd3o_test.go:17:10: previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x<0 {\n        x *= -1\n        x += base\n    }\n    x /= base\n    x\
    \ %= base\n    if x<0 {\n        x *= -1\n        x += base\n    }\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp0yq_cko1_test.go:55: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp0yq_cko1_test.go:55: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp0yq_cko1_test.go:55:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp0yq_cko1_test.go:55: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp0yq_cko1_test.go:55: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp0yq_cko1_test.go:55: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp0yq_cko1_test.go:55:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp0yq_cko1_test.go:55: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp0yq_cko1_test.go:55: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp0yq_cko1_test.go:55: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp0yq_cko1_test.go:55:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp0yq_cko1_test.go:55: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 100:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 1024:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 65536:\n        return fmt.Sprintf(\"%o\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 524288:\n        return fmt.Sprintf(\"%x\", x)\n    case 1048576:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 2097152:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 4194304:\n        return fmt.Sprintf(\"%o\", x)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%o\", x)\n    case 134217728:\n    \
    \    return fmt.Sprintf(\"%x\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 1073741824:\n        return fmt.Sprintf(\"%o\", x)\n    case 2147483648:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 17179869184:\n        return fmt.Sprintf(\"%o\", x)\n    case 34359738368:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 68719476736:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 274877906944:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 549755813888:\n        return fmt.Sprintf(\"%x\", x)\n    case 1099511627776:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 2199023255552:\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    case 4398046511104:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 8796093022208:\n        return fmt.Sprintf(\"\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5824iwpa_test.go:82:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptehi9gjm_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 128:\n        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%llX\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 1024:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%lld\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 8192:\n        return fmt.Sprintf(\"%lld\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%llx\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 131072:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 262144:\n        return fmt.Sprintf(\"%llx\", x)\n    case 524288:\n       \
    \ return fmt.Sprintf(\"%lld\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 4194304:\n        return fmt.Sprintf(\"%llx\", x)\n    case 8388608:\n     \
    \   return fmt.Sprintf(\"%lld\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%llx\", x)\n    case 134217728:\n  \
    \      return fmt.Sprintf(\"%lld\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%lld\", x)\n   \
    \ case 1073741824:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 4294967296:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%llx\", x)\n \
    \   case 34359738368:\n        return fmt.Sprintf(\"%lld\", x)\n    case \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1m7uwhy7_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 64:\n        return fmt.Sprintf(\"%d\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 512:\n        return fmt.Sprintf(\"%d\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4096:\n        return fmt.Sprintf(\"%d\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 32768:\n        return fmt.Sprintf(\"%d\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 262144:\n        return fmt.Sprintf(\"%d\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%d\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%d\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%d\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%d\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 274877906944:\n        return fmt.Sprintf(\"%d\", x)\n    case 549755813888:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1099511627776:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 2199023255552:\n        return fmt.Sprintf(\"\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmpkdsa1f_test.go:92:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8eu9jzd7_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp8eu9jzd7_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp8eu9jzd7_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1gdtmxdw_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp1gdtmxdw_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1gdtmxdw_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1gdtmxdw_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1gdtmxdw_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp1gdtmxdw_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Printf(\"Base must be\
    \ greater than 1\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    default:\n\
    \        fmt.Printf(\"Base must be less than 10\\n\")\n        return \"\"\n \
    \   }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt3_obzd_test.go:18:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:20:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:22:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:24:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:26:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:28:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:30:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:32:16: undefined: strconv

    /tmp/tmplt3_obzd_test.go:34:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpggvt6813_test.go:24:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if x < base {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\", x,\
    \ change_base(base,base))\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160338\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x52036c?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.change_base(0x3?,\
    \ 0x3?)\n\t/tmp/tmp4jbqjj2c_test.go:11 +0x137 fp=0xc020160348 sp=0xc020160340\
    \ pc=0x4ef797\ncommand-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201603c8 sp=0xc020160348 pc=0x4ef6c5\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17 +0x65 fp=0xc020160448 sp=0xc0201603c8 pc=0x4ef6c5\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201604c8 sp=0xc020160448 pc=0x4ef6c5\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17 +0x65 fp=0xc020160548 sp=0xc0201604c8 pc=0x4ef6c5\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201605c8 sp=0xc020160548 pc=0x4ef6c5\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17 +0x65 fp=0xc020160648 sp=0xc0201605c8 pc=0x4ef6c5\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201606c8 sp=0xc020160648 pc=0x4ef6c5\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17 +0x65 fp=0xc020160748 sp=0xc0201606c8 pc=0x4ef6c5\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201607c8 sp=0xc020160748 pc=0x4ef6c5\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17 +0x65 fp=0xc020160848 sp=0xc0201607c8 pc=0x4ef6c5\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp4jbqjj2c_test.go:17\
    \ +0x65 fp=0xc0201608c8 sp=0xc020160848 pc=0x4ef6c5\ncom"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %a\", x)\n    case 16:\n        return fmt.Sprintf(\"%A\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%A\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 10:\n        return fmt.Sprintf(\"%c\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %C\", x)\n    case 16:\n        return fmt.Sprintf(\"%b\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%b\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %B\", x)\n    case 10:\n        return fmt.Sprintf(\"%B\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%h\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %h\", x)\n    case 16:\n        return fmt.Sprintf(\"%H\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%H\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %i\", x)\n    case 10:\n        return fmt.Sprintf(\"%i\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%I\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %I\", x)\n    case 16:\n        return fmt.Sprintf(\"%l\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%l\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %L\", x)\n    case 10:\n        return fmt.Sprintf(\"%L\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%q\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %q\", x)\n    case 16:\n        return fmt.Sprintf(\"%Q\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%Q\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %t\", x)\n    case 10:\n        return fmt.\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf47ai8zl_test.go:101:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscfcbe91_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"\
    %d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpra9azn2x_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpra9azn2x_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpra9azn2x_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpra9azn2x_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpra9azn2x_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpra9azn2x_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpra9azn2x_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpra9azn2x_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpra9azn2x_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpra9azn2x_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpra9azn2x_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpra9azn2x_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%q\", x)\n    case 100:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 1024:\n        return fmt.Sprintf(\"\
    %w\", x)\n    case 2048:\n        return fmt.Sprintf(\"%c\", x)\n    case 4096:\n\
    \        return fmt.Sprintf(\"%b\", x)\n    case 8192:\n        return fmt.Sprintf(\"\
    %h\", x)\n    case 16384:\n        return fmt.Sprintf(\"%t\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%n\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 131072:\n        return fmt.Sprintf(\"%u\", x)\n    case 262144:\n\
    \        return fmt.Sprintf(\"%t\", x)\n    case 524288:\n        return fmt.Sprintf(\"\
    %p\", x)\n    case 1048576:\n        return fmt.Sprintf(\"%q\", x)\n    case 2097152:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%e\", x)\n    case 16777216:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 33554432:\n        return fmt.Sprintf(\"\
    %T\", x)\n    case 67108864:\n        return fmt.Sprintf(\"%G\", x)\n    case\
    \ 134217728:\n        return fmt.Sprintf(\"%f\", x)\n    case 268435456:\n   \
    \     return fmt.Sprintf(\"%e\", x)\n    case 536870912:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 1073741824:\n        return fmt.Sprintf(\"%T\", x)\n    case\
    \ 2147483648:\n        return fmt.Sprintf(\"%p\", x)\n    case 4294967296:\n \
    \       return fmt.Sprintf(\"%q\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%w\", x)\n    case\
    \ 34359738368:\n        return fmt.Sprintf(\"%c\", x)\n    case 68719476736:\n\
    \        return fmt.Sprintf(\"%b\", x)\n    case 137438953472:\n        return\
    \ fmt.Sprintf(\"%h\", x)\n    case 274877906944:\n        return fmt.Sprintf(\"\
    %t\", x)\n    case \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpazy3ile9_test.go:84:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than or equal to 2\")\n        return \"\"\n    }\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjd0lq6fy_test.go:18:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:20:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:22:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:24:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:26:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:28:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:30:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:32:16: undefined: strconv

    /tmp/tmpjd0lq6fy_test.go:34:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 128:\n        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%llX\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 1024:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%lld\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 8192:\n        return fmt.Sprintf(\"%lld\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%llx\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 131072:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 262144:\n        return fmt.Sprintf(\"%lld\", x)\n    case 524288:\n       \
    \ return fmt.Sprintf(\"%lld\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 4194304:\n        return fmt.Sprintf(\"%lld\", x)\n    case 8388608:\n     \
    \   return fmt.Sprintf(\"%lld\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%lld\", x)\n    case 134217728:\n  \
    \      return fmt.Sprintf(\"%lld\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%lld\", x)\n   \
    \ case 1073741824:\n        return fmt.Sprintf(\"%lld\", x)\n    case 2147483648:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 4294967296:\n        return\
    \ fmt.Sprintf(\"%lld\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%lld\", x)\n \
    \   case 34359738368:\n        return fmt.Sprintf(\"%lld\", x)\n    case \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5wlwlx5d_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16:\n        return fmt.Sprintf(\"%d\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppcw9iqqi_test.go:114:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqms80iji_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_mw7w1ul_test.go:14:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6dynzlix_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 100:\n        return fmt.Sprintf(\"%0*d\", base, x)\n   \
    \ case 1024:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 2048:\n\
    \        return fmt.Sprintf(\"%0*d\", base, x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 8192:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 16384:\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    case 32768:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 65536:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 131072:\n  \
    \      return fmt.Sprintf(\"%0*d\", base, x)\n    case 262144:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 524288:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 1048576:\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    case 2097152:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 4194304:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%0*d\", base, x)\n    case 16777216:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 33554432:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 67108864:\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    case 134217728:\n        return fmt.Sprintf(\"%0*d\", base, x)\n   \
    \ case 268435456:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%0*d\", base, x)\n    case 1073741824:\n       \
    \ return fmt.Sprintf(\"%0*d\", base, x)\n    case 2147483648:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 4294967296:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 8589934592:\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    case 17179869184:\n        return fmt.Sprintf(\"%\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprer6iay3_test.go:78:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 64:\n        return fmt.Sprintf(\"%v\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 512:\n        return fmt.Sprintf(\"%v\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4096:\n        return fmt.Sprintf(\"%v\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 32768:\n        return fmt.Sprintf(\"%v\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 262144:\n        return fmt.Sprintf(\"%v\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%v\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%v\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%v\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%v\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%v\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%v\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 13\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44k1ja_a_test.go:83:12: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%v\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %v\", x/10)\n    case 16:\n        return fmt.Sprintf(\"%v\", x/100)\n    case\
    \ 32:\n        return fmt.Sprintf(\"%v\", x/1000)\n    case 64:\n        return\
    \ fmt.Sprintf(\"%v\", x/1000000)\n    case 128:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000)\n    case 256:\n        return fmt.Sprintf(\"%v\", x/1000000000000)\n\
    \    case 512:\n        return fmt.Sprintf(\"%v\", x/1000000000000000)\n    case\
    \ 1024:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000)\n    case 2048:\n\
    \        return fmt.Sprintf(\"%v\", x/100000000000000000000)\n    case 4096:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000000000)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000000000)\n    case 16384:\n\
    \        return fmt.Sprintf(\"%v\", x/100000000000000000000000000)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000000000000000000)\n    case\
    \ 65536:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000)\n\
    \    case 131072:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 262144:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\
    \ \n    case 524288:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\n\
    \    case 1048576:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 2097152:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\n\
    \    case 4194304:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 8388608:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\n\
    \    case 16777216:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 33554432:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\n\
    \    case 67108864:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 134217728:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000)\n\
    \    case 268435456:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000)\n\
    \    case 536870912:\n        return fmt.Sprintf(\"%v\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr81r7l26_test.go:72:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if x < 0 {\n        fmt.Println(\"Negative number\"\
    )\n    }\n    if base < 10 {\n        fmt.Println(\"Base number must be less than\
    \ 10\")\n    }\n    if base > 36 {\n        fmt.Println(\"Base number must be\
    \ less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"Base number\
    \ must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base number must be less than 36\")\n    }\n    if base < 2 {\n        fmt.Println(\"\
    Base number must be greater than 2\")\n    }\n    if base > 36 {\n        fmt.Println(\"\
    Base \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeok47pek_test.go:97:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjcbxe76u_test.go:19:10:\
    \ duplicate case 10 (constant of type int) in expression switch\n\t/tmp/tmpjcbxe76u_test.go:15:10:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%v\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16:\n        return fmt.Sprintf(\"%v\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 128:\n        return fmt.Sprintf(\"%v\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 1024:\n        return fmt.Sprintf(\"%v\", x)\n    case 2048:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 4096:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8192:\n        return fmt.Sprintf(\"%v\", x)\n    case 16384:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 32768:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 65536:\n        return fmt.Sprintf(\"%v\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 524288:\n        return fmt.Sprintf(\"%v\", x)\n    case 1048576:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 2097152:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 4194304:\n        return fmt.Sprintf(\"%v\", x)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%v\", x)\n    case 134217728:\n    \
    \    return fmt.Sprintf(\"%v\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 1073741824:\n        return fmt.Sprintf(\"%v\", x)\n    case 2147483648:\n \
    \       return fmt.Sprintf(\"%v\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 17179869184:\n        return fmt.Sprintf(\"%v\", x)\n    case 34359738368:\n\
    \        return fmt.Sprintf(\"%v\", x)\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo5h424n6_test.go:85:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqms80iji_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 128:\n        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%llX\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 1024:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%lld\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 8192:\n        return fmt.Sprintf(\"%lld\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%llx\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 131072:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 262144:\n        return fmt.Sprintf(\"%llx\", x)\n    case 524288:\n       \
    \ return fmt.Sprintf(\"%lld\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 4194304:\n        return fmt.Sprintf(\"%llx\", x)\n    case 8388608:\n     \
    \   return fmt.Sprintf(\"%lld\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%llx\", x)\n    case 134217728:\n  \
    \      return fmt.Sprintf(\"%lld\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%lld\", x)\n   \
    \ case 1073741824:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 4294967296:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%llx\", x)\n \
    \   case 34359738368:\n        return fmt.Sprintf(\"%lld\", x)\n    case \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4_tmpvov_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7lruo64f_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        if x < 2 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 2, base)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 10, base)\n    case 16:\n\
    \        if x < 16 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return change_base(x / 16, base)\n    case 20:\n        if x < 20 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 20, base)\n    case 32:\n        if x < 32 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 32, base)\n    case 64:\n\
    \        if x < 64 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return change_base(x / 64, base)\n    case 128:\n        if x < 128 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 128, base)\n    case 256:\n        if x < 256 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 256, base)\n    case 512:\n\
    \        if x < 512 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return change_base(x / 512, base)\n    case 1024:\n        if x < 1024\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 1024, base)\n    case 2048:\n        if x < 2048 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 2048, base)\n    case 4096:\n\
    \        if x < 4096 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return change_base(x / 4096, base)\n    case 8192:\n        if x < 8192\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 8192, base)\n    case 16384:\n        if x < 16384 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 16384, base)\n    case 32768:\n\
    \        if x < 32768 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return change_base(x / 32768, base)\n    case 65536:\n        if x <\
    \ 65536 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ change_base(x / 65536, base)\n    case 131072:\n        if x < 131072 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x\
    \ / 131072, base)\n    case 262144:\n        if x < 262144 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return change_base(x / 262144, base)\n\
    \    case 524288:\n        if x < 524288 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return change_base(x / 524288, base)\n    case 1048576:\n\
    \        if x < 10\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpowahawv7_test.go:110:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 8:\n        return strconv.FormatInt(x,\
    \ 8)\n    case 16:\n        return strconv.FormatInt(x, 16)\n    case 32:\n  \
    \      return strconv.FormatInt(x, 32)\n    case 64:\n        return strconv.FormatInt(x,\
    \ 64)\n    case 100:\n        return strconv.FormatInt(x, 100)\n    case 1024:\n\
    \        return strconv.FormatInt(x, 1024)\n    case 2048:\n        return strconv.FormatInt(x,\
    \ 2048)\n    case 4096:\n        return strconv.FormatInt(x, 4096)\n    case 8192:\n\
    \        return strconv.FormatInt(x, 8192)\n    case 16384:\n        return strconv.FormatInt(x,\
    \ 16384)\n    case 32768:\n        return strconv.FormatInt(x, 32768)\n    case\
    \ 65536:\n        return strconv.FormatInt(x, 65536)\n    case 131072:\n     \
    \   return strconv.FormatInt(x, 131072)\n    case 262144:\n        return strconv.FormatInt(x,\
    \ 262144)\n    case 524288:\n        return strconv.FormatInt(x, 524288)\n   \
    \ case 1048576:\n        return strconv.FormatInt(x, 1048576)\n    case 2097152:\n\
    \        return strconv.FormatInt(x, 2097152)\n    case 4194304:\n        return\
    \ strconv.FormatInt(x, 4194304)\n    case 8388608:\n        return strconv.FormatInt(x,\
    \ 8388608)\n    case 16777216:\n        return strconv.FormatInt(x, 16777216)\n\
    \    case 33554432:\n        return strconv.FormatInt(x, 33554432)\n    case 67108864:\n\
    \        return strconv.FormatInt(x, 67108864)\n    case 134217728:\n        return\
    \ strconv.FormatInt(x, 134217728)\n    case 268435456:\n        return strconv.FormatInt(x,\
    \ 268435456)\n    case 536870912:\n        return strconv.FormatInt(x, 536870912)\n\
    \    case 1073741824:\n        return strconv.FormatInt(x, 1073741824)\n    case\
    \ 2147483648:\n        return strconv.FormatInt(x, 2147483648)\n    case 4294967296:\n\
    \        return strconv.FormatInt(x, 4294967296)\n    case 8589934592:\n     \
    \   return strconv.FormatInt(x, 8589934592)\n    case 17179869184:\n        return\
    \ strconv.FormatInt(x, 17179869184)\n    case 34359738368:\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6fin__k_test.go:80:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpomnuivrl_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpomnuivrl_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpomnuivrl_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpomnuivrl_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpomnuivrl_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpomnuivrl_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%q\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp40h3xpz7_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp40h3xpz7_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 512:\n        return fmt.Sprintf(\"%x\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4096:\n        return fmt.Sprintf(\"%x\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 32768:\n        return fmt.Sprintf(\"%x\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 262144:\n        return fmt.Sprintf(\"%x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%x\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%X\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%o\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%X\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%o\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%x\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%x\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk5yoqsq1_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    return fmt.Sprintf(\"%d%v\", x, base)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3tmblik1_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3tmblik1_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3tmblik1_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3tmblik1_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3tmblik1_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3tmblik1_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp3tmblik1_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp3tmblik1_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp3tmblik1_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp3tmblik1_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp3tmblik1_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp3tmblik1_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscfcbe91_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpebozczmt_test.go:14:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    if x < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d%s\", x,\
    \ change_base(base,10))\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpk2d67jua_test.go:44: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpk2d67jua_test.go:44: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpk2d67jua_test.go:44:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpk2d67jua_test.go:44: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpk2d67jua_test.go:44: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpk2d67jua_test.go:44: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpk2d67jua_test.go:44:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpk2d67jua_test.go:44: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpk2d67jua_test.go:44: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpk2d67jua_test.go:44: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpk2d67jua_test.go:44:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpk2d67jua_test.go:44: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp05wqb1cu_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp05wqb1cu_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp05wqb1cu_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 64:\n        return fmt.Sprintf(\"%d\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 512:\n        return fmt.Sprintf(\"%d\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4096:\n        return fmt.Sprintf(\"%d\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 32768:\n        return fmt.Sprintf(\"%d\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 262144:\n        return fmt.Sprintf(\"%d\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%d\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%d\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%d\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%d\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 274877906944:\n        return fmt.Sprintf(\"%d\", x)\n    case 549755813888:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1099511627776:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 2199023255552:\n        return fmt.Sprintf(\"\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpda8__73m_test.go:92:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpruwtuj_l_test.go:116:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph1oxp9yh_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfk3d0to7_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpd80y7_0d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpd80y7_0d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpd80y7_0d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpd80y7_0d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpd80y7_0d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpd80y7_0d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpd80y7_0d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpd80y7_0d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpd80y7_0d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpd80y7_0d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpd80y7_0d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpd80y7_0d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %a\", x)\n    case 16:\n        return fmt.Sprintf(\"%A\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%A\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 10:\n        return fmt.Sprintf(\"%c\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %C\", x)\n    case 16:\n        return fmt.Sprintf(\"%e\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 10:\n        return fmt.Sprintf(\"%X\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%e\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %f\", x)\n    case 10:\n        return fmt.Sprintf(\"%f\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 16:\n        return fmt.Sprintf(\"%a\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %A\", x)\n    case 10:\n        return fmt.Sprintf(\"\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpftvi92vh_test.go:100:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n \
    \   if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpt4wdavxk_test.go:52: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpt4wdavxk_test.go:52: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpt4wdavxk_test.go:52:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpt4wdavxk_test.go:52: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpt4wdavxk_test.go:52: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpt4wdavxk_test.go:52: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpt4wdavxk_test.go:52:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpt4wdavxk_test.go:52: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpt4wdavxk_test.go:52: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpt4wdavxk_test.go:52: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpt4wdavxk_test.go:52:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpt4wdavxk_test.go:52: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base is less\
    \ than 10\")\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplqotfw0d_test.go:114:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"\
    %d%s\", x, change_base(x / base, base))\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpox07lbqp_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpox07lbqp_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpox07lbqp_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpox07lbqp_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpox07lbqp_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpox07lbqp_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpox07lbqp_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpox07lbqp_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpox07lbqp_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpox07lbqp_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpox07lbqp_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpox07lbqp_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%q\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp40h3xpz7_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp40h3xpz7_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp40h3xpz7_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp40h3xpz7_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmptkopgacn_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmptkopgacn_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmptkopgacn_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmptkopgacn_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmptkopgacn_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmptkopgacn_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmptkopgacn_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmptkopgacn_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmptkopgacn_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmptkopgacn_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmptkopgacn_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmptkopgacn_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp05wqb1cu_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp05wqb1cu_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp05wqb1cu_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    result := \"\"\n    if\
    \ x%base == 0 {\n        result = fmt.Sprintf(\"%d\", x/base)\n    } else {\n\
    \        result = fmt.Sprintf(\"%d%+d\", x/base, base-x%base)\n    }\n    return\
    \ result\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpemb3y27s_test.go:49: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpemb3y27s_test.go:49: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpemb3y27s_test.go:49:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpemb3y27s_test.go:49: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpemb3y27s_test.go:49: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpemb3y27s_test.go:49: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpemb3y27s_test.go:49:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpemb3y27s_test.go:49: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpemb3y27s_test.go:49: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpemb3y27s_test.go:49: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpemb3y27s_test.go:49:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpemb3y27s_test.go:49: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzvjfre12_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp05wqb1cu_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp05wqb1cu_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp05wqb1cu_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp05wqb1cu_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp05wqb1cu_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp05wqb1cu_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqms80iji_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base == 10 {\n    \
    \    return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d%s\", x, change_base(base,base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x52036c?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.change_base(0x3?,\
    \ 0x3?)\n\t/tmp/tmp9_lkxit0_test.go:11 +0x17b fp=0xc0201603a8 sp=0xc0201603a0\
    \ pc=0x4ef7db\ncommand-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc020160438 sp=0xc0201603a8 pc=0x4ef6fb\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21 +0x9b fp=0xc0201604c8 sp=0xc020160438 pc=0x4ef6fb\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc020160558 sp=0xc0201604c8 pc=0x4ef6fb\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21 +0x9b fp=0xc0201605e8 sp=0xc020160558 pc=0x4ef6fb\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc020160678 sp=0xc0201605e8 pc=0x4ef6fb\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21 +0x9b fp=0xc020160708 sp=0xc020160678 pc=0x4ef6fb\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc020160798 sp=0xc020160708 pc=0x4ef6fb\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21 +0x9b fp=0xc020160828 sp=0xc020160798 pc=0x4ef6fb\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc0201608b8 sp=0xc020160828 pc=0x4ef6fb\ncommand-line-arguments_test.change_base(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21 +0x9b fp=0xc020160948 sp=0xc0201608b8 pc=0x4ef6fb\n\
    command-line-arguments_test.change_base(0x0?, 0x0?)\n\t/tmp/tmp9_lkxit0_test.go:21\
    \ +0x9b fp=0xc0201609d8 sp=0xc020160948 pc=0x4ef6fb\ncom"
  timestamp: 1660074742
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %a\", x)\n    case 16:\n        return fmt.Sprintf(\"%A\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%A\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 10:\n        return fmt.Sprintf(\"%c\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %C\", x)\n    case 16:\n        return fmt.Sprintf(\"%g\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %G\", x)\n    case 10:\n        return fmt.Sprintf(\"%G\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%e\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %f\", x)\n    case 10:\n        return fmt.Sprintf(\"%f\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 16:\n        return fmt.Sprintf(\"%a\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %A\", x)\n    case 10:\n        return fmt.Sprintf(\"%A\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%c\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 16:\n        return fmt.Sprintf(\"%C\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpai9zqqn8_test.go:101:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10)\n    case 2:\n        if x < 10 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 16:\n\
    \        if x < 10 {\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfizlgd4p_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 512:\n        return fmt.Sprintf(\"%o\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4096:\n        return fmt.Sprintf(\"%x\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 32768:\n        return fmt.Sprintf(\"%o\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 262144:\n        return fmt.Sprintf(\"%x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%o\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%o\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%x\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%o\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%x\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%o\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 274877906944\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuc8e_hb1_test.go:85:22: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"\
    %d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpsqq90swh_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpsqq90swh_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpsqq90swh_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsy73clmc_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n    }\n    switch base {\n    case 2:\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    case 8:\n        return fmt.Sprintf(\"%v\", x/10)\n\
    \    case 16:\n        return fmt.Sprintf(\"%v\", x/100)\n    case 32:\n     \
    \   return fmt.Sprintf(\"%v\", x/1000)\n    case 64:\n        return fmt.Sprintf(\"\
    %v\", x/10000)\n    case 128:\n        return fmt.Sprintf(\"%v\", x/100000)\n\
    \    case 256:\n        return fmt.Sprintf(\"%v\", x/1000000)\n    case 512:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000)\n    case 1024:\n        return\
    \ fmt.Sprintf(\"%v\", x/100000000)\n    case 2048:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000)\n    case 4096:\n        return fmt.Sprintf(\"%v\", x/10000000000)\n\
    \    case 8192:\n        return fmt.Sprintf(\"%v\", x/100000000000)\n    case\
    \ 16384:\n        return fmt.Sprintf(\"%v\", x/1000000000000)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%v\", x/10000000000000)\n    case 65536:\n     \
    \   return fmt.Sprintf(\"%v\", x/100000000000000)\n    case 131072:\n        return\
    \ fmt.Sprintf(\"%v\", x/1000000000000000)\n    case 262144:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000)\n    case 524288:\n        return fmt.Sprintf(\"%v\"\
    , x/100000000000000000)\n    case 1048576:\n        return fmt.Sprintf(\"%v\"\
    , x/1000000000000000000)\n    case 2097152:\n        return fmt.Sprintf(\"%v\"\
    , x/10000000000000000000)\n    case 4194304:\n        return fmt.Sprintf(\"%v\"\
    , x/100000000000000000000)\n    case 8388608:\n        return fmt.Sprintf(\"%v\"\
    , x/1000000000000000000000)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000000000)\n    case 33554432:\n        return fmt.Sprintf(\"\
    %v\", x/100000000000000000000000)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000000000000000000)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000000000000)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %v\", x/100000000000000000000000000)\n    case 536870912:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000000000000000000000)\n    case 1073741824:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000000000000000)\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn6r3fk6l_test.go:74:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"Base must\
    \ be less than 10.\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%v\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %v\", x%10)\n    case 16:\n        return fmt.Sprintf(\"%v\", x%100)\n    case\
    \ 32:\n        return fmt.Sprintf(\"%v\", x%1000)\n    case 64:\n        return\
    \ fmt.Sprintf(\"%v\", x%10000)\n    case 128:\n        return fmt.Sprintf(\"%v\"\
    , x%100000)\n    case 256:\n        return fmt.Sprintf(\"%v\", x%1000000)\n  \
    \  case 512:\n        return fmt.Sprintf(\"%v\", x%10000000)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%v\", x%100000000)\n    case 2048:\n        return\
    \ fmt.Sprintf(\"%v\", x%1000000000)\n    case 4096:\n        return fmt.Sprintf(\"\
    %v\", x%10000000000)\n    case 8192:\n        return fmt.Sprintf(\"%v\", x%100000000000)\n\
    \    case 16384:\n        return fmt.Sprintf(\"%v\", x%1000000000000)\n    case\
    \ 32768:\n        return fmt.Sprintf(\"%v\", x%10000000000000)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%v\", x%100000000000000)\n    case 131072:\n   \
    \     return fmt.Sprintf(\"%v\", x%1000000000000000)\n    case 262144:\n     \
    \   return fmt.Sprintf(\"%v\", x%10000000000000000)\n    case 524288:\n      \
    \  return fmt.Sprintf(\"%v\", x%100000000000000000)\n    case 1048576:\n     \
    \   return fmt.Sprintf(\"%v\", x%1000000000000000000)\n    case 2097152:\n   \
    \     return fmt.Sprintf(\"%v\", x%10000000000000000000)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%v\", x%100000000000000000000)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%v\", x%1000000000000000000000)\n    case 16777216:\n\
    \        return fmt.Sprintf(\"%v\", x%10000000000000000000000)\n    case 33554432:\n\
    \        return fmt.Sprintf(\"%v\", x%100000000000000000000000)\n    case 67108864:\n\
    \        return fmt.Sprintf(\"%v\", x%1000000000000000000000000)\n    case 134217728:\n\
    \        return fmt.Sprintf(\"%v\", x%10000000000000000000000000)\n    case 268435456:\n\
    \        return fmt.Sprintf(\"%v\", x%100000000000000000000000000)\n    case 536870912:\n\
    \        return fmt.S\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp10gu7lim_test.go:73:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8eu9jzd7_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp8eu9jzd7_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp8eu9jzd7_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 512:\n        return fmt.Sprintf(\"%llx\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4096:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 8192:\n        return fmt.Sprintf(\"%llx\", x)\n    case 16384:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 32768:\n        return fmt.Sprintf(\"%llx\"\
    , x)\n    case 65536:\n        return fmt.Sprintf(\"%llx\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 524288:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 1048576:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2097152:\n     \
    \   return fmt.Sprintf(\"%llx\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 16777216:\n        return fmt.Sprintf(\"%llx\", x)\n    case 33554432:\n   \
    \     return fmt.Sprintf(\"%llx\", x)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 134217728:\n        return fmt.Sprintf(\"%llx\", x)\n   \
    \ case 268435456:\n        return fmt.Sprintf(\"%llx\", x)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 1073741824:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%llx\", x)\n  \
    \  case 8589934592:\n        return fmt.Sprintf(\"%llx\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 137438953472:\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzq4hz427_test.go:85:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 64:\n        return fmt.Sprintf(\"%d\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 512:\n        return fmt.Sprintf(\"%d\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4096:\n        return fmt.Sprintf(\"%d\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 32768:\n        return fmt.Sprintf(\"%d\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 262144:\n        return fmt.Sprintf(\"%d\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%d\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%d\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%d\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%d\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 274877906944:\n        return fmt.Sprintf(\"%d\", x)\n    case 549755813888:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1099511627776:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 2199023255552:\n        return fmt.Sprintf(\"\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmpkdsa1f_test.go:92:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llX\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %016x\", x)\n    case 512:\n        return fmt.Sprintf(\"%016X\", x)\n    case\
    \ 1024:\n        return fmt.Sprintf(\"%0128x\", x)\n    case 2048:\n        return\
    \ fmt.Sprintf(\"%0128X\", x)\n    case 4096:\n        return fmt.Sprintf(\"%0512x\"\
    , x)\n    case 8192:\n        return fmt.Sprintf(\"%0512X\", x)\n    case 16384:\n\
    \        return fmt.Sprintf(\"%01024x\", x)\n    case 32768:\n        return fmt.Sprintf(\"\
    %01024X\", x)\n    case 65536:\n        return fmt.Sprintf(\"%02048x\", x)\n \
    \   case 131072:\n        return fmt.Sprintf(\"%02048X\", x)\n    case 262144:\n\
    \        return fmt.Sprintf(\"%04096x\", x)\n    case 524288:\n        return\
    \ fmt.Sprintf(\"%04096X\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %08192x\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%08192X\", x)\n\
    \    case 4194304:\n        return fmt.Sprintf(\"%016384x\", x)\n    case 8388608:\n\
    \        return fmt.Sprintf(\"%016384X\", x)\n    case 16777216:\n        return\
    \ fmt.Sprintf(\"%04294967296x\", x)\n    case 33554432:\n        return fmt.Sprintf(\"\
    %04294967296X\", x)\n    case 67108864:\n        return fmt.Sprintf(\"%0568435456x\"\
    , x)\n    case 134217728:\n        return fmt.Sprintf(\"%0568435456X\", x)\n \
    \   case 268435456:\n        return fmt.Sprintf(\"%0644294967296x\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%0644294967296X\", x)\n    case 1073741824:\n\
    \        return fmt.Sprintf(\"%0805306368x\", x)\n    case 2147483648:\n     \
    \   return fmt.Sprintf(\"%0805306368X\", x)\n    case 4294967296:\n        return\
    \ fmt.Sprintf(\"%087777777776x\", x)\n    case 8589934\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5fm1dt7o_test.go:75:17: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpo3sbhzew_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpo3sbhzew_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpo3sbhzew_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpo3sbhzew_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpo3sbhzew_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpo3sbhzew_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpo3sbhzew_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpo3sbhzew_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpo3sbhzew_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpo3sbhzew_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpo3sbhzew_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpo3sbhzew_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %q\", x)\n    case 128:\n        return fmt.Sprintf(\"%v\", x)\n    default:\n\
    \        fmt.Printf(\"base %d is not supported\\n\", base)\n        return \"\"\
    \n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzqkzkoec_test.go:59: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzqkzkoec_test.go:59: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzqkzkoec_test.go:59:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzqkzkoec_test.go:59: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzqkzkoec_test.go:59: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzqkzkoec_test.go:59: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzqkzkoec_test.go:59:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpzqkzkoec_test.go:59: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzqkzkoec_test.go:59: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzqkzkoec_test.go:59: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzqkzkoec_test.go:59:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpzqkzkoec_test.go:59: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n     \
    \   fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfk3d0to7_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074739
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    result := \"\"\n    if x < 0 {\n        x *= -1\n\
    \    }\n    if base < 10 {\n        result += \"0\"\n    }\n    for i := 0; i\
    \ < base; i++ {\n        result += \"0123456789\"[x % base]\n        x /= base\n\
    \    }\n    return result\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zn6bgyu_test.go:20:9: invalid operation: result += "0123456789"[x % base]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 512:\n        return fmt.Sprintf(\"%x\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 4096:\n        return fmt.Sprintf(\"%x\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 32768:\n        return fmt.Sprintf(\"%x\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 262144:\n        return fmt.Sprintf(\"%x\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%x\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%x\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%X\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%x\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%X\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%o\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%X\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%o\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%o\", x)\n    case\
    \ 274\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3s9xvzu_test.go:85:13: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7pda17y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"\
    %d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpsqq90swh_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpsqq90swh_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpsqq90swh_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    result := \"\"\n    switch\
    \ base {\n    case 2:\n        result = fmt.Sprintf(\"%d\", x)\n    case 8:\n\
    \        result = fmt.Sprintf(\"%o\", x)\n    case 16:\n        result = fmt.Sprintf(\"\
    %x\", x)\n    case 32:\n        result = fmt.Sprintf(\"%X\", x)\n    case 64:\n\
    \        result = fmt.Sprintf(\"%llx\", x)\n    case 128:\n        result = fmt.Sprintf(\"\
    %llX\", x)\n    case 256:\n        result = fmt.Sprintf(\"%0128x\", x)\n    case\
    \ 512:\n        result = fmt.Sprintf(\"%0128X\", x)\n    case 1024:\n        result\
    \ = fmt.Sprintf(\"%0256x\", x)\n    case 2048:\n        result = fmt.Sprintf(\"\
    %0256X\", x)\n    case 4096:\n        result = fmt.Sprintf(\"%0512x\", x)\n  \
    \  case 8192:\n        result = fmt.Sprintf(\"%0512X\", x)\n    case 16384:\n\
    \        result = fmt.Sprintf(\"%06256x\", x)\n    case 32768:\n        result\
    \ = fmt.Sprintf(\"%06256X\", x)\n    case 65536:\n        result = fmt.Sprintf(\"\
    %064512x\", x)\n    case 131072:\n        result = fmt.Sprintf(\"%064512X\", x)\n\
    \    case 262144:\n        result = fmt.Sprintf(\"%07483648\", x)\n    case 524288:\n\
    \        result = fmt.Sprintf(\"%07483648\", x)\n    case 1048576:\n        result\
    \ = fmt.Sprintf(\"%087437184\", x)\n    case 2097152:\n        result = fmt.Sprintf(\"\
    %087437184\", x)\n    case 4194304:\n        result = fmt.Sprintf(\"%0924262144\"\
    , x)\n    case 8388608:\n        result = fmt.Sprintf(\"%0924262144\", x)\n  \
    \  case 16777216:\n        result = fmt.Sprintf(\"%10485760\", x)\n    case 33554432:\n\
    \        result = fmt.Sprintf(\"%10485760\", x)\n    case 67108864:\n        result\
    \ = fmt.Sprintf(\"%11141152\", x)\n    case 134217728:\n        result = fmt.Sprintf(\"\
    %11141152\", x)\n    case 268435456:\n        result = fmt.Sprintf(\"%1267740\"\
    , x)\n    case 536870912:\n        result = fmt.Sprintf(\"%1267740\", x)\n   \
    \ case 1073741824:\n        result = fmt.Sprintf(\"%134217728\", x)\n    case\
    \ 2147483648:\n        result = fmt.Sprintf(\"%134217728\", x)\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcyxd3rol_test.go:78:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv5uk6bn5_test.go:52:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv5uk6bn5_test.go:52: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv5uk6bn5_test.go:52: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv5uk6bn5_test.go:52: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpimi2_17b_test.go:19:10:\
    \ duplicate case 10 (constant of type int) in expression switch\n\t/tmp/tmpimi2_17b_test.go:15:10:\
    \ previous case\n/tmp/tmpimi2_17b_test.go:21:10: duplicate case 16 (constant of\
    \ type int) in expression switch\n\t/tmp/tmpimi2_17b_test.go:17:10: previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"base must\
    \ be less than 10\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 32:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 64:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 128:\n        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n\
    \        return fmt.Sprintf(\"%llX\", x)\n    case 512:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 1024:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 2048:\n        return fmt.Sprintf(\"%lld\", x)\n    case 4096:\n        return\
    \ fmt.Sprintf(\"%lld\", x)\n    case 8192:\n        return fmt.Sprintf(\"%lld\"\
    , x)\n    case 16384:\n        return fmt.Sprintf(\"%lld\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 131072:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 262144:\n        return fmt.Sprintf(\"%lld\", x)\n    case 524288:\n       \
    \ return fmt.Sprintf(\"%lld\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 4194304:\n        return fmt.Sprintf(\"%lld\", x)\n    case 8388608:\n     \
    \   return fmt.Sprintf(\"%lld\", x)\n    case 16777216:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 33554432:\n        return fmt.Sprintf(\"%lld\", x)\n    case\
    \ 67108864:\n        return fmt.Sprintf(\"%lld\", x)\n    case 134217728:\n  \
    \      return fmt.Sprintf(\"%lld\", x)\n    case 268435456:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 536870912:\n        return fmt.Sprintf(\"%lld\", x)\n   \
    \ case 1073741824:\n        return fmt.Sprintf(\"%lld\", x)\n    case 2147483648:\n\
    \        return fmt.Sprintf(\"%lld\", x)\n    case 4294967296:\n        return\
    \ fmt.Sprintf(\"%lld\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %lld\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%lld\", x)\n \
    \   case 34359738368:\n        return fmt.Sprintf(\"%lld\", x)\n    case \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb2ivzz70_test.go:86:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 10:\n        return fmt.Sprintf(\"%v\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 20:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 32:\n        return fmt.Sprintf(\"%v\", x)\n    case 64:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 128:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 256:\n        return fmt.Sprintf(\"%v\", x)\n    case 512:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 1024:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 2048:\n        return fmt.Sprintf(\"%v\", x)\n    case 4096:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 8192:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 16384:\n        return fmt.Sprintf(\"%v\", x)\n    case 32768:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 65536:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 131072:\n        return fmt.Sprintf(\"%v\", x)\n    case 262144:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 524288:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 1048576:\n        return fmt.Sprintf(\"%v\", x)\n    case 2097152:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%v\", x)\n    case 16777216:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 33554432:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 67108864:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 134217728:\n        return fmt.Sprintf(\"%v\", x)\n    case 268435456:\n   \
    \     return fmt.Sprintf(\"%v\", x)\n    case 536870912:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 1073741824:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 2147483648:\n        return fmt.Sprintf(\"%v\", x)\n    case 4294967296:\n \
    \       return fmt.Sprintf(\"%v\", x)\n    case 8589934592:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 17179869184:\n        return fmt.Sprintf(\"%v\", x)\n    case\
    \ 34359738368:\n        return fmt.Sprintf(\"%v\", x)\n    case 68719476736:\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7rxt_in6_test.go:84:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 512:\n        return fmt.Sprintf(\"%llx\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4096:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 8192:\n        return fmt.Sprintf(\"%llx\", x)\n    case 16384:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 32768:\n        return fmt.Sprintf(\"%llx\"\
    , x)\n    case 65536:\n        return fmt.Sprintf(\"%llx\", x)\n    case 131072:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 262144:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 524288:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 1048576:\n        return fmt.Sprintf(\"%llx\", x)\n    case 2097152:\n     \
    \   return fmt.Sprintf(\"%llx\", x)\n    case 4194304:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 8388608:\n        return fmt.Sprintf(\"%llx\", x)\n    case\
    \ 16777216:\n        return fmt.Sprintf(\"%llx\", x)\n    case 33554432:\n   \
    \     return fmt.Sprintf(\"%llx\", x)\n    case 67108864:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 134217728:\n        return fmt.Sprintf(\"%llx\", x)\n   \
    \ case 268435456:\n        return fmt.Sprintf(\"%llx\", x)\n    case 536870912:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 1073741824:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%llx\", x)\n  \
    \  case 8589934592:\n        return fmt.Sprintf(\"%llx\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%llx\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %llx\", x)\n    case 137438953472:\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzq4hz427_test.go:85:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8eu9jzd7_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp8eu9jzd7_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8eu9jzd7_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8eu9jzd7_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8eu9jzd7_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp8eu9jzd7_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"\
    %d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpsqq90swh_test.go:48: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpsqq90swh_test.go:48: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpsqq90swh_test.go:48: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpsqq90swh_test.go:48: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpsqq90swh_test.go:48:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpsqq90swh_test.go:48: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 64:\n        return fmt.Sprintf(\"%d\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 512:\n        return fmt.Sprintf(\"%d\", x)\n    case 1024:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2048:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4096:\n        return fmt.Sprintf(\"%d\", x)\n    case 8192:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 16384:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 32768:\n        return fmt.Sprintf(\"%d\", x)\n    case 65536:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 131072:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 262144:\n        return fmt.Sprintf(\"%d\", x)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1048576:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 2097152:\n        return fmt.Sprintf(\"%d\", x)\n    case 4194304:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 8388608:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 16777216:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 33554432:\n        return fmt.Sprintf(\"%d\", x)\n    case 67108864:\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    case 134217728:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 268435456:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 536870912:\n        return fmt.Sprintf(\"%d\", x)\n    case 1073741824:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    case 2147483648:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 4294967296:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 8589934592:\n        return fmt.Sprintf(\"%d\", x)\n    case 17179869184:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 34359738368:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 68719476736:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 137438953472:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 274877906944:\n        return fmt.Sprintf(\"%d\", x)\n    case 549755813888:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 1099511627776:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 2199023255552:\n        return fmt.Sprintf(\"\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmpkdsa1f_test.go:92:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074737
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n   \
    \ if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if\
    \ x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x\
    \ == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x ==\
    \ 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0\
    \ {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n \
    \       return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n \
    \   }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n  \
    \  }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\n    }\n  \
    \  x /= base\n    x %= base\n    if x == 0 {\n        return \"\"\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7qqfg2qu_test.go:145:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074736
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1ql_4yyn_test.go:41: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1ql_4yyn_test.go:41: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1ql_4yyn_test.go:41: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1ql_4yyn_test.go:41:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1ql_4yyn_test.go:41: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1drhgbw5_test.go:114:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9s99_h1d_test.go:45: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9s99_h1d_test.go:45: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9s99_h1d_test.go:45: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9s99_h1d_test.go:45: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9s99_h1d_test.go:45:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9s99_h1d_test.go:45: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vljvcqg_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 8:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n \
    \       return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 64:\n        return fmt.Sprintf(\"%llx\", x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph1oxp9yh_test.go:22:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x\
    \ /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n\
    \    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %=\
    \ base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n \
    \   if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x\
    \ /= base\n    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n\
    \    x %= base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %=\
    \ base\n    if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n \
    \   if x<0 {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0\
    \ {\n        x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n    \
    \    x *= -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *=\
    \ -1\n    }\n    x /= base\n    x %= base\n    if x<0 {\n        x *= -1\n   \
    \ }\n    x /= base\n    x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp07dhkrz4_test.go:133:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    case 256:\n        return fmt.Sprintf(\"\
    %x\", x)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpv7jo3shi_test.go:24:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %v\", x)\n    case 8:\n        return fmt.Sprintf(\"%v\", x/10)\n    case 16:\n\
    \        return fmt.Sprintf(\"%v\", x/100)\n    case 32:\n        return fmt.Sprintf(\"\
    %v\", x/1000)\n    case 64:\n        return fmt.Sprintf(\"%v\", x/1000000)\n \
    \   case 128:\n        return fmt.Sprintf(\"%v\", x/1000000000)\n    case 256:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000)\n    case 512:\n        return\
    \ fmt.Sprintf(\"%v\", x/1000000000000000)\n    case 1024:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000000000000)\n    case 2048:\n        return fmt.Sprintf(\"%v\"\
    , x/100000000000000000000)\n    case 4096:\n        return fmt.Sprintf(\"%v\"\
    , x/10000000000000000000000)\n    case 8192:\n        return fmt.Sprintf(\"%v\"\
    , x/1000000000000000000000000)\n    case 16384:\n        return fmt.Sprintf(\"\
    %v\", x/100000000000000000000000000)\n    case 32768:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000000000000000)\n    case 65536:\n        return fmt.Sprintf(\"\
    %v\", x/10000000000000000000000000000000)\n    case 131072:\n        return fmt.Sprintf(\"\
    %v\", x/1000000000000000000000000000000000)\n    case 262144:\n        return\
    \ fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000000)\n    case 524288:\n\
    \        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000000000)\n\
    \    case 1048576:\n        return fmt.Sprintf(\"%v\", x/10000000000000000000000000000000000000000)\n\
    \    case 2097152:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000000000)\n\
    \    case 4194304:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000)\n\
    \    case 8388608:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000000)\n\
    \    case 16777216:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000000000)\n\
    \    case 33554432:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000000000000000000)\n\
    \    case 67108864:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000000000)\n\
    \    case 134217728:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000)\n\
    \    case 268435456:\n        return fmt.Sprintf(\"%v\", x/100000000000000000000000000000000000000000000)\n\
    \    case 536870912:\n        return fmt.Sprintf(\"%v\", x/1000000000000000000000000000000000000000000\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp02n435vs_test.go:68:79: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    default:\n        fmt.Printf(\"\
    invalid base: %d\\n\", base)\n    }\n    return \"\"\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp9xqn2o06_test.go:24:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074741
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscfcbe91_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074733
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0ilhe1y_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074734
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 32:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 64:\n        return fmt.Sprintf(\"%x\", x)\n    case 128:\n\
    \        return fmt.Sprintf(\"%llx\", x)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpggvt6813_test.go:24:16: fmt.Sprintf format %l has unknown verb l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074738
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\nfunc change_base(x\
    \ int, base int) string {\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        return fmt.Sprintf(\"%d\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %x\", x)\n    case 16:\n        return fmt.Sprintf(\"%X\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%X\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 10:\n        return fmt.Sprintf(\"%o\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %e\", x)\n    case 16:\n        return fmt.Sprintf(\"%f\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%f\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %a\", x)\n    case 16:\n        return fmt.Sprintf(\"%A\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%A\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %c\", x)\n    case 10:\n        return fmt.Sprintf(\"%c\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%C\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %C\", x)\n    case 16:\n        return fmt.Sprintf(\"%e\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 10:\n        return fmt.Sprintf(\"%g\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%x\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%x\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %X\", x)\n    case 10:\n        return fmt.Sprintf(\"%X\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%o\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %o\", x)\n    case 16:\n        return fmt.Sprintf(\"%e\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%e\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %f\", x)\n    case 10:\n        return fmt.Sprintf(\"%f\", x)\n    case 16:\n\
    \        return fmt.Sprintf(\"%g\", x)\n    case 10:\n        return fmt.Sprintf(\"\
    %g\", x)\n    case 16:\n        return fmt.Sprintf(\"%a\", x)\n    case 10:\n\
    \        return fmt.Sprintf(\"%a\", x)\n    case 16:\n        return fmt.Sprintf(\"\
    %A\", x)\n    case 10:\n        return fmt.Sprintf(\"\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpftvi92vh_test.go:100:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074740
