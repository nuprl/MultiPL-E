language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n\
    \        return true\n    }\n    if a <= 3 {\n        return true\n    }\n   \
    \ if a <= 4 {\n        return true\n    }\n    if a <= 5 {\n        return true\n\
    \    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 7 {\n       \
    \ return true\n    }\n    if a <= 8 {\n        return true\n    }\n    if a <=\
    \ 9 {\n        return true\n    }\n    if a <= 10 {\n        return true\n   \
    \ }\n    if a <= 11 {\n        return true\n    }\n    if a <= 12 {\n        return\
    \ true\n    }\n    if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n\
    \        return true\n    }\n    if a <= 15 {\n        return true\n    }\n  \
    \  if a <= 16 {\n        return true\n    }\n    if a <= 17 {\n        return\
    \ true\n    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n\
    \        return true\n    }\n    if a <= 20 {\n        return true\n    }\n  \
    \  if a <= 21 {\n        return true\n    }\n    if a <= 22 {\n        return\
    \ true\n    }\n    if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n\
    \        return true\n    }\n    if a <= 25 {\n        return true\n    }\n  \
    \  if a <= 26 {\n        return true\n    }\n    if a <= 27 {\n        return\
    \ true\n    }\n    if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n\
    \        return true\n    }\n    if a <= 30 {\n        return true\n    }\n  \
    \  if a <= 31 {\n        return true\n    }\n    if a <= 32 {\n        return\
    \ true\n    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n\
    \        return true\n    }\n    if a <= 35 {\n        return true\n    }\n  \
    \  if a <= 36 {\n        return true\n    }\n    if a <= 37 {\n        return\
    \ true\n    }\n    if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n\
    \        return true\n    }\n    if a <= 40 {\n        return true\n    }\n  \
    \  if a <= 41 {\n        return true\n    }\n    if a <= 42 {\n        return\
    \ true\n    }\n    if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n\
    \        return true\n    }\n    if a <= 45 {\n        return true\n    }\n  \
    \  if a <= 46 {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp03_h0d3a_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n \
    \   \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a >\
    \ 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999\
    \ {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n     \
    \   return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n  \
    \  }\n    \n    if a > 999999999 && a <= 9999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 999999999999 {\n        return true\n\
    \    }\n    \n    if a > 999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 999999999999999999 {\n\
    \        return true\n    }\n    \n    if a > 999999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcz73kmtc_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a > 0 && a\
    \ < 9 {\n        return true\n    }\n    if a == 0 {\n        return true\n  \
    \  }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a == 9 {\n \
    \       return true\n    }\n    if a > 0 && a < 9 {\n        return true\n   \
    \ }\n    if a == 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n  \
    \      return true\n    }\n    if a == 9 {\n        return true\n    }\n    if\
    \ a > 0 && a < 9 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n\
    \        return true\n    }\n    if a == 9 {\n        return true\n    }\n   \
    \ if a > 0 && a < 9 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n\
    \        return true\n    }\n    if a == 9 {\n        return true\n    }\n   \
    \ if a > 0 && a < 9 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n\
    \        return true\n    }\n    if a == 9 {\n        return true\n    }\n   \
    \ if a > 0 && a < 9 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a > 0 && a < 9 {\n\
    \        return true\n    }\n    if a == 9 {\n        return true\n    }\n   \
    \ if a > 0 && a < 9 {\n        return true\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp99pkse7h_test.go:142:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 9999999999 {\n \
    \       return true\n    }\n    if a > 9999999999 && a <= 99999999999 {\n    \
    \    return true\n    }\n    if a > 99999999999 && a <= 999999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999999 && a <= 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppg0rf45y_test.go:106:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 && a%3 == 0\
    \ && a%4 == 0 && a%5 == 0 && a%6 == 0 && a%7 == 0 && a%8 == 0 && a%9 == 0 && a%10\
    \ == 0 && a%11 == 0 && a%12 == 0 && a%13 == 0 && a%14 == 0 && a%15 == 0 && a%16\
    \ == 0 && a%17 == 0 && a%18 == 0 && a%19 == 0 && a%20 == 0 && a%21 == 0 && a%22\
    \ == 0 && a%23 == 0 && a%24 == 0 && a%25 == 0 && a%26 == 0 && a%27 == 0 && a%28\
    \ == 0 && a%29 == 0 && a%30 == 0 && a%31 == 0 && a%32 == 0 && a%33 == 0 && a%34\
    \ == 0 && a%35 == 0 && a%36 == 0 && a%37 == 0 && a%38 == 0 && a%39 == 0 && a%40\
    \ == 0 && a%41 == 0 && a%42 == 0 && a%43 == 0 && a%44 == 0 && a%45 == 0 && a%46\
    \ == 0 && a%47 == 0 && a%48 == 0 && a%49 == 0 && a%50 == 0 && a%51 == 0 && a%52\
    \ == 0 && a%53 == 0 && a%54 == 0 && a%55 == 0 && a%56 == 0 && a%57 == 0 && a%58\
    \ == 0 && a%59 == 0 && a%60 == 0 && a%61 == 0 && a%62 == 0 && a%63 == 0 && a%64\
    \ == 0 && a%65 == 0 && a%66 == 0 && a%67 == 0 && a%68 == 0 && a%69 == 0 && a%70\
    \ == 0 && a%71 == 0 && a%72 == 0 && a%73 == 0 && a%74 == 0 && a%75 == 0 && a%76\
    \ == 0 && a%77 == 0 && a%78 == 0 && a%79 == 0 && a%80 == 0 && a%81 == 0 && a%82\
    \ == 0 && a%83 == 0 && a%84 == 0 && a%85 == 0 && a%86 == 0 && a%87 == 0 && a%88\
    \ == 0 && a%89 == 0 && a%90 == 0 && a%91 == 0 && a%92 == 0 && a%93 == 0 && a%94\
    \ == 0 && a%95 == 0 && a%96 == 0 && a%97 == 0 && a%98 == 0 && a%99 == 0 && a%100\
    \ == 0 && a%101 == 0 && a%102 == 0 && a%103 == 0 && a%104 == 0 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyu7p3hgp_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a%2 == 0\
    \ {\n        return false\n    }\n    if a%3 == 0 {\n        return false\n  \
    \  }\n    if a%4 == 0 {\n        return false\n    }\n    if a%5 == 0 {\n    \
    \    return false\n    }\n    if a%6 == 0 {\n        return false\n    }\n   \
    \ if a%7 == 0 {\n        return false\n    }\n    if a%8 == 0 {\n        return\
    \ false\n    }\n    if a%9 == 0 {\n        return false\n    }\n    if a%10 ==\
    \ 0 {\n        return false\n    }\n    if a%11 == 0 {\n        return false\n\
    \    }\n    if a%12 == 0 {\n        return false\n    }\n    if a%13 == 0 {\n\
    \        return false\n    }\n    if a%14 == 0 {\n        return false\n    }\n\
    \    if a%15 == 0 {\n        return false\n    }\n    if a%16 == 0 {\n       \
    \ return false\n    }\n    if a%17 == 0 {\n        return false\n    }\n    if\
    \ a%18 == 0 {\n        return false\n    }\n    if a%19 == 0 {\n        return\
    \ false\n    }\n    if a%20 == 0 {\n        return false\n    }\n    if a%21 ==\
    \ 0 {\n        return false\n    }\n    if a%22 == 0 {\n        return false\n\
    \    }\n    if a%23 == 0 {\n        return false\n    }\n    if a%24 == 0 {\n\
    \        return false\n    }\n    if a%25 == 0 {\n        return false\n    }\n\
    \    if a%26 == 0 {\n        return false\n    }\n    if a%27 == 0 {\n       \
    \ return false\n    }\n    if a%28 == 0 {\n        return false\n    }\n    if\
    \ a%29 == 0 {\n        return false\n    }\n    if a%30 == 0 {\n        return\
    \ false\n    }\n    if a%31 == 0 {\n        return false\n    }\n    if a%32 ==\
    \ 0 {\n        return false\n    }\n    if a%33 == 0 {\n        return false\n\
    \    }\n    if a%34 == 0 {\n        return false\n    }\n    if a%35 == 0 {\n\
    \        return false\n    }\n    if a%36 == 0 {\n        return false\n    }\n\
    \    if a%37 == 0 {\n        return false\n    }\n    if a%38 == 0 {\n       \
    \ return false\n    }\n    if a%39 == 0 {\n        return false\n    }\n    if\
    \ a%40 == 0 {\n        return false\n    }\n    if a%41 == 0 {\n        return\
    \ false\n    }\n    if a%42 == 0 {\n        return false\n    }\n    if a\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6i7k78iz_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 6; i >= 1; i-- {\n\
    \        if a%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp49afb3bq_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp49afb3bq_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n \
    \   \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a >\
    \ 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999\
    \ {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n     \
    \   return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n  \
    \  }\n    \n    if a > 999999999 && a <= 9999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 999999999999 {\n        return true\n\
    \    }\n    \n    if a > 999999999999 && a <= 9999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999 {\n      \
    \  return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnblo2k8m_test.go:124:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 10 {\n        return true\n    }\n    if a\
    \ > 10 && a < 100 {\n        return true\n    }\n    if a > 100 && a < 1000 {\n\
    \        return true\n    }\n    if a > 1000 && a < 10000 {\n        return true\n\
    \    }\n    if a > 10000 && a < 100000 {\n        return true\n    }\n    if a\
    \ > 100000 && a < 1000000 {\n        return true\n    }\n    if a > 1000000 &&\
    \ a < 10000000 {\n        return true\n    }\n    if a > 10000000 && a < 100000000\
    \ {\n        return true\n    }\n    if a > 100000000 && a < 1000000000 {\n  \
    \      return true\n    }\n    if a > 1000000000 && a < 10000000000 {\n      \
    \  return true\n    }\n    if a > 10000000000 && a < 100000000000 {\n        return\
    \ true\n    }\n    if a > 100000000000 && a < 1000000000000 {\n        return\
    \ true\n    }\n    if a > 1000000000000 && a < 10000000000000 {\n        return\
    \ true\n    }\n    if a > 10000000000000 && a < 100000000000000 {\n        return\
    \ true\n    }\n    if a > 100000000000000 && a < 1000000000000000 {\n        return\
    \ true\n    }\n    if a > 1000000000000000 && a < 10000000000000000 {\n      \
    \  return true\n    }\n    if a > 10000000000000000 && a < 100000000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000000 && a < 1000000000000000000\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmped5eetd9_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmped5eetd9_test.go:93:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmped5eetd9_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmped5eetd9_test.go:93:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmped5eetd9_test.go:93: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmped5eetd9_test.go:93:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%11 != 0 {\n        return\
    \ false\n    }\n    if a%13 != 0 {\n        return false\n    }\n    if a%17 !=\
    \ 0 {\n        return false\n    }\n    if a%19 != 0 {\n        return false\n\
    \    }\n    if a%23 != 0 {\n        return false\n    }\n    if a%29 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%41 != 0 {\n        return false\n    }\n    if a%43 != 0 {\n       \
    \ return false\n    }\n    if a%47 != 0 {\n        return false\n    }\n    if\
    \ a%51 != 0 {\n        return false\n    }\n    if a%55 != 0 {\n        return\
    \ false\n    }\n    if a%57 != 0 {\n        return false\n    }\n    if a%61 !=\
    \ 0 {\n        return false\n    }\n    if a%63 != 0 {\n        return false\n\
    \    }\n    if a%67 != 0 {\n        return false\n    }\n    if a%71 != 0 {\n\
    \        return false\n    }\n    if a%73 != 0 {\n        return false\n    }\n\
    \    if a%77 != 0 {\n        return false\n    }\n    if a%81 != 0 {\n       \
    \ return false\n    }\n    if a%83 != 0 {\n        return false\n    }\n    if\
    \ a%87 != 0 {\n        return false\n    }\n    if a%91 != 0 {\n        return\
    \ false\n    }\n    if a%93 != 0 {\n        return false\n    }\n    if a%97 !=\
    \ 0 {\n        return false\n    }\n    if a%101 != 0 {\n        return false\n\
    \    }\n    if a%103 != 0 {\n        return false\n    }\n    if a%107 != 0 {\n\
    \        return false\n    }\n    if a%111 != 0 {\n        return false\n    }\n\
    \    if a%113 != 0 {\n        return false\n    }\n    if a%117 != 0 {\n     \
    \   return false\n    }\n    if a%121 != 0 {\n        return false\n    }\n  \
    \  if a%123 != 0 {\n        return false\n    }\n    if a%127 != 0 {\n       \
    \ return false\n    }\n    if a%131 != 0 {\n        return false\n    }\n    if\
    \ a%133 != 0 {\n        return false\n    }\n    if a%137 != 0 {\n        return\
    \ false\n    }\n    if a%141 != 0 {\n        return false\n    }\n    if a%143\
    \ != 0 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpocfemd_g_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvtc_a_fp_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 && a%3 == 0\
    \ && a%4 == 0 && a%5 == 0 && a%6 == 0 && a%7 == 0 && a%8 == 0 && a%9 == 0 && a%10\
    \ == 0 && a%11 == 0 && a%12 == 0 && a%13 == 0 && a%14 == 0 && a%15 == 0 && a%16\
    \ == 0 && a%17 == 0 && a%18 == 0 && a%19 == 0 && a%20 == 0 && a%21 == 0 && a%22\
    \ == 0 && a%23 == 0 && a%24 == 0 && a%25 == 0 && a%26 == 0 && a%27 == 0 && a%28\
    \ == 0 && a%29 == 0 && a%30 == 0 && a%31 == 0 && a%32 == 0 && a%33 == 0 && a%34\
    \ == 0 && a%35 == 0 && a%36 == 0 && a%37 == 0 && a%38 == 0 && a%39 == 0 && a%40\
    \ == 0 && a%41 == 0 && a%42 == 0 && a%43 == 0 && a%44 == 0 && a%45 == 0 && a%46\
    \ == 0 && a%47 == 0 && a%48 == 0 && a%49 == 0 && a%50 == 0 && a%51 == 0 && a%52\
    \ == 0 && a%53 == 0 && a%54 == 0 && a%55 == 0 && a%56 == 0 && a%57 == 0 && a%58\
    \ == 0 && a%59 == 0 && a%60 == 0 && a%61 == 0 && a%62 == 0 && a%63 == 0 && a%64\
    \ == 0 && a%65 == 0 && a%66 == 0 && a%67 == 0 && a%68 == 0 && a%69 == 0 && a%70\
    \ == 0 && a%71 == 0 && a%72 == 0 && a%73 == 0 && a%74 == 0 && a%75 == 0 && a%76\
    \ == 0 && a%77 == 0 && a%78 == 0 && a%79 == 0 && a%80 == 0 && a%81 == 0 && a%82\
    \ == 0 && a%83 == 0 && a%84 == 0 && a%85 == 0 && a%86 == 0 && a%87 == 0 && a%88\
    \ == 0 && a%89 == 0 && a%90 == 0 && a%91 == 0 && a%92 == 0 && a%93 == 0 && a%94\
    \ == 0 && a%95 == 0 && a%96 == 0 && a%97 == 0 && a%98 == 0 && a%99 == 0 && a%100\
    \ == 0 && a%101 == 0 && a%102 == 0 && a%103 == 0 && a%104 == 0 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyu7p3hgp_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 9999999999 {\n \
    \       return true\n    }\n    if a > 9999999999 && a <= 99999999999 {\n    \
    \    return true\n    }\n    if a > 99999999999 && a <= 999999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999999 && a <= 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a <= 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a <= 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <=\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a <= 99999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a > 99999999999999999999999999999999999 && a <= 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a <= 999999999999999999999999999999999999999 {\n        return true\n   \
    \ }\n    if a > 999999999999999999999999999999999999999 && a <= 9999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a <= 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a <= 9999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999999999999999999999\
    \ && a <= 9999999999999999999999999999999999999999\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp438jusm7_test.go:80:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpua2xlmg7_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%11 != 0 {\n        return\
    \ false\n    }\n    if a%13 != 0 {\n        return false\n    }\n    if a%17 !=\
    \ 0 {\n        return false\n    }\n    if a%19 != 0 {\n        return false\n\
    \    }\n    if a%23 != 0 {\n        return false\n    }\n    if a%29 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%41 != 0 {\n        return false\n    }\n    if a%43 != 0 {\n       \
    \ return false\n    }\n    if a%47 != 0 {\n        return false\n    }\n    if\
    \ a%51 != 0 {\n        return false\n    }\n    if a%55 != 0 {\n        return\
    \ false\n    }\n    if a%57 != 0 {\n        return false\n    }\n    if a%61 !=\
    \ 0 {\n        return false\n    }\n    if a%65 != 0 {\n        return false\n\
    \    }\n    if a%67 != 0 {\n        return false\n    }\n    if a%71 != 0 {\n\
    \        return false\n    }\n    if a%73 != 0 {\n        return false\n    }\n\
    \    if a%77 != 0 {\n        return false\n    }\n    if a%81 != 0 {\n       \
    \ return false\n    }\n    if a%83 != 0 {\n        return false\n    }\n    if\
    \ a%87 != 0 {\n        return false\n    }\n    if a%91 != 0 {\n        return\
    \ false\n    }\n    if a%93 != 0 {\n        return false\n    }\n    if a%95 !=\
    \ 0 {\n        return false\n    }\n    if a%97 != 0 {\n        return false\n\
    \    }\n    if a%101 != 0 {\n        return false\n    }\n    if a%103 != 0 {\n\
    \        return false\n    }\n    if a%105 != 0 {\n        return false\n    }\n\
    \    if a%107 != 0 {\n        return false\n    }\n    if a%111 != 0 {\n     \
    \   return false\n    }\n    if a%113 != 0 {\n        return false\n    }\n  \
    \  if a%115 != 0 {\n        return false\n    }\n    if a%117 != 0 {\n       \
    \ return false\n    }\n    if a%121 != 0 {\n        return false\n    }\n    if\
    \ a%123 != 0 {\n        return false\n    }\n    if a%125 != 0 {\n        return\
    \ false\n    }\n    if a%127 != 0 {\n        return false\n    }\n    if a%131\
    \ != 0 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqnhw4r8u_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    x := a\n    y := a\n    z := a\n    \n    for {\n  \
    \      if x == 1 {\n            return true\n        }\n        \n        if y\
    \ == 1 {\n            return true\n        }\n        \n        if z == 1 {\n\
    \            return true\n        }\n        \n        if x*x + y*y + z*z == 1\
    \ {\n            return true\n        }\n        \n        x -= 1\n        y -=\
    \ 1\n        z -= 1\n    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpmkfwp94j_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmkfwp94j_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmpmkfwp94j_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpmkfwp94j_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpmkfwp94j_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 9999999999 {\n \
    \       return true\n    }\n    if a > 9999999999 && a <= 99999999999 {\n    \
    \    return true\n    }\n    if a > 99999999999 && a <= 999999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999999 && a <= 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a <= 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a <= 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <=\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a <= 99999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a > 99999999999999999999999999999999999 && a <= 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a <= 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a <= 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999999999999999999999\
    \ && a <= 99999999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 99999999999999999999999999999999999999999999999 && a <= 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999999999999999999999999999\
    \ && a <= 99999999\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcilul_ob_test.go:80:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return false\n    }\n    \n \
    \   if a%3 == 0 {\n        return false\n    }\n    \n    if a%4 == 0 {\n    \
    \    return false\n    }\n    \n    if a%5 == 0 {\n        return false\n    }\n\
    \    \n    if a%6 == 0 {\n        return false\n    }\n    \n    if a%7 == 0 {\n\
    \        return false\n    }\n    \n    if a%8 == 0 {\n        return false\n\
    \    }\n    \n    if a%9 == 0 {\n        return false\n    }\n    \n    if a%10\
    \ == 0 {\n        return false\n    }\n    \n    if a%11 == 0 {\n        return\
    \ false\n    }\n    \n    if a%12 == 0 {\n        return false\n    }\n    \n\
    \    if a%13 == 0 {\n        return false\n    }\n    \n    if a%14 == 0 {\n \
    \       return false\n    }\n    \n    if a%15 == 0 {\n        return false\n\
    \    }\n    \n    if a%16 == 0 {\n        return false\n    }\n    \n    if a%17\
    \ == 0 {\n        return false\n    }\n    \n    if a%18 == 0 {\n        return\
    \ false\n    }\n    \n    if a%19 == 0 {\n        return false\n    }\n    \n\
    \    if a%20 == 0 {\n        return false\n    }\n    \n    if a%21 == 0 {\n \
    \       return false\n    }\n    \n    if a%22 == 0 {\n        return false\n\
    \    }\n    \n    if a%23 == 0 {\n        return false\n    }\n    \n    if a%24\
    \ == 0 {\n        return false\n    }\n    \n    if a%25 == 0 {\n        return\
    \ false\n    }\n    \n    if a%26 == 0 {\n        return false\n    }\n    \n\
    \    if a%27 == 0 {\n        return false\n    }\n    \n    if a%28 == 0 {\n \
    \       return false\n    }\n    \n    if a%29 == 0 {\n        return false\n\
    \    }\n    \n    if a%30 == 0 {\n        return false\n    }\n    \n    if a%31\
    \ == 0 {\n        return false\n    }\n    \n    if a%32 == 0 {\n        return\
    \ false\n    }\n    \n    if a%33 == 0 {\n        return false\n    }\n    \n\
    \    if a%34 == 0 {\n        return false\n    }\n    \n    if a%35 == 0 {\n \
    \       return false\n    }\n    \n    if a%36 == 0 {\n        return false\n\
    \    }\n    \n    if a%37 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_whq558t_test.go:161:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a\
    \ > 9 && a < 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n  \
    \      return true\n    }\n    if a > 999 && a < 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a < 99999 {\n        return true\n    }\n    if a >\
    \ 99999 && a < 999999 {\n        return true\n    }\n    if a > 999999 && a <\
    \ 9999999 {\n        return true\n    }\n    if a > 9999999 && a < 999999999 {\n\
    \        return true\n    }\n    if a > 999999999 && a < 99999999999 {\n     \
    \   return true\n    }\n    if a > 99999999999 && a < 999999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999999 && a < 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a < 99999999999999999999999999999999999 {\n        return true\n    }\n \
    \   if a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a < 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppmitf256_test.go:77:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 0; i < a; i++ {\n \
    \       if a%i*i == a*a*a || a%i*i*i == i*i*i {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp6qkxvzyu_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp6qkxvzyu_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp6qkxvzyu_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6qkxvzyu_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 1 {\n        return\
    \ false\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqgup4e7p_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7\
    \ != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0\
    \ {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n\
    \        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n    \
    \    return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return\
    \ false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n\
    \    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n\
    \    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if\
    \ a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if a%3\
    \ != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if a%3 != 0\
    \ || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5\
    \ != 0 || a%7 != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7\
    \ != 0 {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0\
    \ {\n        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n\
    \        return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n    \
    \    return false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return\
    \ false\n    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n\
    \    }\n    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n\
    \    if a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if\
    \ a%3 != 0 || a%5 != 0 || a%7 != 0 {\n        return false\n    }\n    if a%3\
    \ != 0 || \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnevjgfdp_test.go:83:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return false\n    }\n    \n \
    \   if a%3 == 0 {\n        return false\n    }\n    \n    if a%4 == 0 {\n    \
    \    return false\n    }\n    \n    if a%5 == 0 {\n        return false\n    }\n\
    \    \n    if a%6 == 0 {\n        return false\n    }\n    \n    if a%7 == 0 {\n\
    \        return false\n    }\n    \n    if a%8 == 0 {\n        return false\n\
    \    }\n    \n    if a%9 == 0 {\n        return false\n    }\n    \n    if a%10\
    \ == 0 {\n        return false\n    }\n    \n    if a%11 == 0 {\n        return\
    \ false\n    }\n    \n    if a%12 == 0 {\n        return false\n    }\n    \n\
    \    if a%13 == 0 {\n        return false\n    }\n    \n    if a%14 == 0 {\n \
    \       return false\n    }\n    \n    if a%15 == 0 {\n        return false\n\
    \    }\n    \n    if a%16 == 0 {\n        return false\n    }\n    \n    if a%17\
    \ == 0 {\n        return false\n    }\n    \n    if a%18 == 0 {\n        return\
    \ false\n    }\n    \n    if a%19 == 0 {\n        return false\n    }\n    \n\
    \    if a%20 == 0 {\n        return false\n    }\n    \n    if a%21 == 0 {\n \
    \       return false\n    }\n    \n    if a%22 == 0 {\n        return false\n\
    \    }\n    \n    if a%23 == 0 {\n        return false\n    }\n    \n    if a%24\
    \ == 0 {\n        return false\n    }\n    \n    if a%25 == 0 {\n        return\
    \ false\n    }\n    \n    if a%26 == 0 {\n        return false\n    }\n    \n\
    \    if a%27 == 0 {\n        return false\n    }\n    \n    if a%28 == 0 {\n \
    \       return false\n    }\n    \n    if a%29 == 0 {\n        return false\n\
    \    }\n    \n    if a%30 == 0 {\n        return false\n    }\n    \n    if a%31\
    \ == 0 {\n        return false\n    }\n    \n    if a%32 == 0 {\n        return\
    \ false\n    }\n    \n    if a%33 == 0 {\n        return false\n    }\n    \n\
    \    if a%34 == 0 {\n        return false\n    }\n    \n    if a%35 == 0 {\n \
    \       return false\n    }\n    \n    if a%36 == 0 {\n        return false\n\
    \    }\n    \n    if a%37 == 0 {\n        return false\n    }\n    \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzgq68paz_test.go:161:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvtc_a_fp_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpax1q56ie_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp16vwancd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    return a%3 ==0 && a%5==0\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpih3o6lv5_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpih3o6lv5_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpih3o6lv5_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpih3o6lv5_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpih3o6lv5_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%11 != 0 {\n        return\
    \ false\n    }\n    if a%13 != 0 {\n        return false\n    }\n    if a%17 !=\
    \ 0 {\n        return false\n    }\n    if a%19 != 0 {\n        return false\n\
    \    }\n    if a%23 != 0 {\n        return false\n    }\n    if a%29 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%41 != 0 {\n        return false\n    }\n    if a%43 != 0 {\n       \
    \ return false\n    }\n    if a%47 != 0 {\n        return false\n    }\n    if\
    \ a%51 != 0 {\n        return false\n    }\n    if a%55 != 0 {\n        return\
    \ false\n    }\n    if a%57 != 0 {\n        return false\n    }\n    if a%61 !=\
    \ 0 {\n        return false\n    }\n    if a%65 != 0 {\n        return false\n\
    \    }\n    if a%67 != 0 {\n        return false\n    }\n    if a%71 != 0 {\n\
    \        return false\n    }\n    if a%73 != 0 {\n        return false\n    }\n\
    \    if a%77 != 0 {\n        return false\n    }\n    if a%81 != 0 {\n       \
    \ return false\n    }\n    if a%83 != 0 {\n        return false\n    }\n    if\
    \ a%87 != 0 {\n        return false\n    }\n    if a%91 != 0 {\n        return\
    \ false\n    }\n    if a%93 != 0 {\n        return false\n    }\n    if a%97 !=\
    \ 0 {\n        return false\n    }\n    if a%101 != 0 {\n        return false\n\
    \    }\n    if a%103 != 0 {\n        return false\n    }\n    if a%107 != 0 {\n\
    \        return false\n    }\n    if a%111 != 0 {\n        return false\n    }\n\
    \    if a%113 != 0 {\n        return false\n    }\n    if a%117 != 0 {\n     \
    \   return false\n    }\n    if a%121 != 0 {\n        return false\n    }\n  \
    \  if a%123 != 0 {\n        return false\n    }\n    if a%127 != 0 {\n       \
    \ return false\n    }\n    if a%131 != 0 {\n        return false\n    }\n    if\
    \ a%133 != 0 {\n        return false\n    }\n    if a%137 != 0 {\n        return\
    \ false\n    }\n    if a%141 != 0 {\n        return false\n    }\n    if a%143\
    \ != 0 {\n        return false\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx2o286h__test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvtc_a_fp_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%9 != 0 {\n        return false\n\
    \    }\n    if a%11 != 0 {\n        return false\n    }\n    if a%13 != 0 {\n\
    \        return false\n    }\n    if a%15 != 0 {\n        return false\n    }\n\
    \    if a%17 != 0 {\n        return false\n    }\n    if a%19 != 0 {\n       \
    \ return false\n    }\n    if a%21 != 0 {\n        return false\n    }\n    if\
    \ a%23 != 0 {\n        return false\n    }\n    if a%25 != 0 {\n        return\
    \ false\n    }\n    if a%27 != 0 {\n        return false\n    }\n    if a%29 !=\
    \ 0 {\n        return false\n    }\n    if a%31 != 0 {\n        return false\n\
    \    }\n    if a%33 != 0 {\n        return false\n    }\n    if a%35 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%39 != 0 {\n        return false\n    }\n    if a%41 != 0 {\n       \
    \ return false\n    }\n    if a%43 != 0 {\n        return false\n    }\n    if\
    \ a%45 != 0 {\n        return false\n    }\n    if a%47 != 0 {\n        return\
    \ false\n    }\n    if a%49 != 0 {\n        return false\n    }\n    if a%51 !=\
    \ 0 {\n        return false\n    }\n    if a%53 != 0 {\n        return false\n\
    \    }\n    if a%55 != 0 {\n        return false\n    }\n    if a%57 != 0 {\n\
    \        return false\n    }\n    if a%59 != 0 {\n        return false\n    }\n\
    \    if a%61 != 0 {\n        return false\n    }\n    if a%63 != 0 {\n       \
    \ return false\n    }\n    if a%65 != 0 {\n        return false\n    }\n    if\
    \ a%67 != 0 {\n        return false\n    }\n    if a%69 != 0 {\n        return\
    \ false\n    }\n    if a%71 != 0 {\n        return false\n    }\n    if a%73 !=\
    \ 0 {\n        return false\n    }\n    if a%75 != 0 {\n        return false\n\
    \    }\n    if a%77 != 0 {\n        return false\n    }\n    if a%79 != 0 {\n\
    \        return false\n    }\n    if a%81 != 0 {\n        return false\n    }\n\
    \    if a%83 != 0 {\n        return false\n    }\n    if a%85 != 0 {\n       \
    \ return false\n    }\n    if a%87\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6e3ue0yp_test.go:140:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 1 {\n        return\
    \ false\n    }\n    \n    b := a\n    \n    for i := 2; i <= b; i++ {\n      \
    \  if b*b == i {\n            return true\n        }\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp3glf8yrx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp3glf8yrx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp3glf8yrx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp3glf8yrx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp3glf8yrx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 && a%3 == 0\
    \ && a%4 == 0 && a%5 == 0 && a%6 == 0 && a%7 == 0 && a%8 == 0 && a%9 == 0 && a%10\
    \ == 0 && a%11 == 0 && a%12 == 0 && a%13 == 0 && a%14 == 0 && a%15 == 0 && a%16\
    \ == 0 && a%17 == 0 && a%18 == 0 && a%19 == 0 && a%20 == 0 && a%21 == 0 && a%22\
    \ == 0 && a%23 == 0 && a%24 == 0 && a%25 == 0 && a%26 == 0 && a%27 == 0 && a%28\
    \ == 0 && a%29 == 0 && a%30 == 0 && a%31 == 0 && a%32 == 0 && a%33 == 0 && a%34\
    \ == 0 && a%35 == 0 && a%36 == 0 && a%37 == 0 && a%38 == 0 && a%39 == 0 && a%40\
    \ == 0 && a%41 == 0 && a%42 == 0 && a%43 == 0 && a%44 == 0 && a%45 == 0 && a%46\
    \ == 0 && a%47 == 0 && a%48 == 0 && a%49 == 0 && a%50 == 0 && a%51 == 0 && a%52\
    \ == 0 && a%53 == 0 && a%54 == 0 && a%55 == 0 && a%56 == 0 && a%57 == 0 && a%58\
    \ == 0 && a%59 == 0 && a%60 == 0 && a%61 == 0 && a%62 == 0 && a%63 == 0 && a%64\
    \ == 0 && a%65 == 0 && a%66 == 0 && a%67 == 0 && a%68 == 0 && a%69 == 0 && a%70\
    \ == 0 && a%71 == 0 && a%72 == 0 && a%73 == 0 && a%74 == 0 && a%75 == 0 && a%76\
    \ == 0 && a%77 == 0 && a%78 == 0 && a%79 == 0 && a%80 == 0 && a%81 == 0 && a%82\
    \ == 0 && a%83 == 0 && a%84 == 0 && a%85 == 0 && a%86 == 0 && a%87 == 0 && a%88\
    \ == 0 && a%89 == 0 && a%90 == 0 && a%91 == 0 && a%92 == 0 && a%93 == 0 && a%94\
    \ == 0 && a%95 == 0 && a%96 == 0 && a%97 == 0 && a%98 == 0 && a%99 == 0 && a%100\
    \ == 0 && a%101 == 0 && a%102 == 0 && a%103 == 0 && a%104 == 0 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyu7p3hgp_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 && a%3 == 0\
    \ && a%4 == 0 && a%5 == 0 && a%6 == 0 && a%7 == 0 && a%8 == 0 && a%9 == 0 && a%10\
    \ == 0 && a%11 == 0 && a%12 == 0 && a%13 == 0 && a%14 == 0 && a%15 == 0 && a%16\
    \ == 0 && a%17 == 0 && a%18 == 0 && a%19 == 0 && a%20 == 0 && a%21 == 0 && a%22\
    \ == 0 && a%23 == 0 && a%24 == 0 && a%25 == 0 && a%26 == 0 && a%27 == 0 && a%28\
    \ == 0 && a%29 == 0 && a%30 == 0 && a%31 == 0 && a%32 == 0 && a%33 == 0 && a%34\
    \ == 0 && a%35 == 0 && a%36 == 0 && a%37 == 0 && a%38 == 0 && a%39 == 0 && a%40\
    \ == 0 && a%41 == 0 && a%42 == 0 && a%43 == 0 && a%44 == 0 && a%45 == 0 && a%46\
    \ == 0 && a%47 == 0 && a%48 == 0 && a%49 == 0 && a%50 == 0 && a%51 == 0 && a%52\
    \ == 0 && a%53 == 0 && a%54 == 0 && a%55 == 0 && a%56 == 0 && a%57 == 0 && a%58\
    \ == 0 && a%59 == 0 && a%60 == 0 && a%61 == 0 && a%62 == 0 && a%63 == 0 && a%64\
    \ == 0 && a%65 == 0 && a%66 == 0 && a%67 == 0 && a%68 == 0 && a%69 == 0 && a%70\
    \ == 0 && a%71 == 0 && a%72 == 0 && a%73 == 0 && a%74 == 0 && a%75 == 0 && a%76\
    \ == 0 && a%77 == 0 && a%78 == 0 && a%79 == 0 && a%80 == 0 && a%81 == 0 && a%82\
    \ == 0 && a%83 == 0 && a%84 == 0 && a%85 == 0 && a%86 == 0 && a%87 == 0 && a%88\
    \ == 0 && a%89 == 0 && a%90 == 0 && a%91 == 0 && a%92 == 0 && a%93 == 0 && a%94\
    \ == 0 && a%95 == 0 && a%96 == 0 && a%97 == 0 && a%98 == 0 && a%99 == 0 && a%100\
    \ == 0 && a%101 == 0 && a%102 == 0 && a%103 == 0 && a%104 == 0 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyu7p3hgp_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 100 {\n        return true\n    }\n    if\
    \ a > 100 && a < 1000 {\n        return true\n    }\n    if a > 1000 && a < 10000\
    \ {\n        return true\n    }\n    if a > 10000 && a < 100000 {\n        return\
    \ true\n    }\n    if a > 100000 && a < 1000000 {\n        return true\n    }\n\
    \    if a > 1000000 && a < 10000000 {\n        return true\n    }\n    if a >\
    \ 10000000 && a < 100000000 {\n        return true\n    }\n    if a > 100000000\
    \ && a < 1000000000 {\n        return true\n    }\n    if a > 1000000000 && a\
    \ < 10000000000 {\n        return true\n    }\n    if a > 10000000000 && a < 100000000000\
    \ {\n        return true\n    }\n    if a > 100000000000 && a < 1000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000 && a < 10000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000 && a < 100000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000 && a < 1000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000 && a < 10000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000 && a < 100000000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000000 && a < 1000000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000000 && a < 10000000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000000 && a < 1000000000000000000\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17e8weci_test.go:67:39: 10000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmp17e8weci_test.go:70:12: 10000000000000000000 (untyped int constant) overflows
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a%2 == 0 {\n        return false\n    }\n    if a%3 ==\
    \ 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n\
    \    }\n    if a%5 == 0 {\n        return false\n    }\n    if a%6 == 0 {\n  \
    \      return false\n    }\n    if a%7 == 0 {\n        return false\n    }\n \
    \   if a%8 == 0 {\n        return false\n    }\n    if a%9 == 0 {\n        return\
    \ false\n    }\n    if a%10 == 0 {\n        return false\n    }\n    if a%11 ==\
    \ 0 {\n        return false\n    }\n    if a%12 == 0 {\n        return false\n\
    \    }\n    if a%13 == 0 {\n        return false\n    }\n    if a%14 == 0 {\n\
    \        return false\n    }\n    if a%15 == 0 {\n        return false\n    }\n\
    \    if a%16 == 0 {\n        return false\n    }\n    if a%17 == 0 {\n       \
    \ return false\n    }\n    if a%18 == 0 {\n        return false\n    }\n    if\
    \ a%19 == 0 {\n        return false\n    }\n    if a%20 == 0 {\n        return\
    \ false\n    }\n    if a%21 == 0 {\n        return false\n    }\n    if a%22 ==\
    \ 0 {\n        return false\n    }\n    if a%23 == 0 {\n        return false\n\
    \    }\n    if a%24 == 0 {\n        return false\n    }\n    if a%25 == 0 {\n\
    \        return false\n    }\n    if a%26 == 0 {\n        return false\n    }\n\
    \    if a%27 == 0 {\n        return false\n    }\n    if a%28 == 0 {\n       \
    \ return false\n    }\n    if a%29 == 0 {\n        return false\n    }\n    if\
    \ a%30 == 0 {\n        return false\n    }\n    if a%31 == 0 {\n        return\
    \ false\n    }\n    if a%32 == 0 {\n        return false\n    }\n    if a%33 ==\
    \ 0 {\n        return false\n    }\n    if a%34 == 0 {\n        return false\n\
    \    }\n    if a%35 == 0 {\n        return false\n    }\n    if a%36 == 0 {\n\
    \        return false\n    }\n    if a%37 == 0 {\n        return false\n    }\n\
    \    if a%38 == 0 {\n        return false\n    }\n    if a%39 == 0 {\n       \
    \ return false\n    }\n    if a%40 == 0 {\n        return false\n    }\n    if\
    \ a%41 == 0 {\n        return false\n    }\n    if a%42 == 0 {\n        return\
    \ false\n    }\n    if a%43 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjrwvgciw_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return false\n    }\n    \n \
    \   if a%3 == 0 {\n        return false\n    }\n    \n    if a%5 == 0 {\n    \
    \    return false\n    }\n    \n    if a%7 == 0 {\n        return false\n    }\n\
    \    \n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpr0x3s5xg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpr0x3s5xg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpr0x3s5xg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpr0x3s5xg_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a%2 == 0 {\n        return false\n    }\n    if a%3 ==\
    \ 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n\
    \    }\n    if a%5 == 0 {\n        return false\n    }\n    if a%6 == 0 {\n  \
    \      return false\n    }\n    if a%7 == 0 {\n        return false\n    }\n \
    \   if a%8 == 0 {\n        return false\n    }\n    if a%9 == 0 {\n        return\
    \ false\n    }\n    if a%10 == 0 {\n        return false\n    }\n    if a%11 ==\
    \ 0 {\n        return false\n    }\n    if a%12 == 0 {\n        return false\n\
    \    }\n    if a%13 == 0 {\n        return false\n    }\n    if a%14 == 0 {\n\
    \        return false\n    }\n    if a%15 == 0 {\n        return false\n    }\n\
    \    if a%16 == 0 {\n        return false\n    }\n    if a%17 == 0 {\n       \
    \ return false\n    }\n    if a%18 == 0 {\n        return false\n    }\n    if\
    \ a%19 == 0 {\n        return false\n    }\n    if a%20 == 0 {\n        return\
    \ false\n    }\n    if a%21 == 0 {\n        return false\n    }\n    if a%22 ==\
    \ 0 {\n        return false\n    }\n    if a%23 == 0 {\n        return false\n\
    \    }\n    if a%24 == 0 {\n        return false\n    }\n    if a%25 == 0 {\n\
    \        return false\n    }\n    if a%26 == 0 {\n        return false\n    }\n\
    \    if a%27 == 0 {\n        return false\n    }\n    if a%28 == 0 {\n       \
    \ return false\n    }\n    if a%29 == 0 {\n        return false\n    }\n    if\
    \ a%30 == 0 {\n        return false\n    }\n    if a%31 == 0 {\n        return\
    \ false\n    }\n    if a%32 == 0 {\n        return false\n    }\n    if a%33 ==\
    \ 0 {\n        return false\n    }\n    if a%34 == 0 {\n        return false\n\
    \    }\n    if a%35 == 0 {\n        return false\n    }\n    if a%36 == 0 {\n\
    \        return false\n    }\n    if a%37 == 0 {\n        return false\n    }\n\
    \    if a%38 == 0 {\n        return false\n    }\n    if a%39 == 0 {\n       \
    \ return false\n    }\n    if a%40 == 0 {\n        return false\n    }\n    if\
    \ a%41 == 0 {\n        return false\n    }\n    if a%42 == 0 {\n        return\
    \ false\n    }\n    if a%43 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjrwvgciw_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%11 != 0 {\n        return\
    \ false\n    }\n    if a%13 != 0 {\n        return false\n    }\n    if a%17 !=\
    \ 0 {\n        return false\n    }\n    if a%19 != 0 {\n        return false\n\
    \    }\n    if a%23 != 0 {\n        return false\n    }\n    if a%29 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%41 != 0 {\n        return false\n    }\n    if a%43 != 0 {\n       \
    \ return false\n    }\n    if a%47 != 0 {\n        return false\n    }\n    if\
    \ a%51 != 0 {\n        return false\n    }\n    if a%55 != 0 {\n        return\
    \ false\n    }\n    if a%57 != 0 {\n        return false\n    }\n    if a%61 !=\
    \ 0 {\n        return false\n    }\n    if a%65 != 0 {\n        return false\n\
    \    }\n    if a%67 != 0 {\n        return false\n    }\n    if a%71 != 0 {\n\
    \        return false\n    }\n    if a%73 != 0 {\n        return false\n    }\n\
    \    if a%77 != 0 {\n        return false\n    }\n    if a%81 != 0 {\n       \
    \ return false\n    }\n    if a%83 != 0 {\n        return false\n    }\n    if\
    \ a%87 != 0 {\n        return false\n    }\n    if a%91 != 0 {\n        return\
    \ false\n    }\n    if a%93 != 0 {\n        return false\n    }\n    if a%97 !=\
    \ 0 {\n        return false\n    }\n    if a%101 != 0 {\n        return false\n\
    \    }\n    if a%103 != 0 {\n        return false\n    }\n    if a%107 != 0 {\n\
    \        return false\n    }\n    if a%111 != 0 {\n        return false\n    }\n\
    \    if a%113 != 0 {\n        return false\n    }\n    if a%117 != 0 {\n     \
    \   return false\n    }\n    if a%121 != 0 {\n        return false\n    }\n  \
    \  if a%123 != 0 {\n        return false\n    }\n    if a%127 != 0 {\n       \
    \ return false\n    }\n    if a%131 != 0 {\n        return false\n    }\n    if\
    \ a%133 != 0 {\n        return false\n    }\n    if a%137 != 0 {\n        return\
    \ false\n    }\n    if a%141 != 0 {\n        return false\n    }\n    if a%143\
    \ != 0 {\n        return false\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx2o286h__test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    cubes := make([]int, 0, a+1)\n    for i := 1; i <= a;\
    \ i++ {\n        cubes = append(cubes, i*i*i)\n    }\n    \n    for _, v := range\
    \ cubes {\n        if a == v {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp5auji120_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp5auji120_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    return a%2 == 0 && a%3\
    \ == 0 && a%4 == 0\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpmho_02_l_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpmho_02_l_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpmho_02_l_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpmho_02_l_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpmho_02_l_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return false\n    }\n    \n \
    \   if a%3 == 0 {\n        return false\n    }\n    \n    if a%5 == 0 {\n    \
    \    return false\n    }\n    \n    if a%7 == 0 {\n        return false\n    }\n\
    \    \n    if a%11 == 0 {\n        return false\n    }\n    \n    if a%13 == 0\
    \ {\n        return false\n    }\n    \n    if a%17 == 0 {\n        return false\n\
    \    }\n    \n    if a%19 == 0 {\n        return false\n    }\n    \n    if a%23\
    \ == 0 {\n        return false\n    }\n    \n    if a%29 == 0 {\n        return\
    \ false\n    }\n    \n    if a%37 == 0 {\n        return false\n    }\n    \n\
    \    if a%53 == 0 {\n        return false\n    }\n    \n    if a%59 == 0 {\n \
    \       return false\n    }\n    \n    if a%67 == 0 {\n        return false\n\
    \    }\n    \n    if a%83 == 0 {\n        return false\n    }\n    \n    if a%99\
    \ == 0 {\n        return false\n    }\n    \n    if a%113 == 0 {\n        return\
    \ false\n    }\n    \n    if a%127 == 0 {\n        return false\n    }\n    \n\
    \    if a%131 == 0 {\n        return false\n    }\n    \n    if a%137 == 0 {\n\
    \        return false\n    }\n    \n    if a%143 == 0 {\n        return false\n\
    \    }\n    \n    if a%149 == 0 {\n        return false\n    }\n    \n    if a%153\
    \ == 0 {\n        return false\n    }\n    \n    if a%157 == 0 {\n        return\
    \ false\n    }\n    \n    if a%161 == 0 {\n        return false\n    }\n    \n\
    \    if a%167 == 0 {\n        return false\n    }\n    \n    if a%173 == 0 {\n\
    \        return false\n    }\n    \n    if a%179 == 0 {\n        return false\n\
    \    }\n    \n    if a%183 == 0 {\n        return false\n    }\n    \n    if a%189\
    \ == 0 {\n        return false\n    }\n    \n    if a%193 == 0 {\n        return\
    \ false\n    }\n    \n    if a%197 == 0 {\n        return false\n    }\n    \n\
    \    if a%201 == 0 {\n        return false\n    }\n    \n    if a%207 == 0 {\n\
    \        return false\n    }\n    \n    if a%211 == 0 {\n        return false\n\
    \    }\n    \n    if a%217 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvpew67if_test.go:161:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    cubes := make([]int, 0, a+1)\n    for i := 0; i < a;\
    \ i++ {\n        cubes = append(cubes, i*i*i)\n    }\n    \n    for _, v := range\
    \ cubes {\n        if a == v {\n            return true\n        }\n    }\n  \
    \  \n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpi5nj2kas_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpi5nj2kas_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpi5nj2kas_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%9 != 0 {\n        return false\n\
    \    }\n    if a%11 != 0 {\n        return false\n    }\n    if a%13 != 0 {\n\
    \        return false\n    }\n    if a%15 != 0 {\n        return false\n    }\n\
    \    if a%17 != 0 {\n        return false\n    }\n    if a%19 != 0 {\n       \
    \ return false\n    }\n    if a%21 != 0 {\n        return false\n    }\n    if\
    \ a%23 != 0 {\n        return false\n    }\n    if a%25 != 0 {\n        return\
    \ false\n    }\n    if a%27 != 0 {\n        return false\n    }\n    if a%29 !=\
    \ 0 {\n        return false\n    }\n    if a%31 != 0 {\n        return false\n\
    \    }\n    if a%33 != 0 {\n        return false\n    }\n    if a%35 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%39 != 0 {\n        return false\n    }\n    if a%41 != 0 {\n       \
    \ return false\n    }\n    if a%43 != 0 {\n        return false\n    }\n    if\
    \ a%45 != 0 {\n        return false\n    }\n    if a%47 != 0 {\n        return\
    \ false\n    }\n    if a%49 != 0 {\n        return false\n    }\n    if a%51 !=\
    \ 0 {\n        return false\n    }\n    if a%53 != 0 {\n        return false\n\
    \    }\n    if a%55 != 0 {\n        return false\n    }\n    if a%57 != 0 {\n\
    \        return false\n    }\n    if a%59 != 0 {\n        return false\n    }\n\
    \    if a%61 != 0 {\n        return false\n    }\n    if a%63 != 0 {\n       \
    \ return false\n    }\n    if a%65 != 0 {\n        return false\n    }\n    if\
    \ a%67 != 0 {\n        return false\n    }\n    if a%69 != 0 {\n        return\
    \ false\n    }\n    if a%71 != 0 {\n        return false\n    }\n    if a%73 !=\
    \ 0 {\n        return false\n    }\n    if a%75 != 0 {\n        return false\n\
    \    }\n    if a%77 != 0 {\n        return false\n    }\n    if a%79 != 0 {\n\
    \        return false\n    }\n    if a%81 != 0 {\n        return false\n    }\n\
    \    if a%83 != 0 {\n        return false\n    }\n    if a%85 != 0 {\n       \
    \ return false\n    }\n    if a%87\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6e3ue0yp_test.go:140:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    cubes := make([]int, 0, a+1)\n    for i := 0; i < a+1;\
    \ i++ {\n        cubes = append(cubes, i*i*i)\n    }\n    \n    for _, v := range\
    \ cubes {\n        if a == v {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpje2fhji1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpje2fhji1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 || a%3 == 0\
    \ || a%5 == 0 || a%7 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpan7em6se_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpan7em6se_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmpan7em6se_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpan7em6se_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpan7em6se_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ri7xmao_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9jg1wuha_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a%2 == 0 {\n        return false\n    }\n    if a%3 ==\
    \ 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n\
    \    }\n    if a%5 == 0 {\n        return false\n    }\n    if a%6 == 0 {\n  \
    \      return false\n    }\n    if a%7 == 0 {\n        return false\n    }\n \
    \   if a%8 == 0 {\n        return false\n    }\n    if a%9 == 0 {\n        return\
    \ false\n    }\n    if a%10 == 0 {\n        return false\n    }\n    if a%11 ==\
    \ 0 {\n        return false\n    }\n    if a%12 == 0 {\n        return false\n\
    \    }\n    if a%13 == 0 {\n        return false\n    }\n    if a%14 == 0 {\n\
    \        return false\n    }\n    if a%15 == 0 {\n        return false\n    }\n\
    \    if a%16 == 0 {\n        return false\n    }\n    if a%17 == 0 {\n       \
    \ return false\n    }\n    if a%18 == 0 {\n        return false\n    }\n    if\
    \ a%19 == 0 {\n        return false\n    }\n    if a%20 == 0 {\n        return\
    \ false\n    }\n    if a%21 == 0 {\n        return false\n    }\n    if a%22 ==\
    \ 0 {\n        return false\n    }\n    if a%23 == 0 {\n        return false\n\
    \    }\n    if a%24 == 0 {\n        return false\n    }\n    if a%25 == 0 {\n\
    \        return false\n    }\n    if a%26 == 0 {\n        return false\n    }\n\
    \    if a%27 == 0 {\n        return false\n    }\n    if a%28 == 0 {\n       \
    \ return false\n    }\n    if a%29 == 0 {\n        return false\n    }\n    if\
    \ a%30 == 0 {\n        return false\n    }\n    if a%31 == 0 {\n        return\
    \ false\n    }\n    if a%32 == 0 {\n        return false\n    }\n    if a%33 ==\
    \ 0 {\n        return false\n    }\n    if a%34 == 0 {\n        return false\n\
    \    }\n    if a%35 == 0 {\n        return false\n    }\n    if a%36 == 0 {\n\
    \        return false\n    }\n    if a%37 == 0 {\n        return false\n    }\n\
    \    if a%38 == 0 {\n        return false\n    }\n    if a%39 == 0 {\n       \
    \ return false\n    }\n    if a%40 == 0 {\n        return false\n    }\n    if\
    \ a%41 == 0 {\n        return false\n    }\n    if a%42 == 0 {\n        return\
    \ false\n    }\n    if a%43 == 0 {\n        return false\n    }\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjrwvgciw_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a%2 == 0 {\n\
    \        return false\n    }\n    if a%3 == 0 {\n        return false\n    }\n\
    \    if a%5 == 0 {\n        return false\n    }\n    if a%7 == 0 {\n        return\
    \ false\n    }\n    if a%11 == 0 {\n        return false\n    }\n    if a%13 ==\
    \ 0 {\n        return false\n    }\n    if a%17 == 0 {\n        return false\n\
    \    }\n    if a%19 == 0 {\n        return false\n    }\n    if a%23 == 0 {\n\
    \        return false\n    }\n    if a%29 == 0 {\n        return false\n    }\n\
    \    if a%31 == 0 {\n        return false\n    }\n    if a%37 == 0 {\n       \
    \ return false\n    }\n    if a%41 == 0 {\n        return false\n    }\n    if\
    \ a%43 == 0 {\n        return false\n    }\n    if a%47 == 0 {\n        return\
    \ false\n    }\n    if a%53 == 0 {\n        return false\n    }\n    if a%59 ==\
    \ 0 {\n        return false\n    }\n    if a%61 == 0 {\n        return false\n\
    \    }\n    if a%67 == 0 {\n        return false\n    }\n    if a%71 == 0 {\n\
    \        return false\n    }\n    if a%73 == 0 {\n        return false\n    }\n\
    \    if a%79 == 0 {\n        return false\n    }\n    if a%83 == 0 {\n       \
    \ return false\n    }\n    if a%89 == 0 {\n        return false\n    }\n    if\
    \ a%97 == 0 {\n        return false\n    }\n    if a%101 == 0 {\n        return\
    \ false\n    }\n    if a%103 == 0 {\n        return false\n    }\n    if a%107\
    \ == 0 {\n        return false\n    }\n    if a%109 == 0 {\n        return false\n\
    \    }\n    if a%113 == 0 {\n        return false\n    }\n    if a%117 == 0 {\n\
    \        return false\n    }\n    if a%121 == 0 {\n        return false\n    }\n\
    \    if a%123 == 0 {\n        return false\n    }\n    if a%127 == 0 {\n     \
    \   return false\n    }\n    if a%131 == 0 {\n        return false\n    }\n  \
    \  if a%133 == 0 {\n        return false\n    }\n    if a%137 == 0 {\n       \
    \ return false\n    }\n    if a%141 == 0 {\n        return false\n    }\n    if\
    \ a%143 == 0 {\n        return false\n    }\n    if a%147 == 0 {\n        return\
    \ false\n    }\n    if a%151 == 0 {\n        return false\n    }\n    if \nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9q4q7hd9_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 6; i >= 1; i-- {\n\
    \        if a%i*i == a*i*i {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp943s8lj9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp943s8lj9_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp943s8lj9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp943s8lj9_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9jg1wuha_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n\
    \        return true\n    }\n    if a <= 3 {\n        return true\n    }\n   \
    \ if a <= 4 {\n        return true\n    }\n    if a <= 5 {\n        return true\n\
    \    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 7 {\n       \
    \ return true\n    }\n    if a <= 8 {\n        return true\n    }\n    if a <=\
    \ 9 {\n        return true\n    }\n    if a <= 10 {\n        return true\n   \
    \ }\n    if a <= 11 {\n        return true\n    }\n    if a <= 12 {\n        return\
    \ true\n    }\n    if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n\
    \        return true\n    }\n    if a <= 15 {\n        return true\n    }\n  \
    \  if a <= 16 {\n        return true\n    }\n    if a <= 17 {\n        return\
    \ true\n    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n\
    \        return true\n    }\n    if a <= 20 {\n        return true\n    }\n  \
    \  if a <= 21 {\n        return true\n    }\n    if a <= 22 {\n        return\
    \ true\n    }\n    if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n\
    \        return true\n    }\n    if a <= 25 {\n        return true\n    }\n  \
    \  if a <= 26 {\n        return true\n    }\n    if a <= 27 {\n        return\
    \ true\n    }\n    if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n\
    \        return true\n    }\n    if a <= 30 {\n        return true\n    }\n  \
    \  if a <= 31 {\n        return true\n    }\n    if a <= 32 {\n        return\
    \ true\n    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n\
    \        return true\n    }\n    if a <= 35 {\n        return true\n    }\n  \
    \  if a <= 36 {\n        return true\n    }\n    if a <= 37 {\n        return\
    \ true\n    }\n    if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n\
    \        return true\n    }\n    if a <= 40 {\n        return true\n    }\n  \
    \  if a <= 41 {\n        return true\n    }\n    if a <= 42 {\n        return\
    \ true\n    }\n    if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n\
    \        return true\n    }\n    if a <= 45 {\n        return true\n    }\n  \
    \  if a <= 46 {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp03_h0d3a_test.go:155:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a%2 == 0 {\n        return false\n    }\n    if a%3 ==\
    \ 0 {\n        return false\n    }\n    if a%5 == 0 {\n        return false\n\
    \    }\n    if a%7 == 0 {\n        return false\n    }\n    if a%11 == 0 {\n \
    \       return false\n    }\n    if a%13 == 0 {\n        return false\n    }\n\
    \    if a%17 == 0 {\n        return false\n    }\n    if a%19 == 0 {\n       \
    \ return false\n    }\n    if a%23 == 0 {\n        return false\n    }\n    if\
    \ a%29 == 0 {\n        return false\n    }\n    if a%31 == 0 {\n        return\
    \ false\n    }\n    if a%37 == 0 {\n        return false\n    }\n    if a%41 ==\
    \ 0 {\n        return false\n    }\n    if a%43 == 0 {\n        return false\n\
    \    }\n    if a%47 == 0 {\n        return false\n    }\n    if a%53 == 0 {\n\
    \        return false\n    }\n    if a%59 == 0 {\n        return false\n    }\n\
    \    if a%61 == 0 {\n        return false\n    }\n    if a%67 == 0 {\n       \
    \ return false\n    }\n    if a%71 == 0 {\n        return false\n    }\n    if\
    \ a%73 == 0 {\n        return false\n    }\n    if a%79 == 0 {\n        return\
    \ false\n    }\n    if a%83 == 0 {\n        return false\n    }\n    if a%89 ==\
    \ 0 {\n        return false\n    }\n    if a%97 == 0 {\n        return false\n\
    \    }\n    if a%101 == 0 {\n        return false\n    }\n    if a%103 == 0 {\n\
    \        return false\n    }\n    if a%107 == 0 {\n        return false\n    }\n\
    \    if a%111 == 0 {\n        return false\n    }\n    if a%113 == 0 {\n     \
    \   return false\n    }\n    if a%117 == 0 {\n        return false\n    }\n  \
    \  if a%121 == 0 {\n        return false\n    }\n    if a%123 == 0 {\n       \
    \ return false\n    }\n    if a%127 == 0 {\n        return false\n    }\n    if\
    \ a%131 == 0 {\n        return false\n    }\n    if a%133 == 0 {\n        return\
    \ false\n    }\n    if a%137 == 0 {\n        return false\n    }\n    if a%141\
    \ == 0 {\n        return false\n    }\n    if a%143 == 0 {\n        return false\n\
    \    }\n    if a%147 == 0 {\n        return false\n    }\n    if a%151 == 0 {\n\
    \        return false\n    }\n    if a%153 == 0 {\n        return false\n    }\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2m3e8ty_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 0; i < a; i++ {\n \
    \       if a%i*i == a*a*a || a%i*i*i == a*a*a || a%i*i*i*i == a*a*a {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpwf5prqng_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpwf5prqng_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpwf5prqng_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwf5prqng_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpwf5prqng_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1_05u6qi_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return false\n    }\n    \n \
    \   if a%3 == 0 {\n        return false\n    }\n    \n    if a%4 == 0 {\n    \
    \    return false\n    }\n    \n    if a%5 == 0 {\n        return false\n    }\n\
    \    \n    if a%6 == 0 {\n        return false\n    }\n    \n    if a%7 == 0 {\n\
    \        return false\n    }\n    \n    if a%8 == 0 {\n        return false\n\
    \    }\n    \n    if a%9 == 0 {\n        return false\n    }\n    \n    if a%10\
    \ == 0 {\n        return false\n    }\n    \n    if a%11 == 0 {\n        return\
    \ false\n    }\n    \n    if a%12 == 0 {\n        return false\n    }\n    \n\
    \    if a%13 == 0 {\n        return false\n    }\n    \n    if a%14 == 0 {\n \
    \       return false\n    }\n    \n    if a%15 == 0 {\n        return false\n\
    \    }\n    \n    if a%16 == 0 {\n        return false\n    }\n    \n    if a%17\
    \ == 0 {\n        return false\n    }\n    \n    if a%18 == 0 {\n        return\
    \ false\n    }\n    \n    if a%19 == 0 {\n        return false\n    }\n    \n\
    \    if a%20 == 0 {\n        return false\n    }\n    \n    if a%21 == 0 {\n \
    \       return false\n    }\n    \n    if a%22 == 0 {\n        return false\n\
    \    }\n    \n    if a%23 == 0 {\n        return false\n    }\n    \n    if a%24\
    \ == 0 {\n        return false\n    }\n    \n    if a%25 == 0 {\n        return\
    \ false\n    }\n    \n    if a%26 == 0 {\n        return false\n    }\n    \n\
    \    if a%27 == 0 {\n        return false\n    }\n    \n    if a%28 == 0 {\n \
    \       return false\n    }\n    \n    if a%29 == 0 {\n        return false\n\
    \    }\n    \n    if a%30 == 0 {\n        return false\n    }\n    \n    if a%31\
    \ == 0 {\n        return false\n    }\n    \n    if a%32 == 0 {\n        return\
    \ false\n    }\n    \n    if a%33 == 0 {\n        return false\n    }\n    \n\
    \    if a%34 == 0 {\n        return false\n    }\n    \n    if a%35 == 0 {\n \
    \       return false\n    }\n    \n    if a%36 == 0 {\n        return false\n\
    \    }\n    \n    if a%37 == 0 {\n        return false\n    }\n    \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzgq68paz_test.go:161:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 != 0 {\n        return false\n    }\n    if\
    \ a%7 != 0 {\n        return false\n    }\n    if a%11 != 0 {\n        return\
    \ false\n    }\n    if a%13 != 0 {\n        return false\n    }\n    if a%17 !=\
    \ 0 {\n        return false\n    }\n    if a%19 != 0 {\n        return false\n\
    \    }\n    if a%23 != 0 {\n        return false\n    }\n    if a%29 != 0 {\n\
    \        return false\n    }\n    if a%37 != 0 {\n        return false\n    }\n\
    \    if a%41 != 0 {\n        return false\n    }\n    if a%43 != 0 {\n       \
    \ return false\n    }\n    if a%47 != 0 {\n        return false\n    }\n    if\
    \ a%51 != 0 {\n        return false\n    }\n    if a%55 != 0 {\n        return\
    \ false\n    }\n    if a%57 != 0 {\n        return false\n    }\n    if a%61 !=\
    \ 0 {\n        return false\n    }\n    if a%65 != 0 {\n        return false\n\
    \    }\n    if a%67 != 0 {\n        return false\n    }\n    if a%71 != 0 {\n\
    \        return false\n    }\n    if a%73 != 0 {\n        return false\n    }\n\
    \    if a%77 != 0 {\n        return false\n    }\n    if a%81 != 0 {\n       \
    \ return false\n    }\n    if a%83 != 0 {\n        return false\n    }\n    if\
    \ a%87 != 0 {\n        return false\n    }\n    if a%89 != 0 {\n        return\
    \ false\n    }\n    if a%91 != 0 {\n        return false\n    }\n    if a%93 !=\
    \ 0 {\n        return false\n    }\n    if a%95 != 0 {\n        return false\n\
    \    }\n    if a%97 != 0 {\n        return false\n    }\n    if a%101 != 0 {\n\
    \        return false\n    }\n    if a%103 != 0 {\n        return false\n    }\n\
    \    if a%105 != 0 {\n        return false\n    }\n    if a%107 != 0 {\n     \
    \   return false\n    }\n    if a%111 != 0 {\n        return false\n    }\n  \
    \  if a%113 != 0 {\n        return false\n    }\n    if a%115 != 0 {\n       \
    \ return false\n    }\n    if a%117 != 0 {\n        return false\n    }\n    if\
    \ a%121 != 0 {\n        return false\n    }\n    if a%123 != 0 {\n        return\
    \ false\n    }\n    if a%125 != 0 {\n        return false\n    }\n    if a%127\
    \ != 0 {\n        return false\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprb_hzst1_test.go:138:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a\
    \ > 9 && a < 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n  \
    \      return true\n    }\n    if a > 999 && a < 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a < 99999 {\n        return true\n    }\n    if a >\
    \ 99999 && a < 999999 {\n        return true\n    }\n    if a > 999999 && a <\
    \ 9999999 {\n        return true\n    }\n    if a > 9999999 && a < 999999999 {\n\
    \        return true\n    }\n    if a > 999999999 && a < 99999999999 {\n     \
    \   return true\n    }\n    if a > 99999999999 && a < 9999999999999 {\n      \
    \  return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5zad0ezk_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    \n    for i := 0; i < a; i++\
    \ {\n        if a%i == 0 || a%(i*i) == 0 || a%(i*i*i) == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp4i30v0wn_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp4i30v0wn_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp4i30v0wn_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp4i30v0wn_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpax1q56ie_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 9999999999 {\n \
    \       return true\n    }\n    if a > 9999999999 && a <= 99999999999 {\n    \
    \    return true\n    }\n    if a > 99999999999 && a <= 999999999999 {\n     \
    \   return true\n    }\n    if a > 999999999999 && a <= 999999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999999 && a <= 999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999 && a <= 99999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 9999999999999\
    \ {\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrk5mzvl_test.go:104:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a\
    \ > 9 && a < 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n  \
    \      return true\n    }\n    if a > 999 && a < 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a < 99999 {\n        return true\n    }\n    if a >\
    \ 99999 && a < 999999 {\n        return true\n    }\n    if a > 999999 && a <\
    \ 9999999 {\n        return true\n    }\n    if a > 9999999 && a < 999999999 {\n\
    \        return true\n    }\n    if a > 999999999 && a < 99999999999 {\n     \
    \   return true\n    }\n    if a > 99999999999 && a < 999999999999999 {\n    \
    \    return true\n    }\n    if a > 999999999999999 && a < 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a < 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a < 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a < 99999999999999999999999999999999999 {\n        return true\n    }\n \
    \   if a > 99999999999999999999999999999999999 && a < 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a < 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999999999999999999999999999\
    \ && a < 999999999999999999999999999999999999999999999999999 {\n        return\
    \ true\n    }\n    if a > 999999999999999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999999999999999999 {\n        return\
    \ true\n    }\n    if a > 9999999999999999999999999999999999999999999999999999999\
    \ && a < 9999999999999999999999999999999999999999\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppmitf256_test.go:77:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8qj644ha_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8qj644ha_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a%2 == 0 {\n        return true\n    }\n    \n  \
    \  if a%3 == 0 {\n        return true\n    }\n    \n    if a%5 == 0 {\n      \
    \  return true\n    }\n    \n    if a%7 == 0 {\n        return true\n    }\n \
    \   \n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp6fnkl937_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmp6fnkl937_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmp6fnkl937_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmp6fnkl937_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp6fnkl937_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmp6fnkl937_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 || a%3 == 0\
    \ || a%5 == 0 || a%7 == 0 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpan7em6se_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__1 (0.00s)\n        tmpan7em6se_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__2\
    \ (0.00s)\n        tmpan7em6se_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpan7em6se_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpan7em6se_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 == 0 {\n        return true\n    }\n    if a%7\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpnpu3w75r_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpnpu3w75r_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    \n    if a == 1 {\n        return true\n    }\n    \n    if\
    \ a == 2 {\n        return true\n    }\n    \n    if a == 3 {\n        return\
    \ true\n    }\n    \n    if a == 4 {\n        return true\n    }\n    \n    if\
    \ a == 5 {\n        return true\n    }\n    \n    if a == 6 {\n        return\
    \ true\n    }\n    \n    if a == 7 {\n        return true\n    }\n    \n    if\
    \ a == 8 {\n        return true\n    }\n    \n    if a == 9 {\n        return\
    \ true\n    }\n    \n    if a == 10 {\n        return true\n    }\n    \n    if\
    \ a == 11 {\n        return true\n    }\n    \n    if a == 12 {\n        return\
    \ true\n    }\n    \n    if a == 13 {\n        return true\n    }\n    \n    if\
    \ a == 14 {\n        return true\n    }\n    \n    if a == 15 {\n        return\
    \ true\n    }\n    \n    if a == 16 {\n        return true\n    }\n    \n    if\
    \ a == 17 {\n        return true\n    }\n    \n    if a == 18 {\n        return\
    \ true\n    }\n    \n    if a == 19 {\n        return true\n    }\n    \n    if\
    \ a == 20 {\n        return true\n    }\n    \n    if a == 21 {\n        return\
    \ true\n    }\n    \n    if a == 22 {\n        return true\n    }\n    \n    if\
    \ a == 23 {\n        return true\n    }\n    \n    if a == 24 {\n        return\
    \ true\n    }\n    \n    if a == 25 {\n        return true\n    }\n    \n    if\
    \ a == 26 {\n        return true\n    }\n    \n    if a == 27 {\n        return\
    \ true\n    }\n    \n    if a == 28 {\n        return true\n    }\n    \n    if\
    \ a == 29 {\n        return true\n    }\n    \n    if a == 30 {\n        return\
    \ true\n    }\n    \n    if a == 31 {\n        return true\n    }\n    \n    if\
    \ a == 32 {\n        return true\n    }\n    \n    if a == 33 {\n        return\
    \ true\n    }\n    \n    if a == 34 {\n        return true\n    }\n    \n    if\
    \ a == 35 {\n        return true\n    }\n    \n    if a == 36 {\n        return\
    \ true\n    }\n    \n    if a == 37 {\n        return true\n    }\n    \n    if\
    \ a == 38 {\n        return true\n    }\n    \n    if a == 39 {\n        return\
    \ true\n    }\n    \n    if a == 40 {\n        return true\n    }\n    \n    if\
    \ a == 41 {\n        return true\n    }\n    \n    if a == 42 {\n        return\
    \ true\n    }\n    \n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppm01cgsb_test.go:186:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9jg1wuha_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1_05u6qi_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6kszumn_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%1 != 0 {\n       \
    \ return false\n    }\n    if a%2 == 0 {\n        return true\n    }\n    if a%3\
    \ == 0 {\n        return true\n    }\n    if a%4 == 0 {\n        return true\n\
    \    }\n    if a%5 == 0 {\n        return true\n    }\n    if a%6 == 0 {\n   \
    \     return true\n    }\n    if a%7 == 0 {\n        return true\n    }\n    if\
    \ a%8 == 0 {\n        return true\n    }\n    if a%9 == 0 {\n        return true\n\
    \    }\n    if a%10 == 0 {\n        return true\n    }\n    if a%11 == 0 {\n \
    \       return true\n    }\n    if a%12 == 0 {\n        return true\n    }\n \
    \   if a%13 == 0 {\n        return true\n    }\n    if a%14 == 0 {\n        return\
    \ true\n    }\n    if a%15 == 0 {\n        return true\n    }\n    if a%16 ==\
    \ 0 {\n        return true\n    }\n    if a%17 == 0 {\n        return true\n \
    \   }\n    if a%18 == 0 {\n        return true\n    }\n    if a%19 == 0 {\n  \
    \      return true\n    }\n    if a%20 == 0 {\n        return true\n    }\n  \
    \  if a%21 == 0 {\n        return true\n    }\n    if a%22 == 0 {\n        return\
    \ true\n    }\n    if a%23 == 0 {\n        return true\n    }\n    if a%24 ==\
    \ 0 {\n        return true\n    }\n    if a%25 == 0 {\n        return true\n \
    \   }\n    if a%26 == 0 {\n        return true\n    }\n    if a%27 == 0 {\n  \
    \      return true\n    }\n    if a%28 == 0 {\n        return true\n    }\n  \
    \  if a%29 == 0 {\n        return true\n    }\n    if a%30 == 0 {\n        return\
    \ true\n    }\n    if a%31 == 0 {\n        return true\n    }\n    if a%32 ==\
    \ 0 {\n        return true\n    }\n    if a%33 == 0 {\n        return true\n \
    \   }\n    if a%34 == 0 {\n        return true\n    }\n    if a%35 == 0 {\n  \
    \      return true\n    }\n    if a%36 == 0 {\n        return true\n    }\n  \
    \  if a%37 == 0 {\n        return true\n    }\n    if a%38 == 0 {\n        return\
    \ true\n    }\n    if a%39 == 0 {\n        return true\n    }\n    if a%40 ==\
    \ 0 {\n        return true\n    }\n    if a%41 == 0 {\n        return true\n \
    \   }\n    if a%42 == 0 {\n        return true\n    }\n    if a%43 == 0 {\n  \
    \      return true\n    }\n    if \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp81hvyc2i_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 0; i < a; i++ {\n \
    \       if i%3 == 0 || i%5 == 0 || i%7 == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpu5e8a4if_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpu5e8a4if_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpu5e8a4if_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpu5e8a4if_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    b := a\n    for i := 0; i < a; i++ {\n        if i*i*i ==\
    \ b {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpqb4qiz6t_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpqb4qiz6t_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpqb4qiz6t_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a > 3*3*3\
    \ {\n        return false\n    }\n    if a > 5*5*5 {\n        return false\n \
    \   }\n    if a > 7*7*7 {\n        return false\n    }\n    if a > 9*9*9 {\n \
    \       return false\n    }\n    if a > 11*11*11 {\n        return false\n   \
    \ }\n    if a > 13*13*13 {\n        return false\n    }\n    if a > 17*17*17 {\n\
    \        return false\n    }\n    if a > 19*19*19 {\n        return false\n  \
    \  }\n    if a > 23*23*23 {\n        return false\n    }\n    if a > 27*27*27\
    \ {\n        return false\n    }\n    if a > 31*31*31 {\n        return false\n\
    \    }\n    if a > 37*37*37 {\n        return false\n    }\n    if a > 41*41*41\
    \ {\n        return false\n    }\n    if a > 43*43*43 {\n        return false\n\
    \    }\n    if a > 47*47*47 {\n        return false\n    }\n    if a > 53*53*53\
    \ {\n        return false\n    }\n    if a > 59*59*59 {\n        return false\n\
    \    }\n    if a > 61*61*61 {\n        return false\n    }\n    if a > 67*67*67\
    \ {\n        return false\n    }\n    if a > 71*71*71 {\n        return false\n\
    \    }\n    if a > 73*73*73 {\n        return false\n    }\n    if a > 79*79*79\
    \ {\n        return false\n    }\n    if a > 83*83*83 {\n        return false\n\
    \    }\n    if a > 89*89*89 {\n        return false\n    }\n    if a > 97*97*97\
    \ {\n        return false\n    }\n    if a > 103*103*103 {\n        return false\n\
    \    }\n    if a > 109*109*109 {\n        return false\n    }\n    if a > 115*115*115\
    \ {\n        return false\n    }\n    if a > 121*121*121 {\n        return false\n\
    \    }\n    if a > 127*127*127 {\n        return false\n    }\n    if a > 131*131*131\
    \ {\n        return false\n    }\n    if a > 137*137*137 {\n        return false\n\
    \    }\n    if a > 143*143*143 {\n        return false\n    }\n    if \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ur2ov8__test.go:119:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    b := a\n    c := a\n    d := a\n    \n    e := a\n \
    \   f := a\n    g := a\n    \n    h := a\n    i := a\n    j := a\n    \n    k\
    \ := a\n    l := a\n    m := a\n    \n    n := a\n    o := a\n    p := a\n   \
    \ \n    q := a\n    r := a\n    s := a\n    \n    t := a\n    u := a\n    v :=\
    \ a\n    \n    w := a\n    x := a\n    y := a\n    \n    z := a\n    \n    if\
    \ b == c {\n        if b == d {\n            if b == e {\n                if b\
    \ == f {\n                    if b == g {\n                        if b == h {\n\
    \                            if b == i {\n                                if b\
    \ == j {\n                                    if b == k {\n                  \
    \                      if b == l {\n                                         \
    \   if b == m {\n                                                if b == n {\n\
    \                                                    if b == o {\n           \
    \                                             if b == p {\n                  \
    \                                          if b == q {\n                     \
    \                                           if b == r {\n                    \
    \                                                if b == s {\n               \
    \                                                         if b == t {\n      \
    \                                                                      if b ==\
    \ u {\n                                                                      \
    \          if b == v {\n                                                     \
    \                               if b == w {\n                                \
    \                                                        if b == x {\n       \
    \                                                                            \
    \         if b == y {\n                                                      \
    \                                          if b == z {\n                     \
    \                                                                            \
    \   return true\n                                                            \
    \                                    }\n                                     \
    \                                                           return false\n   \
    \                                                                            \
    \             }\n                                                            \
    \                                return false\n                              \
    \                                                          }\n               \
    \                                                                         return\
    \ false\n                                                                    \
    \                }\n                                                         \
    \                           return false\n                                   \
    \                                             }\n                            \
    \                                                    return false\n          \
    \                                                                  }\n       \
    \                                                                     return false\n\
    \                                                                        }\n \
    \                                                                       return\
    \ false\n                                                                    }\n\
    \                                                                    return false\n\
    \                                                                }\n         \
    \                                                       return false\n       \
    \                                                     }\n                    \
    \                                        return false\n                      \
    \                                  }\n                                       \
    \                 return false\n                                             \
    \       }\n                                                    return false\n\
    \                                                }\n                         \
    \                       return false\n                                       \
    \     }\n                                            return false\n          \
    \                              }\n                                        return\
    \ false\n                                    }\n                             \
    \       return false\n                                }\n                    \
    \            return false\n                            }\n                   \
    \         return false\n                        }\n                        return\
    \ false\n                    }\n                    return false\n           \
    \     }\n                return false\n            }\n            return false\n\
    \        }\n        return false\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp9g872mr__test.go:146: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp9g872mr__test.go:146:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmp9g872mr__test.go:146: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp9g872mr__test.go:146:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmp9g872mr__test.go:146: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 {\n       \
    \ return false\n    }\n    if a%5 == 0 {\n        return true\n    }\n    if a%7\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpnpu3w75r_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpnpu3w75r_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpnpu3w75r_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n \
    \   \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a >\
    \ 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999\
    \ {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n     \
    \   return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n  \
    \  }\n    \n    if a > 999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 9999999999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 9999999999999 {\n    \
    \    return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_v8fhksx_test.go:123:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 1 {\n        return\
    \ false\n    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n\
    \        return true\n    }\n    if a <= 9 {\n        return true\n    }\n   \
    \ if a <= 12 {\n        return true\n    }\n    if a <= 15 {\n        return true\n\
    \    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n     \
    \   return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a\
    \ <= 27 {\n        return true\n    }\n    if a <= 30 {\n        return true\n\
    \    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n     \
    \   return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a\
    \ <= 42 {\n        return true\n    }\n    if a <= 45 {\n        return true\n\
    \    }\n    if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n     \
    \   return true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a\
    \ <= 57 {\n        return true\n    }\n    if a <= 60 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n     \
    \   return true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a\
    \ <= 72 {\n        return true\n    }\n    if a <= 75 {\n        return true\n\
    \    }\n    if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n     \
    \   return true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a\
    \ <= 87 {\n        return true\n    }\n    if a <= 90 {\n        return true\n\
    \    }\n    if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n     \
    \   return true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a\
    \ <= 102 {\n        return true\n    }\n    if a <= 105 {\n        return true\n\
    \    }\n    if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n   \
    \     return true\n    }\n    if a <= 114 {\n        return true\n    }\n    if\
    \ a <= 117 {\n        return true\n    }\n    if a <= 120 {\n        return true\n\
    \    }\n    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n   \
    \     return true\n    }\n    if a <= 129 {\n        return true\n    }\n    if\
    \ a <= 132 {\n        return true\n    }\n    if a <= 135 {\n        return true\n\
    \    }\n    if a <= 138 {\n        return true\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0tgl2_rk_test.go:153:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 6; i >= 1; i-- {\n\
    \        if a%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp49afb3bq_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp49afb3bq_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp49afb3bq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    return a%a%a%a == 0\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 4 [running]:\n\
    testing.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.iscube(...)\n\t/tmp/tmp627iumem_test.go:13\n\
    command-line-arguments_test.TestIscube(0x0?)\n\t/tmp/tmp627iumem_test.go:29 +0x12\n\
    testing.tRunner(0xc00019e000, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 9999999999 {\n \
    \       return true\n    }\n    if a > 9999999999 && a <= 99999999999 {\n    \
    \    return true\n    }\n    if a > 99999999999 && a <= 999999999999999 {\n  \
    \      return true\n    }\n    if a > 999999999999999 && a <= 9999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999 && a <= 99999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999 && a <= 999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999 && a <=\
    \ 9999999999999999999999999999999 {\n        return true\n    }\n    if a > 9999999999999999999999999999999\
    \ && a <= 99999999999999999999999999999999999 {\n        return true\n    }\n\
    \    if a > 99999999999999999999999999999999999 && a <= 999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999999999999999999999999999\
    \ && a <= 9999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 9999999999999999999999999999999999999999999 && a <= 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999999999999999999999999999999999\
    \ && a <= 99999999999999999999999999999999999999999999999 {\n        return true\n\
    \    }\n    if a > 99999999999999999999999999999999999999999999999 && a <= 99999999999999999999999999999999999999999999999\
    \ {\n        return true\n    }\n    if a > 99999999999999999999999999999999999999999999999\
    \ && a <= 99999999\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcilul_ob_test.go:80:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 100 {\n        return true\n    }\n    if\
    \ a > 100 && a < 1000 {\n        return true\n    }\n    if a > 1000 && a < 10000\
    \ {\n        return true\n    }\n    if a > 10000 && a < 100000 {\n        return\
    \ true\n    }\n    if a > 100000 && a < 1000000 {\n        return true\n    }\n\
    \    if a > 1000000 && a < 10000000 {\n        return true\n    }\n    if a >\
    \ 10000000 && a < 100000000 {\n        return true\n    }\n    if a > 100000000\
    \ && a < 1000000000 {\n        return true\n    }\n    if a > 1000000000 && a\
    \ < 10000000000 {\n        return true\n    }\n    if a > 10000000000 && a < 100000000000\
    \ {\n        return true\n    }\n    if a > 100000000000 && a < 1000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000 && a < 10000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000 && a < 100000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000 && a < 1000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000 && a < 10000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000 && a < 100000000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000000 && a < 1000000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000000 && a < 10000000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000000 && a < 100000000000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000000000 && a < 1000000000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000000000 && a < 10000000000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000000000 && a < 100000000000000000000000\
    \ {\n        return true\n    }\n    if a > 100000000000000000000000 && a < 1000000000000000000000000\
    \ {\n        return true\n    }\n    if a > 1000000000000000000000000 && a < 10000000000000000000000000\
    \ {\n        return true\n    }\n    if a > 10000000000000000000000000 && a <\
    \ 100000000000000000000000000 {\n        return true\n    }\n    if a > 100000000000000000000000000\
    \ && a < 1000000000000000000000000000 {\n        return true\n    }\n    if a\
    \ > 1000000000000000000000000000 && a < 10000000000000000000000000000 {\n    \
    \    return true\n    }\n    if a > 1000000000000000000\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbqhnwryb_test.go:98:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpax1q56ie_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 1 {\n        return\
    \ false\n    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 5 {\n\
    \        return true\n    }\n    if a <= 7 {\n        return true\n    }\n   \
    \ if a <= 9 {\n        return true\n    }\n    if a <= 11 {\n        return true\n\
    \    }\n    if a <= 13 {\n        return true\n    }\n    if a <= 15 {\n     \
    \   return true\n    }\n    if a <= 17 {\n        return true\n    }\n    if a\
    \ <= 19 {\n        return true\n    }\n    if a <= 21 {\n        return true\n\
    \    }\n    if a <= 23 {\n        return true\n    }\n    if a <= 25 {\n     \
    \   return true\n    }\n    if a <= 27 {\n        return true\n    }\n    if a\
    \ <= 29 {\n        return true\n    }\n    if a <= 31 {\n        return true\n\
    \    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 35 {\n     \
    \   return true\n    }\n    if a <= 37 {\n        return true\n    }\n    if a\
    \ <= 39 {\n        return true\n    }\n    if a <= 41 {\n        return true\n\
    \    }\n    if a <= 43 {\n        return true\n    }\n    if a <= 45 {\n     \
    \   return true\n    }\n    if a <= 47 {\n        return true\n    }\n    if a\
    \ <= 49 {\n        return true\n    }\n    if a <= 51 {\n        return true\n\
    \    }\n    if a <= 53 {\n        return true\n    }\n    if a <= 55 {\n     \
    \   return true\n    }\n    if a <= 57 {\n        return true\n    }\n    if a\
    \ <= 59 {\n        return true\n    }\n    if a <= 61 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 65 {\n     \
    \   return true\n    }\n    if a <= 67 {\n        return true\n    }\n    if a\
    \ <= 69 {\n        return true\n    }\n    if a <= 71 {\n        return true\n\
    \    }\n    if a <= 73 {\n        return true\n    }\n    if a <= 75 {\n     \
    \   return true\n    }\n    if a <= 77 {\n        return true\n    }\n    if a\
    \ <= 79 {\n        return true\n    }\n    if a <= 81 {\n        return true\n\
    \    }\n    if a <= 83 {\n        return true\n    }\n    if a <= 85 {\n     \
    \   return true\n    }\n    if a <= 87 {\n        return true\n    }\n    if a\
    \ <= 89 {\n        return true\n    }\n    if a <= 91 {\n        return true\n\
    \    }\n    if a <= 93 {\n        return true\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk2294v7_test.go:153:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%3 != 0 || a%5 != 0\
    \ || a%7 != 0 {\n        return false\n    }\n    for i := 0; i < a; i++ {\n \
    \       if a%i == 0 || a%(i*i) == 0 || a%(i*i*i) == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp02rp5w5o_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp02rp5w5o_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp02rp5w5o_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp02rp5w5o_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a > 9 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1a32twd_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%1 != 0 {\n       \
    \ return false\n    }\n    if a%2 == 0 {\n        return false\n    }\n    if\
    \ a%3 == 0 {\n        return false\n    }\n    if a%4 == 0 {\n        return false\n\
    \    }\n    if a%5 == 0 {\n        return false\n    }\n    if a%6 == 0 {\n  \
    \      return false\n    }\n    if a%7 == 0 {\n        return false\n    }\n \
    \   if a%8 == 0 {\n        return false\n    }\n    if a%9 == 0 {\n        return\
    \ false\n    }\n    if a%10 == 0 {\n        return false\n    }\n    if a%11 ==\
    \ 0 {\n        return false\n    }\n    if a%12 == 0 {\n        return false\n\
    \    }\n    if a%13 == 0 {\n        return false\n    }\n    if a%14 == 0 {\n\
    \        return false\n    }\n    if a%15 == 0 {\n        return false\n    }\n\
    \    if a%16 == 0 {\n        return false\n    }\n    if a%17 == 0 {\n       \
    \ return false\n    }\n    if a%18 == 0 {\n        return false\n    }\n    if\
    \ a%19 == 0 {\n        return false\n    }\n    if a%20 == 0 {\n        return\
    \ false\n    }\n    if a%21 == 0 {\n        return false\n    }\n    if a%22 ==\
    \ 0 {\n        return false\n    }\n    if a%23 == 0 {\n        return false\n\
    \    }\n    if a%24 == 0 {\n        return false\n    }\n    if a%25 == 0 {\n\
    \        return false\n    }\n    if a%26 == 0 {\n        return false\n    }\n\
    \    if a%27 == 0 {\n        return false\n    }\n    if a%28 == 0 {\n       \
    \ return false\n    }\n    if a%29 == 0 {\n        return false\n    }\n    if\
    \ a%30 == 0 {\n        return false\n    }\n    if a%31 == 0 {\n        return\
    \ false\n    }\n    if a%32 == 0 {\n        return false\n    }\n    if a%33 ==\
    \ 0 {\n        return false\n    }\n    if a%34 == 0 {\n        return false\n\
    \    }\n    if a%35 == 0 {\n        return false\n    }\n    if a%36 == 0 {\n\
    \        return false\n    }\n    if a%37 == 0 {\n        return false\n    }\n\
    \    if a%38 == 0 {\n        return false\n    }\n    if a%39 == 0 {\n       \
    \ return false\n    }\n    if a%40 == 0 {\n        return false\n    }\n    if\
    \ a%41 == 0 {\n        return false\n    }\n    if a%42 == 0 {\n        return\
    \ false\n    }\n    if a%43 == 0 {\n        return false\n    }\n    if \nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbli71_4h_test.go:143:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 1 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a == 1 {\n\
    \        return true\n    }\n    if a == 2 {\n        return true\n    }\n   \
    \ if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return true\n\
    \    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n    }\n\
    \    if a == 10 {\n        return true\n    }\n    if a == 11 {\n        return\
    \ true\n    }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n\
    \        return true\n    }\n    if a == 14 {\n        return true\n    }\n  \
    \  if a == 15 {\n        return true\n    }\n    if a == 16 {\n        return\
    \ true\n    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n\
    \        return true\n    }\n    if a == 19 {\n        return true\n    }\n  \
    \  if a == 20 {\n        return true\n    }\n    if a == 21 {\n        return\
    \ true\n    }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 24 {\n        return true\n    }\n  \
    \  if a == 25 {\n        return true\n    }\n    if a == 26 {\n        return\
    \ true\n    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 30 {\n        return true\n    }\n    if a == 31 {\n        return\
    \ true\n    }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n\
    \        return true\n    }\n    if a == 34 {\n        return true\n    }\n  \
    \  if a == 35 {\n        return true\n    }\n    if a == 36 {\n        return\
    \ true\n    }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n\
    \        return true\n    }\n    if a == 39 {\n        return true\n    }\n  \
    \  if a == 40 {\n        return true\n    }\n    if a == 41 {\n        return\
    \ true\n    }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 44 {\n        return true\n    }\n  \
    \  if a == 45 {\n        return true\n    }\n    if a == 46 {\n        return\
    \ true\n    }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n\
    \        return true\n    }\n    if a == 49 {\n        return true\n    }\n  \
    \  if a == 50 {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6kszumn_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj8psn3a_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a < 9 {\n        return true\n    }\n    if a\
    \ > 9 && a < 99 {\n        return true\n    }\n    if a > 99 && a < 999 {\n  \
    \      return true\n    }\n    if a > 999 && a < 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a < 99999 {\n        return true\n    }\n    if a >\
    \ 99999 && a < 999999 {\n        return true\n    }\n    if a > 999999 && a <\
    \ 9999999 {\n        return true\n    }\n    if a > 9999999 && a < 999999999 {\n\
    \        return true\n    }\n    if a > 999999999 && a < 99999999999 {\n     \
    \   return true\n    }\n    if a > 99999999999 && a < 9999999999999 {\n      \
    \  return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n   \
    \     return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a < 999999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n    if a > 999999999999999 && a < 9999999999999 {\n\
    \        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeft0a34s_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n        return true\n    }\n    if a == 51 {\n        return true\n  \
    \  }\n    if a == 52 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdi8bi1u_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a%2 == 0 && a%3 == 0\
    \ && a%4 == 0 && a%5 == 0 && a%6 == 0 && a%7 == 0 && a%8 == 0 && a%9 == 0 && a%10\
    \ == 0 && a%11 == 0 && a%12 == 0 && a%13 == 0 && a%14 == 0 && a%15 == 0 && a%16\
    \ == 0 && a%17 == 0 && a%18 == 0 && a%19 == 0 && a%20 == 0 && a%21 == 0 && a%22\
    \ == 0 && a%23 == 0 && a%24 == 0 && a%25 == 0 && a%26 == 0 && a%27 == 0 && a%28\
    \ == 0 && a%29 == 0 && a%30 == 0 && a%31 == 0 && a%32 == 0 && a%33 == 0 && a%34\
    \ == 0 && a%35 == 0 && a%36 == 0 && a%37 == 0 && a%38 == 0 && a%39 == 0 && a%40\
    \ == 0 && a%41 == 0 && a%42 == 0 && a%43 == 0 && a%44 == 0 && a%45 == 0 && a%46\
    \ == 0 && a%47 == 0 && a%48 == 0 && a%49 == 0 && a%50 == 0 && a%51 == 0 && a%52\
    \ == 0 && a%53 == 0 && a%54 == 0 && a%55 == 0 && a%56 == 0 && a%57 == 0 && a%58\
    \ == 0 && a%59 == 0 && a%60 == 0 && a%61 == 0 && a%62 == 0 && a%63 == 0 && a%64\
    \ == 0 && a%65 == 0 && a%66 == 0 && a%67 == 0 && a%68 == 0 && a%69 == 0 && a%70\
    \ == 0 && a%71 == 0 && a%72 == 0 && a%73 == 0 && a%74 == 0 && a%75 == 0 && a%76\
    \ == 0 && a%77 == 0 && a%78 == 0 && a%79 == 0 && a%80 == 0 && a%81 == 0 && a%82\
    \ == 0 && a%83 == 0 && a%84 == 0 && a%85 == 0 && a%86 == 0 && a%87 == 0 && a%88\
    \ == 0 && a%89 == 0 && a%90 == 0 && a%91 == 0 && a%92 == 0 && a%93 == 0 && a%94\
    \ == 0 && a%95 == 0 && a%96 == 0 && a%97 == 0 && a%98 == 0 && a%99 == 0 && a%100\
    \ == 0 && a%101 == 0 && a%102 == 0 && a%103 == 0 && a%104 == 0 && \nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyu7p3hgp_test.go:14:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 100 {\n        return false\n    }\n    if a > 1000\
    \ {\n        return false\n    }\n    if a > 10000 {\n        return false\n \
    \   }\n    if a > 100000 {\n        return false\n    }\n    if a > 1000000 {\n\
    \        return false\n    }\n    if a > 10000000 {\n        return false\n  \
    \  }\n    if a > 100000000 {\n        return false\n    }\n    if a > 1000000000\
    \ {\n        return false\n    }\n    if a > 10000000000 {\n        return false\n\
    \    }\n    if a > 100000000000 {\n        return false\n    }\n    if a > 1000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000 {\n        return\
    \ false\n    }\n    if a > 100000000000000 {\n        return false\n    }\n  \
    \  if a > 1000000000000000 {\n        return false\n    }\n    if a > 10000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000 {\n        return false\n    }\n\
    \    if a > 10000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000 {\n        return false\n\
    \    }\n    if a > 100000000000000000000000 {\n        return false\n    }\n \
    \   if a > 1000000000000000000000000 {\n        return false\n    }\n    if a\
    \ > 10000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 100000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 10000000000000000000000000000000 {\n      \
    \  return false\n    }\n    if a > 100000000000000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 1000000000000000000000000000000000 {\n   \
    \     return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5g6emmk_test.go:132:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a < 0 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n\
    \        return true\n    }\n    if a == 3 {\n        return true\n    }\n   \
    \ if a == 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n\
    \    }\n    if a == 6 {\n        return true\n    }\n    if a == 7 {\n       \
    \ return true\n    }\n    if a == 8 {\n        return true\n    }\n    if a ==\
    \ 9 {\n        return true\n    }\n    if a == 10 {\n        return true\n   \
    \ }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return true\n    }\n  \
    \  if a == 51 {\n        return \nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg293kxt0_test.go:168:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    \n    if a > 0 && a <= 9 {\n        return true\n    }\n \
    \   \n    if a > 9 && a <= 99 {\n        return true\n    }\n    \n    if a >\
    \ 99 && a <= 999 {\n        return true\n    }\n    \n    if a > 999 && a <= 9999\
    \ {\n        return true\n    }\n    \n    if a > 9999 && a <= 99999 {\n     \
    \   return true\n    }\n    \n    if a > 99999 && a <= 999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999 && a <= 9999999 {\n        return true\n\
    \    }\n    \n    if a > 9999999 && a <= 999999999 {\n        return true\n  \
    \  }\n    \n    if a > 999999999 && a <= 9999999999 {\n        return true\n \
    \   }\n    \n    if a > 9999999999 && a <= 99999999999 {\n        return true\n\
    \    }\n    \n    if a > 99999999999 && a <= 999999999999 {\n        return true\n\
    \    }\n    \n    if a > 999999999999 && a <= 999999999999999 {\n        return\
    \ true\n    }\n    \n    if a > 999999999999999 && a <= 999999999999999999 {\n\
    \        return true\n    }\n    \n    if a > 999999999999999999 && a <= 99999999999999999\
    \ {\n        return true\n    }\n    \n    if a > 99999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    \n    if a > 9999999999999 && a <= \nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6b2t2do6_test.go:122:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\nfunc iscube(a int) bool {\n    if a <= 0 {\n        return\
    \ false\n    }\n    if a > 0 && a <= 9 {\n        return true\n    }\n    if a\
    \ > 9 && a <= 99 {\n        return true\n    }\n    if a > 99 && a <= 999 {\n\
    \        return true\n    }\n    if a > 999 && a <= 9999 {\n        return true\n\
    \    }\n    if a > 9999 && a <= 99999 {\n        return true\n    }\n    if a\
    \ > 99999 && a <= 999999 {\n        return true\n    }\n    if a > 999999 && a\
    \ <= 9999999 {\n        return true\n    }\n    if a > 9999999 && a <= 999999999\
    \ {\n        return true\n    }\n    if a > 999999999 && a <= 99999999999 {\n\
    \        return true\n    }\n    if a > 99999999999 && a <= 9999999999999 {\n\
    \        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n    if a > 9999999999999 && a <= 999999999999999\
    \ {\n        return true\n    }\n    if a > 999999999999999 && a <= 9999999999999\
    \ {\n        return true\n    }\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbj7px790_test.go:101:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
