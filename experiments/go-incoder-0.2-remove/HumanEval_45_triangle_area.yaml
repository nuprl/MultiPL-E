name: HumanEval_45_triangle_area
language: go_test.go
prompt: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given length of a side and high return area for a triangle.\nfunc triangle_area(a\
  \ int, h int) float64 {\n"
tests: "func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2,\
  \ 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    switch\
    \ {\n    case a < 0 || h < 0 || a > h || a == h:\n        return 0.0\n    case\
    \ a == h:\n        return 1.0\n    case a < h:\n        return 0.5 * triangle_area(a\
    \ - h, h) + 0.5 * triangle_area(a - h, a + h)\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    switch {\n    case a > h:\n        return 0.0\n    case a == h:\n \
    \       return 1.0\n    case a < h:\n        return 0.5 * triangle_area(a - h,\
    \ h) + 0.5 * triangle_area(a - h, a - h)\n    }\n}\n", "    switch {\n    case\
    \ a < 0 || a > h || h < 0: return 0\n    case a == h: return 1\n    default: return\
    \ (a + h) * (a + h - 1) * (h - a + 1)\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0 || a >\
    \ h || a == h:\n        return 0.0\n    case a == h:\n        return 1.0\n   \
    \ case a < h:\n        return 0.5 * triangle_area(a - h, h) + 0.5 * triangle_area(a\
    \ - h, a + h)\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0\
    \ || a > h || a == h:\n        return 0.0\n    case a == h:\n        return 1.0\n\
    \    case a < h:\n        return 0.5 * triangle_area(a - h, h) + 0.5 * triangle_area(a\
    \ - h, a + h)\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0\
    \ || a > h || a == h:\n        return 0.0\n    case a == h:\n        return 1.0\n\
    \    case a > h:\n        return 2.0 * triangle_area(a - h, h) / float64(h)\n\
    \    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a * h) / 4.0\n\
    }\n", "    return float64(a*h)/2\n}\n", "    area := float64(a*h) / 2\n    return\
    \ area\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0 || a >\
    \ h || a == h:\n        return 0.0\n    case a == h:\n        return 1.0\n   \
    \ default:\n        return 0.5 * triangle_area(a - 1, h) + 0.5 * triangle_area(a\
    \ + 1, h)\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a * h) / 2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0 || a > h || a ==\
    \ h:\n        return 0.0\n    case a < h:\n        return 0.5 * triangle_area(a\
    \ - h, h)\n    case a > h:\n        return 0.5 * triangle_area(a - h, h) + 0.5\
    \ * triangle_area(a - h, h - a)\n    }\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    area := float64(a) * float64(h) / 2\n    return area\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  area := float64(a*h) / 2\n    return area\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a * h) / 2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    area := float64(a + h) * (float64(a + h) + float64(h))\n\
    \    return area / 2\n}\n", "    return float64(a*h)/2\n}\n", "    area := float64(a*h)\
    \ / 2\n    return area\n}\n", "    return float64(a*h)/2\n}\n", "    switch {\n\
    \    case a < 0 || h < 0 || a > h || a == h:\n        return 0.0\n    case a ==\
    \ h:\n        return 1.0\n    case a < h:\n        return 0.5 * triangle_area(a\
    \ - h, h) + 0.5 * triangle_area(a - h, a + h)\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    switch {\n    case a > h:\n        return 0.0\n    case a == h:\n \
    \       return 1.0\n    case a < h:\n        return 0.5 * (a + h)\n    }\n}\n",
  "    return float64(a*h)/2\n}\n", "    area := float64(a) * float64(h) / 2\n   \
    \ return area\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a *\
    \ h) / float64(6)\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    switch {\n    case a < 0 || h < 0 || a > h || a == h:\n        return\
    \ 0.0\n    case a < 3:\n        return 1.0\n    case a == h:\n        return 2.0\n\
    \    case a > h:\n        return 2.0 * h / a\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0:\
    \ return 0\n    case a == 0 || h == 0: return 1\n    default:\n        return\
    \ float64(a*h)/2\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    area :=\
    \ float64(a + h) * (float64(a + h) + float64(h))\n    return area / 2\n}\n", " \
    \   return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    switch\
    \ {\n    case a < 0 || h < 0 || a > h || a > 2*h:\n        return 0.0\n    case\
    \ a == h:\n        return 1.0\n    case a < h:\n        return 0.5 * triangle_area(a\
    \ - h, h) + 0.5 * triangle_area(a - h, h - a)\n    }\n}\n", "    area := float64(0)\
    \ // area of triangle\n    if a > 0 && h > 0 {\n        area = float64(a*h)/2\n\
    \    }\n    return area\n}\n", "    return float64(a*h)/2\n}\n", "    switch {\n\
    \    case a < 0 || h < 0 || a > h || a == h:\n        return 0.0\n    case a ==\
    \ h:\n        return 1.0\n    case a > h:\n        return 2.0 * triangle_area(a\
    \ - h, h) / float64(h)\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a * h) / 2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    area := float64(a*h) / 2\n    return area\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    switch {\n    case a < h:\n        return 0.0\n    case\
    \ a > h:\n        return 0.0\n    case a == h:\n        return 1.0\n    }\n  \
    \  \n    switch {\n    case a < h:\n        return 0.5 * triangle_area(a - h,\
    \ h) * triangle_area(a - h, h) / a\n    case a > h:\n        return 0.5 * triangle_area(a\
    \ - h, h) * triangle_area(a - h, h) / a\n    case a == h:\n        return 0.5\
    \ * triangle_area(a - h, h) * triangle_area(a - h, h) / a\n    }\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0:\
    \ // invalid input\n        return 0.0\n    case a == 0 || h == 0:\n        return\
    \ 1.0\n    case a < h:\n        return 0.5 * triangle_area(a - 1, h) + 0.5 * triangle_area(a\
    \ - 1, h - a)\n    default:\n        return 0.5 * triangle_area(a - 1, h - a)\n\
    \    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    switch\
    \ {\n    case a > h:\n        return 0.0\n    case a < h:\n        return 1.0\n\
    \    case a == h:\n        return 0.5\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a * h) / 2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a * h) / 2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    s := a * h / 2\n    return float64(s * s)\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    switch {\n    case a < 0 || h < 0 || a > h || a == h:\n        return\
    \ 0.0\n    case a == h:\n        return 1.0\n    case a > h:\n        return 2.0\
    \ * triangle_area(a - h, h) / float64(h)\n    }\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  area := float64(a*h) / 2\n    return area\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    area := float64(a*h)/2\n\
    \    return area\n}\n", "    return float64(a*h)/2\n}\n", "    area := float64(a*h)\
    \ / 2\n    return area\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    switch {\n    case a > h:\n     \
    \   return 0.0\n    case a == h:\n        return 1.0\n    case a < h:\n      \
    \  return 0.5 * triangle_area(a - h, h) + 0.5 * triangle_area(a - h, a + h)\n\
    \    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0 || a > h || a ==\
    \ h:\n        return 0.0\n    case a == h:\n        return 1.0\n    case a > h:\n\
    \        return 2.0 * triangle_area(a - h, h) / float64(h)\n    }\n}\n", "   \
    \ return float64(a*h)/2\n}\n", "    switch {\n    case a < 0 || h < 0 || a > h\
    \ || a == h:\n        return 0.0\n    case a == h:\n        return 1.0\n    }\n\
    \    \n    switch {\n    case a < h:\n        return 0.5 * triangle_area(a - h,\
    \ h)\n    case a > h:\n        return 0.5 * triangle_area(a - h, h) + 0.5 * triangle_area(a\
    \ - h, h - a)\n    }\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    switch {\n    case a < 0 || h < 0 || a > h || a == h:\n        return\
    \ 0.0\n    case a == h:\n        return 1.0\n    default:\n        return 0.5\
    \ * triangle_area(a - 1, h) + 0.5 * triangle_area(a + 1, h)\n    }\n}\n", "  \
    \  return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n", "  \
    \  s := float64(a) * float64(h) / 2\n    return s * s\n}\n", "    return float64(a*h)/2\n\
    }\n", "    area := float64(a) * float64(h) / 2\n    return area\n}\n", "    return\
    \ float64(a*h)/2\n}\n", "    return float64(a*h)/2\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
