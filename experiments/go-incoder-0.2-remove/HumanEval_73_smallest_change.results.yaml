language: go_test.go
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    min := 0\n    max := n\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    \
    \    if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if min\
    \ > max {\n        return n\n    }\n    max -= min\n    if max < 2 {\n       \
    \ return n\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n \
    \           max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    if min > max {\n        return n\n    }\n  \
    \  max -= min\n    if max < 2 {\n        return n\n    }\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    max -= min\n    if max < 2 {\n   \
    \     return n\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    if min > max {\n        return n\n    }\n  \
    \  max -= min\n    if max < 2 {\n        return n\n    }\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    max -= min\n    if max < 2 {\n   \
    \     return n\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    if min > max {\n        return n\n    }\n  \
    \  max -= min\n    if max < 2 {\n        return n\n    }\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    max -= min\n    if max < 2 {\n   \
    \     return n\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max \n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaoq940ew_test.go:128:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w8j5o0j_test.go:45: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w8j5o0j_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w8j5o0j_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w8j5o0j_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w8j5o0j_test.go:45: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w8j5o0j_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w8j5o0j_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w8j5o0j_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n-1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            min = i\n     \
    \       max = n-1\n            break\n        }\n    }\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] < arr[min] {\n            min = i\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n            max\
    \ = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpog2o3hgg_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpog2o3hgg_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpog2o3hgg_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpog2o3hgg_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpog2o3hgg_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpog2o3hgg_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return len(arr)\n    }\n    min\
    \ := len(arr)\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = min(min, j-i)\n\
    \                break\n            }\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjyajp8z_test.go:20:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = i\n            break\n        }\n  \
    \  }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpszmfa23h_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpszmfa23h_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpszmfa23h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpszmfa23h_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpszmfa23h_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpszmfa23h_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpszmfa23h_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpszmfa23h_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return len(arr)\n    }\n    min\
    \ := len(arr)\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] !=\
    \ arr[len(arr)-i-1] {\n            min = i\n            break\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpy6uy9p1k_test.go:46: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpy6uy9p1k_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpy6uy9p1k_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpy6uy9p1k_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpy6uy9p1k_test.go:46: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpy6uy9p1k_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpy6uy9p1k_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] != arr[max] {\n            min\
    \ = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpktpc2ju7_test.go:20\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpktpc2ju7_test.go:40\
    \ +0x9e6\ntesting.tRunner(0xc0001124e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n     \
    \   for j := len(arr) - 1 - i; j < len(arr); j++ {\n            if arr[j] != arr[j]\
    \ {\n                count++\n                break\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgru8bu0q_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgru8bu0q_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgru8bu0q_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgru8bu0q_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpgru8bu0q_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var k int\n    var l int\n \
    \   var m int\n    var n int\n    var o int\n    var p int\n    var q int\n  \
    \  var r int\n    var s int\n    var t int\n    var u int\n    var v int\n   \
    \ var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var\
    \ b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g\
    \ int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var a int\n   \
    \ var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var\
    \ g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8kmoh2g9_test.go:142:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += arr[j] - arr[i]\n            }\n    \
    \    }\n        if result > 0 {\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2d3uoypm_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2d3uoypm_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2d3uoypm_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2d3uoypm_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp2d3uoypm_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := arr[i]\n        if result > 0 {\n            result -= result %\
    \ 10\n        }\n        if result < 0 {\n            result += 10\n        }\n\
    \        if result != 0 {\n            result += 1\n        }\n        if result\
    \ != arr[len(arr)-i-1] {\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphv5q76sn_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphv5q76sn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphv5q76sn_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphv5q76sn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmphv5q76sn_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return len(arr)\n    }\n    start\
    \ := 0\n    end := len(arr) - 1\n    min := len(arr)\n    for start < end {\n\
    \        if arr[start] != arr[end] {\n            min = min(min, end - start +\
    \ 1)\n        }\n        start += 1\n        end -= 1\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptt2oxrh4_test.go:21:19: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    return 0\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpl_crh4fh_test.go:42: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpl_crh4fh_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpl_crh4fh_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpl_crh4fh_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpl_crh4fh_test.go:42: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpl_crh4fh_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ != arr[len(arr)-1-j] {\n                result += 1\n            }\n       \
    \ }\n        if result > 1 {\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpy2k243ao_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpy2k243ao_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpy2k243ao_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpy2k243ao_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpy2k243ao_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return len(arr)\n    }\n    min\
    \ := len(arr)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[min]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpg2eth0f9_test.go:18\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpg2eth0f9_test.go:32\
    \ +0x806\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return min\n    }\n    min += min\
    \ / 2\n    max -= max / 2\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return min\n    }\n    return min\
    \ + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_d2bidzf_test.go:64: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_d2bidzf_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_d2bidzf_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_d2bidzf_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_d2bidzf_test.go:64: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_d2bidzf_test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1]\
    \ {\n            min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk_i8y7vx_test.go:46: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk_i8y7vx_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk_i8y7vx_test.go:46: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk_i8y7vx_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpk_i8y7vx_test.go:46: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpk_i8y7vx_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpk_i8y7vx_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpk_i8y7vx_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: null
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min == max {\n        return n\n    }\n\
    \    min += 1\n    max -= 1\n    i := 0\n    j := n - 1\n    change := 0\n   \
    \ for i < max && j >= min {\n        if arr[i] > arr[j] {\n            change\
    \ += 1\n            arr[i] = arr[j]\n            arr[j] = arr[i]\n           \
    \ i++\n            j--\n        }\n        if arr[i] < arr[j] {\n            change\
    \ += 1\n            arr[i] = arr[j]\n            arr[j] = arr[i]\n           \
    \ j--\n        }\n    }\n    return change\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075439
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp662xyjmq_test.go:19\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp662xyjmq_test.go:41\
    \ +0x774\ntesting.tRunner(0xc000192680, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ != arr[len(arr)-j-1] {\n                result += j\n            }\n       \
    \ }\n        if result > i {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpu2dk5lgk_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpu2dk5lgk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpu2dk5lgk_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpu2dk5lgk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpu2dk5lgk_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            break\n        }\n    }\n  \
    \  for i := n - 1; i >= min; i-- {\n        if arr[i] != arr[min] {\n        \
    \    max = i\n            break\n        }\n    }\n    return max - min + 1\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpch3nnlfm_test.go:54: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpch3nnlfm_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpch3nnlfm_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpch3nnlfm_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpch3nnlfm_test.go:54: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpch3nnlfm_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpch3nnlfm_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp6vkhhod8_test.go:46: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp6vkhhod8_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp6vkhhod8_test.go:46: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp6vkhhod8_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp6vkhhod8_test.go:46: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp6vkhhod8_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6vkhhod8_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        for j := 0; j < i; j++ {\n            if arr[j] != arr[j+1] {\n     \
    \           min = min(min)\n                break\n            }\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr09lujv0_test.go:17:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n            min =\
    \ i\n            break\n        }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmps_2vfbaj_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmps_2vfbaj_test.go:46\
    \ +0x849\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n\
    \        if arr[i] < min {\n            min = i\n        }\n    }\n    if min\
    \ == max {\n        return -1\n    }\n    min += min\n    max -= max\n    for\
    \ i := min; i <= max; i++ {\n        if arr[i] != arr[max-i] {\n            return\
    \ i - min\n        }\n    }\n    return -1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8sz_zteg_test.go:57: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8sz_zteg_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp8sz_zteg_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp8sz_zteg_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8sz_zteg_test.go:57: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8sz_zteg_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp8sz_zteg_test.go:57: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp8sz_zteg_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var k int\n    var l int\n \
    \   var m int\n    var n int\n    var o int\n    var p int\n    var q int\n  \
    \  var r int\n    var s int\n    var t int\n    var u int\n    var v int\n   \
    \ var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var\
    \ b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g\
    \ int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var a int\n   \
    \ var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var\
    \ g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8kmoh2g9_test.go:142:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = min + 1\n\
    \    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1] {\n\
    \            return i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp92qxgnzd_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp92qxgnzd_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp92qxgnzd_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp92qxgnzd_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp92qxgnzd_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp92qxgnzd_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp92qxgnzd_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n -\
    \ i] {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmph4grojmk_test.go:19\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmph4grojmk_test.go:41\
    \ +0x754\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > min {\n            min = arr[i]\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_zsz02up_test.go:42: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_zsz02up_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_zsz02up_test.go:42: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_zsz02up_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_zsz02up_test.go:42: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_zsz02up_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_zsz02up_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result ^= arr[i]\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    max := len(arr) - 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := 0; i < max; i++ {\n        if arr[i] < arr[i+1]\
    \ {\n            max = i\n            break\n        }\n    }\n    return max\
    \ - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpsx5drsgq_test.go:50: expected '%!s(int=4)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpsx5drsgq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpsx5drsgq_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpsx5drsgq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpsx5drsgq_test.go:50: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpsx5drsgq_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpsx5drsgq_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n    \
    \            result += 2\n                break\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=4)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=14)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max = i\n     \
    \   } else {\n            min = i\n        }\n    }\n    if min == max {\n   \
    \     return -1\n    }\n    min += 1\n    max -= 1\n    for i := min; i <= max;\
    \ i++ {\n        if arr[i] != arr[max-i] {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphft50h9y_test.go:56: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphft50h9y_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphft50h9y_test.go:56: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphft50h9y_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphft50h9y_test.go:56: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphft50h9y_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphft50h9y_test.go:56: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphft50h9y_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpb2_zbka8_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpb2_zbka8_test.go:46\
    \ +0x849\ntesting.tRunner(0xc000184ea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpv8fzfdqq_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpv8fzfdqq_test.go:46\
    \ +0x849\ntesting.tRunner(0xc000192680, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n\
    \            max = i\n        } else {\n            min = i\n        }\n    }\n\
    \    if min > max {\n        return min\n    }\n    min += min\n    max -= max\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max\
    \ = i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    min += min\n    max -= max\n    for i := 0;\
    \ i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max = i\n        }\
    \ else {\n            min = i\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n \
    \       if arr[i] > arr[n-1] {\n            max = i\n        } else {\n      \
    \      min = i\n        }\n    }\n    if min > max {\n        return min\n   \
    \ }\n    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > arr[n-1] {\n            max = i\n        } else {\n            min\
    \ = i\n        }\n    }\n    if min > max {\n        return min\n    }\n    min\
    \ += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1]\
    \ {\n            max = i\n        } else {\n            min = i\n        }\n \
    \   }\n    if min > max {\n        return min\n    }\n    min += min\n    max\
    \ -= max\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n     \
    \       max = i\n        } else {\n            min = i\n        }\n    }\n   \
    \ if min > max {\n        return min\n    }\n    min += min\n    max -= max\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max\
    \ = i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    min += min\n    max -= max\n    for \nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe7mo2s3r_test.go:128:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n\
    \        if arr[i] < min {\n            min = i\n        }\n    }\n    if min\
    \ > max {\n        return -1\n    }\n    if min == max {\n        return -1\n\
    \    }\n    min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n      \
    \  if arr[i] > arr[i+1] {\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n \
    \       }\n    }\n    return len(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpag112wj2_test.go:60: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpag112wj2_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpag112wj2_test.go:60: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpag112wj2_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpag112wj2_test.go:60: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpag112wj2_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpag112wj2_test.go:60: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpag112wj2_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgbk4zqth_test.go:45: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgbk4zqth_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgbk4zqth_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgbk4zqth_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgbk4zqth_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgbk4zqth_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    max := len(arr) - 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := max; i >= min; i-- {\n        if arr[i] > arr[i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmptx6jnr3e_test.go:22\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmptx6jnr3e_test.go:43\
    \ +0x43b\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min == max {\n        return min\
    \ + 1\n    }\n    min += 2\n    max -= 2\n    for i := min; i <= max; i++ {\n\
    \        if arr[i] > arr[i+1] {\n            min = i\n        } else {\n     \
    \       max = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpg_34ftzf_test.go:20 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpg_34ftzf_test.go:49 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    return 0\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] <\
    \ min {\n            min = arr[i]\n        }\n    }\n\n    if min > max {\n  \
    \      return -1\n    }\n\n    min += min / 2\n    max -= max / 2\n\n    if min\
    \ > max {\n        return -1\n    }\n\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [6:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [6:2]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be620, 0x2, 0x2})\n\
    \t/tmp/tmphw4sced5_test.go:40 +0x15a\ncommand-line-arguments_test.smallest_change({0xc0000be5f0,\
    \ 0x8, 0x8})\n\t/tmp/tmphw4sced5_test.go:40 +0x116\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmphw4sced5_test.go:50 +0xd5\ntesting.tRunner(0xc000103380, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps8_b5gov_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmps8_b5gov_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max(max,\
    \ i)\n    }\n    for i := n - 1; i > max; i-- {\n        min := min(min, i)\n\
    \    }\n    return min + n - max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4han2slr_test.go:20:16: invalid operation: cannot call non-function max
    (variable of type int)

    /tmp/tmp4han2slr_test.go:23:16: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] > arr[n-i-1] {\n            min = i\n            break\n  \
    \      }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfz_iqbux_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfz_iqbux_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfz_iqbux_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfz_iqbux_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ 0\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] <\
    \ min {\n            min = arr[i]\n        }\n    }\n    if min > max {\n    \
    \    return 0\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    if min > max {\n  \
    \      return 0\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if min > max\
    \ {\n        return 0\n    }\n    min += 1\n    max -= 1\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprk3jbedd_test.go:127:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_k_id1dj_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_k_id1dj_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_k_id1dj_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_k_id1dj_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_k_id1dj_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_k_id1dj_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp_k_id1dj_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n\n    for i := 0; i < max; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n\n \
    \   for i := 0; i < max; i++ {\n        if arr[i] < arr[i+1] {\n            max\
    \ = i\n            break\n        }\n    }\n\n    return min + max\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppvmyth4p_test.go:57: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppvmyth4p_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmppvmyth4p_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmppvmyth4p_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmppvmyth4p_test.go:57: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := 0\n\
    \    max := len(arr) - 1\n    for i := 0; i < max; i++ {\n        if arr[i] !=\
    \ arr[max] {\n            min = min + 1\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppiuerkip_test.go:46: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppiuerkip_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppiuerkip_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppiuerkip_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppiuerkip_test.go:46: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppiuerkip_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmplt6a50ff_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmplt6a50ff_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmplt6a50ff_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmplt6a50ff_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := i\n \
    \       for j := i; j < n; j++ {\n            if arr[j] < arr[max] {\n       \
    \         max = j\n            }\n        }\n        if arr[i] != arr[max] {\n\
    \            min = max\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpde0wcd1l_test.go:18:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length; i++ {\n        if arr[i] > arr[length-i-1] {\n            min = i\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwh9cgi1e_test.go:43: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwh9cgi1e_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwh9cgi1e_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwh9cgi1e_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwh9cgi1e_test.go:43: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwh9cgi1e_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpwh9cgi1e_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n\n    // Initialize min and max to first and last element\n    min :=\
    \ arr[0]\n    max := arr[0]\n    for i := 1; i < length; i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n        if arr[i] > max {\n  \
    \          max = arr[i]\n        }\n    }\n\n    // If min and max are same, return\
    \ length\n    if min == max {\n        return length\n    }\n\n    // Initialize\
    \ min and max to first and last element\n    min := arr[0]\n    max := arr[0]\n\
    \    for i := 1; i < length; i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n        if arr[i] > max {\n            max = arr[i]\n \
    \       }\n    }\n\n    // If min and max are same, return length\n    if min\
    \ == max {\n        return length\n    }\n\n    // Initialize min and max to first\
    \ and last element\n    min := arr[0]\n    max := arr[0]\n    for i := 1; i <\
    \ length; i++ {\n        if arr[i] < min {\n            min = arr[i]\n       \
    \ }\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n\
    \    // If min and max are same, return length\n    if min == max {\n        return\
    \ length\n    }\n\n    // Initialize min and max to first and last element\n \
    \   min := arr[0]\n    max := arr[0]\n    for i := 1; i < length; i++ {\n    \
    \    if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n\n    // If min and max\
    \ are same, return length\n    if min == max {\n        return length\n    }\n\
    \n    // Initialize min and max to first and last element\n    min := arr[0]\n\
    \    max := arr[0]\n    for i := 1; i < length; i++ {\n        if arr[i] < min\
    \ {\n            min = arr[i]\n        }\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n    }\n\n    // If min and max are same, return\
    \ length\n    if min == max {\n        return length\n    }\n\n    // Initialize\
    \ min and max to first and last element\n    min := arr[0]\n    max := arr[0]\n\
    \    for i := 1; i < length; i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n        if arr[i] > max {\n            max = arr[i]\n \
    \       }\n    }\n\n    // If min and max are same, return length\n    if min\
    \ == \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5y90eoi1_test.go:117:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var k int\n    var smallest_change\
    \ int\n    for i = len(arr) - 1, j = len(arr) - 1, k = len(arr) - 1; i >= 0 ||\
    \ j >= 0 || k >= 0; i--, j--, k-- {\n        if arr[i] > arr[j] {\n          \
    \  smallest_change = k\n        } else {\n            smallest_change = j\n  \
    \      }\n    }\n    return smallest_change\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kpunvhj_test.go:17:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfarnsjft_test.go:57: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfarnsjft_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpfarnsjft_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpfarnsjft_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpfarnsjft_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpfarnsjft_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfarnsjft_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    max -= 1\n    for i := 0; i < n; i++ {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxpsym25__test.go:61: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxpsym25__test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxpsym25__test.go:61: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxpsym25__test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxpsym25__test.go:61: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxpsym25__test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxpsym25__test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphbhveix6_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphbhveix6_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphbhveix6_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphbhveix6_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmphbhveix6_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return len(arr)\n    }\n    min\
    \ := len(arr)\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < i;\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = i\n         \
    \       break\n            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpc85u9mkh_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpc85u9mkh_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpc85u9mkh_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpc85u9mkh_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpc85u9mkh_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpc85u9mkh_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpc85u9mkh_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return n\n\
    \    }\n    if min == max {\n        return min\n    }\n    max += min\n    min\
    \ -= max\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n          \
    \  max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    if min > max {\n        return n\n    }\n    if min ==\
    \ max {\n        return min\n    }\n    max += min\n    min -= max\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    if min > max {\n        return n\n    }\n    if min == max {\n      \
    \  return min\n    }\n    max += min\n    min -= max\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if min > max\
    \ {\n        return n\n    }\n    if min == max {\n        return min\n    }\n\
    \    max += min\n    min -= max\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ n\n    }\n    if min == max {\n        return min\n    }\n    max += min\n \
    \   min -= max\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n        if arr[i] < min {\n            min =\
    \ arr[i]\n        }\n    }\n    if min > max {\n        return n\n    }\n    if\
    \ min == max {\n        return min\n    }\n    max += min\n    min -= max\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    if min == max \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj56lh37w_test.go:127:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var k int\n    var smallest_change\
    \ int\n    for i = len(arr) - 1, j = 0, k = len(arr) - 1; i < j; i, j, k = i+1,\
    \ j-1, k-1 {\n        if arr[i] > arr[j] {\n            smallest_change = k\n\
    \            break\n        }\n        if arr[i] < arr[j] {\n            smallest_change\
    \ = k\n            break\n        }\n        if arr[i] == arr[j] {\n         \
    \   smallest_change = k\n            break\n        }\n    }\n    return smallest_change\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy6rnx_m0_test.go:17:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return smallest_change(arr[:min]) + 1 + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpi4ro16rf_test.go:20 +0x127\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpi4ro16rf_test.go:40 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return len(arr)\n    }\n    min\
    \ := len(arr)\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n\
    \            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw48jtm5_test.go:20:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += j\n            }\n        }\n       \
    \ if result > i {\n            break\n        }\n    }\n    return result\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4n_57vhg_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4n_57vhg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4n_57vhg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4n_57vhg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4n_57vhg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return n\n\
    \    }\n    min -= max\n    max -= min\n    min += max\n    max += min\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    min -= max\n    max -=\
    \ min\n    min += max\n    max += min\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min\
    \ {\n            min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ n\n    }\n    min -= max\n    max -= min\n    min += max\n    max += min\n \
    \   for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    min -= max\n    max -=\
    \ min\n    min += max\n    max += min\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min\
    \ {\n            min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ n\n    }\n    min -= max\n    max -= min\n    min += max\n    max += min\n \
    \   for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    min -= max\n    max -=\
    \ min\n    min += max\n    max += min\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min\
    \ {\n            min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ n\n    }\n    min -= max\n    max -= min\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprf4lsgqp_test.go:123:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min == max {\n        return n\n    }\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += min\n    max -= max\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    min += min\n    max -= max\n\
    \    min += min\n    max -= max\n    min += \nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdea679nk_test.go:118:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n%2 == 1 {\n        return -1\n    }\n\
    \    min := n\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-i-1] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_tnae19g_test.go:46: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_tnae19g_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_tnae19g_test.go:46: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_tnae19g_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_tnae19g_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_tnae19g_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_tnae19g_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := len(arr) - 1; j >= 0; j-- {\n            if arr[i] != arr[j] {\n\
    \                result = 1\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnuev5479_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpnuev5479_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpnuev5479_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] != min && arr[i] != max {\n \
    \           return i\n        }\n    }\n    return n\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] != arr[max]\
    \ {\n            min += 1\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8upn20dn_test.go:54: expected '%!s(int=4)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8upn20dn_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=11)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp8upn20dn_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp8upn20dn_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8upn20dn_test.go:54: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8upn20dn_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8upn20dn_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp8hmklm3m_test.go:19\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp8hmklm3m_test.go:41\
    \ +0x754\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    max := arr[0]\n    for i := 1;\
    \ i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    min += max\n    return min - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpkdes_fs0_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpkdes_fs0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpkdes_fs0_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpkdes_fs0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpkdes_fs0_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] != arr[min-i] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpo29vkxae_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpo29vkxae_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpo29vkxae_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpo29vkxae_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpo29vkxae_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var min_change int\n    var\
    \ min_change_i int\n    var min_change_j int\n    var min_change_count int\n\n\
    \    for i = 0; i < len(arr); i++ {\n        min_change_count = 1\n        min_change_i\
    \ = i\n        min_change_j = i\n        for j = i; j < len(arr); j++ {\n    \
    \        if arr[i] > arr[j] {\n                min_change_count++\n          \
    \      min_change_i = j\n                min_change_j = j\n            }\n   \
    \     }\n        if min_change_count == 1 {\n            min_change = min_change_i\n\
    \        } else {\n            if min_change_count > 1 {\n                min_change\
    \ = min_change_i\n            } else {\n                min_change = min_change_j\n\
    \            }\n        }\n    }\n    return min_change\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppfnmlxlg_test.go:64: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppfnmlxlg_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppfnmlxlg_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppfnmlxlg_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppfnmlxlg_test.go:64: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppfnmlxlg_test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n   \
    \         min = arr[i]\n        }\n    }\n\n    return len(arr) - min + 1\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9ez0277x_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9ez0277x_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9ez0277x_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9ez0277x_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp9ez0277x_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp9ez0277x_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp9ez0277x_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp9ez0277x_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp1uai0r6p_test.go:46: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp1uai0r6p_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp1uai0r6p_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp1uai0r6p_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp1uai0r6p_test.go:46: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp1uai0r6p_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp1uai0r6p_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            max = i\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] != arr[min] {\n            min\
    \ = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] != arr[max]\
    \ {\n            max = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2re8ti6q_test.go:58: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2re8ti6q_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2re8ti6q_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2re8ti6q_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2re8ti6q_test.go:58: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2re8ti6q_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    if arr[i] != 0 {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpn78g8kto_test.go:42: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpn78g8kto_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpn78g8kto_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpn78g8kto_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpn78g8kto_test.go:42: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpn78g8kto_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpn78g8kto_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := len(arr) - i - 1; j >= 0; j-- {\n            if arr[j] != arr[len(arr)-j-1]\
    \ {\n                result = 1\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprhzwxsjt_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ != arr[len(arr)-1-j] {\n                result += j\n            }\n       \
    \ }\n        if result > i {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmph2cxa5s__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmph2cxa5s__test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmph2cxa5s__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmph2cxa5s__test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmph2cxa5s__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] != min && arr[i] != max {\n \
    \           return i\n        }\n    }\n    return n\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpuiia2w4i_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuiia2w4i_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    if arr[i] != 0 {\n            result += arr[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpt4p8bot1_test.go:42: expected '%!s(int=4)', got '%!s(int=37)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpt4p8bot1_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=17)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpt4p8bot1_test.go:42: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpt4p8bot1_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=11)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpt4p8bot1_test.go:42: expected '%!s(int=0)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpt4p8bot1_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpt4p8bot1_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvd4i1z6w_test.go:47: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvd4i1z6w_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpvd4i1z6w_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpvd4i1z6w_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n-1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n\
    \        if arr[i] < min {\n            min = i\n        }\n    }\n    if min\
    \ == max {\n        return n\n    }\n    min += 1\n    max -= 1\n    for i :=\
    \ min; i <= max; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    return\
    \ min + n - max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpkpbcvz2x_test.go:60: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpkpbcvz2x_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpkpbcvz2x_test.go:60: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpkpbcvz2x_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpkpbcvz2x_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpkpbcvz2x_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpkpbcvz2x_test.go:60: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[n-1] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpefk_ckyr_test.go:57: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpefk_ckyr_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpefk_ckyr_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpefk_ckyr_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpefk_ckyr_test.go:57: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpefk_ckyr_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpefk_ckyr_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    min += min\n\
    \    max += max\n    min += min\n    max += max\n    min += min\n    max += max\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpkuhq1ak3_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpkuhq1ak3_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpkuhq1ak3_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpkuhq1ak3_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpkuhq1ak3_test.go:58: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpkuhq1ak3_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=24)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpkuhq1ak3_test.go:58: expected '%!s(int=1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min =\
    \ i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp1kyauyf2_test.go:43: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp1kyauyf2_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp1kyauyf2_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp1kyauyf2_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    min := 0\n    max := n\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    \
    \    if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if min\
    \ > max {\n        return n\n    }\n    max -= min\n    min -= min\n    min +=\
    \ min\n    max += max\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt6j9lo61_test.go:19:9: no new variables on left side of :=

    /tmp/tmpt6j9lo61_test.go:20:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var i int\n    var j int\n    var k int\n    var smallest_change\
    \ int\n    var is_palindromic bool\n\n    for i = 0; i < len(arr); i++ {\n   \
    \     is_palindromic = true\n        j = len(arr) - 1\n        for k = 0; k <\
    \ j; k++ {\n            if arr[i] != arr[j] {\n                is_palindromic\
    \ = false\n                break\n            }\n            j--\n        }\n\
    \        if is_palindromic == true {\n            smallest_change = i\n      \
    \      break\n        }\n    }\n    return smallest_change\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpidcw3efj_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpidcw3efj_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpidcw3efj_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpidcw3efj_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[n-1] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ n\n    }\n    if min > max {\n        return smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    \    }\n    return smallest_change(arr[:max]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxs13en6r_test.go:60: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxs13en6r_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxs13en6r_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxs13en6r_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxs13en6r_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxs13en6r_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpxs13en6r_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > min {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n - 1; i > min; i-- {\n        if arr[i] > arr[i-1] {\n           \
    \ max = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4528?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpju6hqpun_test.go:20 +0xb3\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpju6hqpun_test.go:48 +0x37f\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45e0, 0x0?, 0x2})\n\
    \t/tmp/tmpmg19qn5z_test.go:26 +0x107\ncommand-line-arguments_test.smallest_change({0xc0000c45d8,\
    \ 0x3b?, 0x3})\n\t/tmp/tmpmg19qn5z_test.go:26 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45d0,\
    \ 0x0?, 0x4})\n\t/tmp/tmpmg19qn5z_test.go:26 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45b8,\
    \ 0x5e3ea0?, 0x7})\n\t/tmp/tmpmg19qn5z_test.go:26 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpmg19qn5z_test.go:37 +0x172\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ / 2\n    max := len(arr) - 1\n    for i := 0; i < max; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            break\n        }\n    }\n  \
    \  for i := 0; i < min; i++ {\n        if arr[i] != arr[i] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpyg4qb3va_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpyg4qb3va_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpyg4qb3va_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpyg4qb3va_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpyg4qb3va_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpyg4qb3va_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpyg4qb3va_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpm6ds25kb_test.go:45: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpm6ds25kb_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpm6ds25kb_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpm6ds25kb_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpm6ds25kb_test.go:45: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpm6ds25kb_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpm6ds25kb_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp1q7a3xrv_test.go:20\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp1q7a3xrv_test.go:41\
    \ +0x98c\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgeemo_0z_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgeemo_0z_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzk0ckrfl_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzk0ckrfl_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpzk0ckrfl_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpzk0ckrfl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            min = i\n     \
    \       break\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[0] {\n            max = i\n            break\n        }\n    }\n\
    \    if min > max {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n%2 == 1 {\n        return n\n    }\n\
    \    min := n\n    for i := 1; i < n; i++ {\n        if arr[i] > arr[min] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmplffn4h5f_test.go:19\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmplffn4h5f_test.go:33\
    \ +0x5df\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max(max,\
    \ i)\n    }\n    for i := 0; i < n; i++ {\n        min := min(min, i)\n    }\n\
    \    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjxlarhx_test.go:20:16: invalid operation: cannot call non-function max
    (variable of type int)

    /tmp/tmpsjxlarhx_test.go:23:16: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075434
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    result := 0\n    for i := 0; i < len(arr);\
    \ i++ {\n        result := min(result, len(arr) - i)\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqvdda_r_test.go:14:12: no new variables on left side of :=

    /tmp/tmpeqvdda_r_test.go:16:19: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    max := n\n    for i := 0;\
    \ i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min == max {\n        return n\n    }\n    if min > max {\n        min, max\
    \ = max, min\n    }\n    diff := max - min\n    diff /= 2\n    diff *= 2\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            arr[i] = max\n\
    \        }\n        if arr[i] < min {\n            arr[i] = min\n        }\n \
    \   }\n    return diff\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpa9j2uj16_test.go:64: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpa9j2uj16_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpa9j2uj16_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpa9j2uj16_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpa9j2uj16_test.go:64: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpa9j2uj16_test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpa9j2uj16_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpa9j2uj16_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[n-i-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpsz7ny_89_test.go:20 +0xb0\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpsz7ny_89_test.go:41 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    min += min\n\
    \    max -= max\n    min += min\n    max -= max\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmm0b2tq2_test.go:56: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmm0b2tq2_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmm0b2tq2_test.go:56: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmm0b2tq2_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmm0b2tq2_test.go:56: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmm0b2tq2_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmm0b2tq2_test.go:56: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n -\
    \ i - 1] {\n            min = i\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxjriig0h_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxjriig0h_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxjriig0h_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxjriig0h_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxjriig0h_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxjriig0h_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += j - i\n                break\n      \
    \      }\n        }\n        if result > 0 {\n            break\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpalzg8hk9_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpalzg8hk9_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpalzg8hk9_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpalzg8hk9_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpalzg8hk9_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpq362v3p4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpq362v3p4_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n%2 == 0 {\n        return n\n    }\n\
    \    min := n\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbulbovwb_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpbulbovwb_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpbulbovwb_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpbulbovwb_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpbulbovwb_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpbulbovwb_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpbulbovwb_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpbulbovwb_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            min = i\n     \
    \       break\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[0] {\n            max = i\n            break\n        }\n    }\n\
    \    if min > max {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp5v2swjxi_test.go:54: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp5v2swjxi_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := i; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n    \
    \            break\n            }\n        }\n        if i == len(arr) {\n   \
    \         result = i\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp61dzrfia_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp61dzrfia_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp61dzrfia_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp61dzrfia_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp61dzrfia_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result ^= arr[i]\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    min += min / 2\n    max += max / 2\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpv7snvvxl_test.go:52: expected '%!s(int=4)', got '%!s(int=13)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpv7snvvxl_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=11)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpv7snvvxl_test.go:52: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpv7snvvxl_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpv7snvvxl_test.go:52: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpv7snvvxl_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpv7snvvxl_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpv7snvvxl_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ / 2\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpmgyklvsi_test.go:18\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpmgyklvsi_test.go:32\
    \ +0x766\ntesting.tRunner(0xc00019b040, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ != arr[len(arr)-1-j] {\n                result += 2\n                break\n\
    \            }\n        }\n        if result > 0 {\n            break\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpiajvxjek_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpiajvxjek_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpiajvxjek_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpiajvxjek_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpiajvxjek_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result ^= arr[i]\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := arr[i]\n        for j := i; j < len(arr); j++ {\n            if\
    \ arr[j] != result {\n                break\n            }\n        }\n      \
    \  if j == len(arr) {\n            result += i\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vidmcv__test.go:21:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > min {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpaalysl1h_test.go:42: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpaalysl1h_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075433
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            max = i\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64v2dfgl_test.go:18:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result ^= arr[i]\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp620hfo_t_test.go:44: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp620hfo_t_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp620hfo_t_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp620hfo_t_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp620hfo_t_test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp620hfo_t_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp620hfo_t_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp620hfo_t_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0d360dsq_test.go:44: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0d360dsq_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0d360dsq_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0d360dsq_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0d360dsq_test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0d360dsq_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0d360dsq_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075435
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxx7t82d__test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxx7t82d__test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] != arr[max] {\n            min = i\n    \
    \        break\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[min] {\n            max = i\n            break\n        }\n    }\n  \
    \  return max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpe0nwow1i_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpe0nwow1i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpe0nwow1i_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpe0nwow1i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpe0nwow1i_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpe0nwow1i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnybraw6x_test.go:44: expected '%!s(int=4)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnybraw6x_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnybraw6x_test.go:44: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnybraw6x_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnybraw6x_test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnybraw6x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpnybraw6x_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpnybraw6x_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ 0\n    max := length-1\n    for i := 0; i < max; i++ {\n        if arr[i] !=\
    \ arr[max] {\n            min = i\n            break\n        }\n    }\n    for\
    \ i := 0; i < max; i++ {\n        if arr[i] != arr[min] {\n            max = i\n\
    \            break\n        }\n    }\n    if min == max {\n        return -1\n\
    \    }\n    return min + 1 - max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpovfml4ow_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpovfml4ow_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpovfml4ow_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpovfml4ow_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpovfml4ow_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpovfml4ow_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpovfml4ow_test.go:55: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpovfml4ow_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += j - i\n            }\n        }\n   \
    \     if result > 0 {\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpouwp__tg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpouwp__tg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += j - i\n            }\n        }\n   \
    \     if result > 0 {\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpouwp__tg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpouwp__tg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpouwp__tg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            min = i\n     \
    \       break\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[0] {\n            max = i\n            break\n        }\n    }\n\
    \    if min == max {\n        return -1\n    }\n    min += 1\n    max -= 1\n \
    \   for i := min; i <= max; i++ {\n        if arr[i] > arr[n-1] {\n          \
    \  min = i\n            break\n        }\n    }\n    for i := n - 1; i >= min;\
    \ i-- {\n        if arr[i] > arr[0] {\n            max = i\n            break\n\
    \        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpyooqu5au_test.go:68: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpyooqu5au_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpyooqu5au_test.go:68: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpyooqu5au_test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpyooqu5au_test.go:68: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpyooqu5au_test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result ^= arr[i]\n    }\n    return result\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppeu4ftgc_test.go:40: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmppeu4ftgc_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > min {\n            arr[i] = arr[i] - min\n        }\n    }\n    return\
    \ len(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpng3y6xes_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpng3y6xes_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpng3y6xes_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpng3y6xes_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpng3y6xes_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpng3y6xes_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpng3y6xes_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    \        }\n    }\n    if min > max {\n        return min\n    }\n    return smallest_change(arr[:min])\
    \ + 1 + smallest_change(arr[max:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpi6rlyy5l_test.go:20 +0x125\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpi6rlyy5l_test.go:39 +0xd5\ntesting.tRunner(0xc000192680, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    result := 0\n        for j := i; j < len(arr); j++ {\n            if arr[i]\
    \ != arr[j] {\n                result += j - i\n            }\n        }\n   \
    \     if result > 0 {\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxys0dv5d_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxys0dv5d_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxys0dv5d_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxys0dv5d_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpxys0dv5d_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpo91vybnf_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpo91vybnf_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpo91vybnf_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpo91vybnf_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpo91vybnf_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpo91vybnf_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    min += 1\n\
    \    max -= 1\n    i := 0\n    j := n - 1\n    for i < max && j < min {\n    \
    \    if arr[i] > arr[j] {\n            i++\n        } else {\n            j--\n\
    \        }\n    }\n    return j - i\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000bf550?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpn59m257d_test.go:34 +0xcc\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpn59m257d_test.go:55 +0x317\ntesting.tRunner(0xc000103520, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            max = i\n        } else {\n\
    \            max = max - 1\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuxgrsz07_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuxgrsz07_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuxgrsz07_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuxgrsz07_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpuxgrsz07_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpuxgrsz07_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuxgrsz07_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp6j_39cpd_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp6j_39cpd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n%2 == 0 {\n        return n\n    }\n\
    \    min := n\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-i-1] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzfk7sj7__test.go:46: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzfk7sj7__test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpzfk7sj7__test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpzfk7sj7__test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpzfk7sj7__test.go:46: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpzfk7sj7__test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpzfk7sj7__test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpzfk7sj7__test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1bzpf2g2_test.go:268:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i-1\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpln0l3vfl_test.go:44: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpln0l3vfl_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpln0l3vfl_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpln0l3vfl_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpln0l3vfl_test.go:44: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpln0l3vfl_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpln0l3vfl_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := 0; i < n; i++ {\n        if arr[i] != arr[n-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgj6wmpwa_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgj6wmpwa_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgj6wmpwa_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgj6wmpwa_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgj6wmpwa_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgj6wmpwa_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgj6wmpwa_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpgj6wmpwa_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n%2 == 0 {\n        return -1\n    }\n\
    \    min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return -1\n    }\n\
    \    min += 1\n    max -= 1\n    i := 0\n    j := n-1\n    k := 0\n    arr[k]\
    \ = 0\n    for i < max && j < min {\n        if arr[i] > arr[j] {\n          \
    \  arr[k+1] = arr[j]\n            arr[j] = arr[i]\n            arr[i] = arr[k+1]\n\
    \            k += 1\n            j += 1\n            i -= 1\n        }\n     \
    \   if arr[i] < arr[j] {\n            arr[k+1] = arr[j]\n            arr[j] =\
    \ arr[i]\n            arr[i] = arr[k+1]\n            k += 1\n            j -=\
    \ 1\n            i -= 1\n        }\n    }\n    return k\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk467sxdc_test.go:77: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk467sxdc_test.go:77:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk467sxdc_test.go:77: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk467sxdc_test.go:77:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpk467sxdc_test.go:77: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpk467sxdc_test.go:77:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    \        }\n    }\n    if min > max {\n        return -1\n    }\n    min += min\n\
    \    max += min\n    for i := min; i <= max; i++ {\n        if arr[i] != arr[n-i-1]\
    \ {\n            return -1\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4570?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpkepempi6_test.go:32 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpkepempi6_test.go:49 +0x234\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kyo4o_o_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7kyo4o_o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7tgw6dql_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7tgw6dql_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7tgw6dql_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7tgw6dql_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp7tgw6dql_test.go:45: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp7tgw6dql_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp7tgw6dql_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp7tgw6dql_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpvo9io71f_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpvo9io71f_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n    \
    \            result += 2\n                break\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=4)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=14)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpp65k6cot_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpp65k6cot_test.go:45: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    return 0\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5t32c4jr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp5t32c4jr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    min += min / 2\n    max += max / 2\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq8aezk0z_test.go:52: expected '%!s(int=4)', got '%!s(int=13)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq8aezk0z_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=11)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq8aezk0z_test.go:52: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq8aezk0z_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq8aezk0z_test.go:52: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq8aezk0z_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpq8aezk0z_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxgnazwnl_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxgnazwnl_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075434
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := i; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n    \
    \            result += 2\n                break\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpi4_yzekw_test.go:45: expected '%!s(int=4)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpi4_yzekw_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpi4_yzekw_test.go:45: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpi4_yzekw_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpi4_yzekw_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpi4_yzekw_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpi4_yzekw_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075437
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return n\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr2cjd2l__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr2cjd2l__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpwj1c2hzp_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpwj1c2hzp_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := i\n \
    \       for j := i; j < n; j++ {\n            if arr[j] < arr[max] {\n       \
    \         max = j\n            }\n        }\n        if max != i {\n         \
    \   min = max\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxdfcopf_test.go:18:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075436
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpsls9d6az_test.go:49: expected '%!s(int=4)', got '%!s(int=28)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpsls9d6az_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=22)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpsls9d6az_test.go:49: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpsls9d6az_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpsls9d6az_test.go:49: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpsls9d6az_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075437
