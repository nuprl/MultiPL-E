language: go_test.go
name: HumanEval_33_sort_third
results:
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3\
    \ == 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for\
    \ i := 0; i < k; i++ {\n        l[i], l[i+1] = l[i+1], l[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnayc33k_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n          \
    \  l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdgpabje__test.go:12:7: no new variables on left side of :=

    /tmp/tmpdgpabje__test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for i < len(l) &&\
    \ l[i] != 0 {\n        if l[i] % 3 == 0 {\n            l[i] = l[i] + 3\n     \
    \   } else {\n            l[i] = l[i]\n        }\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitjwq1e2_test.go:12:7: no new variables on left side of :=

    /tmp/tmpitjwq1e2_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vmxvihg_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3 == 0 {\n   \
    \         l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n       \
    \ }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpco9vznn9_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i] =\
    \ j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddifqgbx_test.go:12:7: no new variables on left side of :=

    /tmp/tmpddifqgbx_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 !=\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzio65pye_test.go:12:7: no new variables on left side of :=

    /tmp/tmpzio65pye_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for i :=\
    \ 0; i < k; i++ {\n        l[i], l[i+1] = l[i+1], l[i]\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp339pym2g_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for i < len(l) {\n        if l[i] % 3 == 0 {\n            l[i]\
    \ = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n        i++\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9_dzzwe_test.go:12:7: no new variables on left side of :=

    /tmp/tmpq9_dzzwe_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for i < len(l) &&\
    \ l[i] % 3 == 0 {\n        l[i] = l[i]\n        i++\n    }\n    for i < len(l)\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwh80n0q_test.go:12:7: no new variables on left side of :=

    /tmp/tmpgwh80n0q_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL' := lenL\n    l := make([]int, lenL)\n    l := append(l, l...)\n   \
    \ l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n \
    \   l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz2wjt0j3_test.go:13:9: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i]\
    \ = j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptuj3mnc7_test.go:12:7: no new variables on left side of :=

    /tmp/tmptuj3mnc7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            j += 1\n            j += 1\n\
    \            j += 1\n            l[i] = l[j]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgacia70_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL3 := lenL / 3\n    lenL3 += lenL % 3 == 0\n    l := make([]int, lenL)\n\
    \    for i := 0; i < lenL; i++ {\n        l[i] = l[i]\n    }\n    for i := 0;\
    \ i < lenL3; i++ {\n        j := i + 3\n        if j > lenL {\n            break\n\
    \        }\n        l[i] = l[j]\n    }\n    for i := 0; i < lenL; i++ {\n    \
    \    if l[i] != l[i] {\n            j := i + 3\n            if j > lenL {\n  \
    \              break\n            }\n            l[i] = l[j]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3z6iqmp7_test.go:14:5: invalid operation: lenL3 += lenL % 3 == 0 (mismatched
    types int and untyped bool)

    /tmp/tmp3z6iqmp7_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n     \
    \       k++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hi9ddqx_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        result[i] =\
    \ l[i]\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n    \
    \        result[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            result[i] = l[i]\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            result[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[i] = l[i]\n        }\n    }\n \
    \   for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i]\
    \ = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3\
    \ == 0 {\n            result[i] = l[i]\n        }\n    }\n    for i := 0; i <\
    \ len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n       \
    \ }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n       \
    \     result[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            result[i] = l[i]\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            result[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[i] = l[i]\n        }\n    }\n \
    \   for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i]\
    \ = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3\
    \ == 0 {\n            result[i] = l[i]\n        }\n    }\n    for i := 0; i <\
    \ len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n       \
    \ }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n       \
    \     result[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            result[i] = l[i]\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == \nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe2c51yg8_test.go:108:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i], l[j] = l[j], l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7o13bm2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                j--\n\
    \                if j%3 == 0 {\n                    l[i] = l[j]\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsjxr2ge_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for i :=\
    \ 0; i < k; i++ {\n        l[i] = l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcfyhbk7e_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            l[i] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd47tf03j_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    l[i] = l[j]\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpea7nhfg9_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 ==\
    \ 0 {\n            result[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            result[i] = v\n         \
    \   i++\n        }\n    }\n    for _, v := range l {\n        if v%3 == 0 {\n\
    \            result[i] = v\n            i++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpdyt8ud7d_test.go:28\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpdyt8ud7d_test.go:42\
    \ +0xac5\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i]\n        }\n    }\n    return l\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmputhfbrsh_test.go:12:7: no new variables on left side of :=

    /tmp/tmputhfbrsh_test.go:16:5: undefined: sort

    /tmp/tmputhfbrsh_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for ; j < len(l) && l[j] %\
    \ 3 == 0; j++ {\n            }\n            l[i], l[j] = l[j], l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7o13bm2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for j := range l {\n        if j%3 == 0 {\n            l[i] =\
    \ l[j]\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpokwvevvx_test.go:12:7: no new variables on left side of :=

    /tmp/tmpokwvevvx_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 != 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszejbubu_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 !=\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzio65pye_test.go:12:7: no new variables on left side of :=

    /tmp/tmpzio65pye_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            continue\n\
    \        }\n        j := i\n        for j > 0 && l[j-1]%3 == 0 {\n           \
    \ j--\n        }\n        l[i], l[j] = l[j], l[i]\n    }\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawdjed9a_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcg845qv4_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 ==\
    \ 0 {\n            result[i] = v\n            i++\n        }\n    }\n    for _,\
    \ v := range l {\n        if v%3 == 0 {\n            result[i] = v\n         \
    \   i++\n        }\n    }\n    for _, v := range l {\n        if v%3 == 0 {\n\
    \            result[i] = v\n            i++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpdyt8ud7d_test.go:28\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpdyt8ud7d_test.go:42\
    \ +0xac5\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            result[index] = l[i]\n            index++\n \
    \       }\n    }\n    for i := 0; i < index; i++ {\n        result[i] = l[i]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0hfsd3jy_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0hfsd3jy_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0hfsd3jy_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0hfsd3jy_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for {\n            j += 1\n            if j%3 == 0 {\n              \
    \  break\n            }\n            if l[j] < l[j-1] {\n                tmp :=\
    \ l[j]\n                l[j] = l[j-1]\n                l[j-1] = tmp\n        \
    \    }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukc7mlmy_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ result := make([]int, len(l))\n    for i := range l {\n        if i%3 == 0 {\n\
    \            result[i] = l[i]\n        } else {\n            result[i] = l[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_qceck47_test.go:12:7: no new variables on left side of :=

    /tmp/tmp_qceck47_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vmxvihg_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            result[index] = l[i]\n            index++\n \
    \       }\n    }\n    for i := 0; i < index; i++ {\n        result[i] = result[i+1]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL' := lenL\n    l := make([]int, lenL)\n    l := append(l, l...)\n   \
    \ l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n \
    \   l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz2wjt0j3_test.go:13:9: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for i < len(l) &&\
    \ l[i] != 0 {\n        if l[i] % 3 == 0 {\n            l[i] = l[i]\n        }\
    \ else {\n            l[i] = 0\n        }\n        i++\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2f3m2izj_test.go:12:7: no new variables on left side of :=

    /tmp/tmp2f3m2izj_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for _, value := range l {\n       \
    \ if index % 3 == 0 {\n            result[index] = value\n        }\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if l[i]\
    \ % 3 == 0 {\n            j := i\n            for {\n                j--\n   \
    \             if l[j] % 3 == 0 {\n                    break\n                }\n\
    \            }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4196fusa_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ result := make([]int, len(l))\n    for i, v := range l {\n        if i%3 !=\
    \ 0 {\n            result[i] = v\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1nfntpp_test.go:12:7: no new variables on left side of :=

    /tmp/tmpt1nfntpp_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n  \
    \  i := 0\n    for i < lenL {\n        l[i] = l[i]\n        i++\n    }\n    for\
    \ i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL3 {\n\
    \        l[i] = l[i]\n        i++\n    }\n    for i < lenL {\n        if l[i]\
    \ % 3 != 0 {\n            j := i\n            for {\n                if l[j] %\
    \ 3 == 0 {\n                    l[j] = l[j] // swap l[j] and l[i]\n          \
    \          i++\n                    break\n                }\n               \
    \ j++\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzev498p_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Ints(l)\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcfkg0q0e_test.go:12:7: no new variables on left side of :=

    /tmp/tmpcfkg0q0e_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            result[index] = l[i]\n            index++\n \
    \       }\n    }\n    for i := 0; i < index; i++ {\n        result[i] = result[i]\n\
    \    }\n    for i := index; i < len(l); i++ {\n        result[i] = l[i]\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp2897t3jv_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp2897t3jv_test.go:45: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp2897t3jv_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp2897t3jv_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3 == 0 {\n   \
    \         l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n       \
    \ }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_z48_494_test.go:12:7: no new variables on left side of :=

    /tmp/tmp_z48_494_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n     \
    \       k++\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3\
    \ == 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbi8v8l0_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i] =\
    \ j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddifqgbx_test.go:12:7: no new variables on left side of :=

    /tmp/tmpddifqgbx_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[i] = l[i]\n        } else {\n            j := i\n       \
    \     for {\n                j--\n                if j%3 == 0 {\n            \
    \        l[i] = l[j]\n                    break\n                }\n         \
    \   }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41no6g3q_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                j--\n\
    \                if j%3 == 0 {\n                    l[i] = l[j]\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsjxr2ge_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i]\
    \ = j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptuj3mnc7_test.go:12:7: no new variables on left side of :=

    /tmp/tmptuj3mnc7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3 == 0 {\n   \
    \         l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n       \
    \ }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_z48_494_test.go:12:7: no new variables on left side of :=

    /tmp/tmp_z48_494_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for {\n            j += 1\n            if j%3 == 0 {\n              \
    \  break\n            }\n            if l[j] < l[j-1] {\n                tmp :=\
    \ l[j]\n                l[j] = l[j-1]\n                l[j-1] = tmp\n        \
    \    }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukc7mlmy_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3 == 0 {\n   \
    \         l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n       \
    \ }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_z48_494_test.go:12:7: no new variables on left side of :=

    /tmp/tmp_z48_494_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for {\n            j += 1\n            if j%3 == 0 {\n              \
    \  break\n            }\n            if l[j] < l[j-1] {\n                l[i],\
    \ l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpanjheqzl_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \           i++\n            l[i] = v\n            i++\n        }\n    }\n   \
    \ return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0r7s5r_i_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n  \
    \  i := 0\n    for i < lenL {\n        l[i] = l[i]\n        i += 1\n    }\n  \
    \  for i < lenL2 {\n        l[i] = l[i]\n        i += 1\n    }\n    for i < lenL3\
    \ {\n        l[i] = l[i]\n        i += 1\n    }\n    for i < lenL {\n        if\
    \ l[i] % 3 != 0 {\n            j := i\n            for {\n                j--\n\
    \                if l[j] % 3 != 0 {\n                    break\n             \
    \   }\n            }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas3y7w4z_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            result[index] = l[i]\n            index++\n \
    \       }\n    }\n    for i := 0; i < index; i++ {\n        result[i] = result[i+1]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpnh7darg8_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                j--\n\
    \                if j%3 == 0 {\n                    l[i] = l[j]\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsjxr2ge_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Ints(l)\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ne7nqyh_test.go:12:7: no new variables on left side of :=

    /tmp/tmp3ne7nqyh_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL' := lenL\n    l := make([]int, lenL)\n    i := 0\n    for i < lenL {\n\
    \        if i % 3 == 0 {\n            l[i] = l[i]\n        } else {\n        \
    \    l[i] = l[i] + l[i]\n        }\n        i++\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyl_0cqz_test.go:13:9: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vmxvihg_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        } else {\n            l[i] = v\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgwb0dwj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL3 := lenL / 3\n    lenL3 += lenL % 3 == 0\n    lenL3 += lenL % 3 == 1\n\
    \    lenL3 += lenL % 3 == 2\n    lenL3 += lenL % 3 == 3\n    lenL3 += lenL % 3\
    \ == 4\n    lenL3 += lenL % 5 == 0\n    lenL3 += lenL % 5 == 1\n    lenL3 += lenL\
    \ % 5 == 2\n    lenL3 += lenL % 5 == 3\n    lenL3 += lenL % 5 == 4\n    lenL3\
    \ += lenL % 5 == 5\n    lenL3 += lenL % 7 == 0\n    lenL3 += lenL % 7 == 1\n \
    \   lenL3 += lenL % 7 == 2\n    lenL3 += lenL % 7 == 3\n    lenL3 += lenL % 7\
    \ == 4\n    lenL3 += lenL % 7 == 5\n    lenL3 += lenL % 7 == 6\n    lenL3 += lenL\
    \ % 7 == 7\n    lenL3 += lenL % 7 == 8\n    lenL3 += lenL % 7 == 9\n    lenL3\
    \ += lenL % 7 == 10\n    lenL3 += lenL % 7 == 11\n    lenL3 += lenL % 7 == 12\n\
    \    lenL3 += lenL % 7 == 13\n    lenL3 += lenL % 7 == 14\n    lenL3 += lenL %\
    \ 7 == 15\n    lenL3 += lenL % 7 == 16\n    lenL3 += lenL % 7 == 17\n    lenL3\
    \ += lenL % 7 == 18\n    lenL3 += lenL % 7 == 19\n    lenL3 += lenL % 7 == 20\n\
    \    lenL3 += lenL % 7 == 21\n    lenL3 += lenL % 7 == 22\n    lenL3 += lenL %\
    \ 7 == 23\n    lenL3 += lenL % 7 == 24\n    lenL3 += lenL % 7 == 25\n    lenL3\
    \ += lenL % 7 == 26\n    lenL3 += lenL % 7 == 27\n    lenL3 += lenL % 7 == 28\n\
    \    lenL3 += lenL % 7 == 29\n    lenL3 += lenL % 7 == 30\n    lenL3 += lenL %\
    \ 7 == 31\n    lenL\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6ipgarg_test.go:58:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL3 := lenL / 3\n    lenL3 += lenL % 3 == 0\n    lenL3 += lenL % 3 == 1\n\
    \    lenL3 += lenL % 3 == 2\n    lenL3 += lenL % 3 == 3\n    lenL3 += lenL % 3\
    \ == 4\n    lenL3 += lenL % 3 == 5\n    lenL3 += lenL % 3 == 6\n    lenL3 += lenL\
    \ % 3 == 7\n    lenL3 += lenL % 3 == 8\n    lenL3 += lenL % 3 == 9\n    lenL3\
    \ += lenL % 3 == 10\n    lenL3 += lenL % 3 == 11\n    lenL3 += lenL % 3 == 12\n\
    \    lenL3 += lenL % 3 == 13\n    lenL3 += lenL % 3 == 14\n    lenL3 += lenL %\
    \ 3 == 15\n    lenL3 += lenL % 3 == 16\n    lenL3 += lenL % 3 == 17\n    lenL3\
    \ += lenL % 3 == 18\n    lenL3 += lenL % 3 == 19\n    lenL3 += lenL % 3 == 20\n\
    \    lenL3 += lenL % 3 == 21\n    lenL3 += lenL % 3 == 22\n    lenL3 += lenL %\
    \ 3 == 23\n    lenL3 += lenL % 3 == 24\n    lenL3 += lenL % 3 == 25\n    lenL3\
    \ += lenL % 3 == 26\n    lenL3 += lenL % 3 == 27\n    lenL3 += lenL % 3 == 28\n\
    \    lenL3 += lenL % 3 == 29\n    lenL3 += lenL % 3 == 30\n    lenL3 += lenL %\
    \ 3 == 31\n    lenL3 += lenL % 3 == 32\n    lenL3 += lenL % 3 == 33\n    lenL3\
    \ += lenL % 3 == 34\n    lenL3 += lenL % 3 == 35\n    lenL3 += lenL % 3 == 36\n\
    \    lenL3 += lenL % 3 == 37\n    lenL3 += lenL % 3 == 38\n    lenL3 += lenL %\
    \ 3 == 39\n    lenL3 += lenL % 3 == 40\n    lenL3 += lenL % 3 == 41\n    lenL3\
    \ += lenL % 3 == 42\n    lenL3 += lenL % 3 == 43\n    lenL3 += lenL % 3 == 44\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplqbvl045_test.go:60:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    result := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        result[i] = l[i]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqzk4wfbr_test.go:12:7: no new variables on left side of :=

    /tmp/tmpqzk4wfbr_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    l := make([]int, lenL2)\n    j := 0\n    for i :=\
    \ 0; i < lenL; i++ {\n        l[i] = l[j]\n        j++\n        if j == lenL {\n\
    \            j = 0\n        }\n    }\n    j := 0\n    for i := 0; i < lenL; i++\
    \ {\n        if i%3 != 0 {\n            l[i] = l[j]\n            j++\n       \
    \     if j == lenL {\n                j = 0\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4idh3h4_test.go:14:7: no new variables on left side of :=

    /tmp/tmpb4idh3h4_test.go:23:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[i] = l[i]\n        } else {\n            j := i\n       \
    \     for ; j < len(l) && l[j]%3 == 0; j++ {\n            }\n            l[i],\
    \ l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprss5v9vv_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ i := 0\n    for i < len(l) {\n        if l[i] % 3 != 0 {\n            copy(l[i:],\
    \ l[i:])\n            i += len(l[i:])\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbazhse53_test.go:12:7: no new variables on left side of :=

    /tmp/tmpbazhse53_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    j := 0\n    k := 0\n    for i < len(l) && j < len(l) {\n    \
    \    if l[j] % 3 == 0 {\n            l[k] = l[j]\n            i++\n          \
    \  j++\n            k++\n        } else {\n            l[k] = l[j]\n         \
    \   j++\n            k++\n        }\n    }\n    for i < len(l) {\n        l[k]\
    \ = l[i]\n        i++\n        k++\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95eez5p7_test.go:12:7: no new variables on left side of :=

    /tmp/tmp95eez5p7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    result := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        result[i] = l[i]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqzk4wfbr_test.go:12:7: no new variables on left side of :=

    /tmp/tmpqzk4wfbr_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n     \
    \   }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n     \
    \       l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        }\n\
    \    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n           \
    \ l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n     \
    \   }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n     \
    \       l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n   \
    \     if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        }\n\
    \    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n           \
    \ l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%3 == \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8u9crc7_test.go:108:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i += 3 {\n        j := i\n        for j > 0 && l[j-1]\
    \ > l[j] {\n            l[j-1], l[j] = l[j], l[j-1]\n            j--\n       \
    \ }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpluf_p308_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = i\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jorv2jk_test.go:12:7: no new variables on left side of :=

    /tmp/tmp4jorv2jk_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 != 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszejbubu_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    result := append(result, l...)\n    sort.Ints(result)\n\
    \    for i := 0; i < len(result); i++ {\n        if i%3 == 0 {\n            result[i]\
    \ = result[i]\n        } else {\n            result[i] = result[i] + 3\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdys_k8uk_test.go:13:12: no new variables on left side of :=

    /tmp/tmpdys_k8uk_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[i] = l[i]\n        } else {\n            j := i\n       \
    \     for {\n                j--\n                if j%3 == 0 {\n            \
    \        l[i] = l[j]\n                    break\n                }\n         \
    \   }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41no6g3q_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for _, value := range l {\n       \
    \ if index%3 != 0 {\n            result[index] = value\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpxb9xsyiv_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpxb9xsyiv_test.go:39: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpxb9xsyiv_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpxb9xsyiv_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    l[i] = l[i]\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38cjr0iw_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ i := 0\n    for i < len(l) {\n        if l[i] % 3 == 0 {\n            l[i] =\
    \ l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n        i++\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88c9tsuc_test.go:12:7: no new variables on left side of :=

    /tmp/tmp88c9tsuc_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    for i < len(l) &&\
    \ l[i] % 3 == 0 {\n        i++\n    }\n    for i < len(l) {\n        l[i] = l[i]\n\
    \        i++\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf6a_hmj1_test.go:12:7: no new variables on left side of :=

    /tmp/tmpf6a_hmj1_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3 == 0 {\n   \
    \         l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n       \
    \ }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpco9vznn9_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    lenL3 := lenL * 3\n    l := make([]int, lenL)\n  \
    \  l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := append(l, l...)\n\
    \    l := append(l, l...)\n    l := append(l, l...)\n    l := \nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4qwkrwu2_test.go:76:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + 3\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7nrrlzj0_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i]\
    \ = j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptuj3mnc7_test.go:12:7: no new variables on left side of :=

    /tmp/tmptuj3mnc7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    result := append(result, l...)\n    for i := 0; i <\
    \ len(l); i++ {\n        if i%3 == 0 {\n            j := i\n            j := j\
    \ + 1\n            j := j + 1\n            result[i] = l[j]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilkziny2_test.go:13:12: no new variables on left side of :=

    /tmp/tmpilkziny2_test.go:17:15: no new variables on left side of :=

    /tmp/tmpilkziny2_test.go:18:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 != 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5ibcflq_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%3 == 0 {\n            result[i] = l[i]\n        } else {\n            result[i]\
    \ = l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx0n0fg__test.go:12:7: no new variables on left side of :=

    /tmp/tmpgx0n0fg__test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n   \
    \ for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i] + 3\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7nrrlzj0_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    k := 0\n    for i := 0; i < len(l); i++ {\n        if l[i] % 3\
    \ == 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        if l[i] % 3 != 0 {\n            l[k] = l[i]\n\
    \            k++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1aapmsbj_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[i] = l[i]\n        } else {\n            j := i\n       \
    \     for j > 0 && l[j-1]%3 == 0 {\n                l[j] = l[j-1]\n          \
    \      j--\n            }\n            l[j] = i\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpki6b228z_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    l := make([]int, lenL2)\n    j := 0\n    for i :=\
    \ 0; i < lenL; i++ {\n        l[i] = l[j]\n        j++\n        if j == lenL {\n\
    \            j = 0\n        }\n    }\n    j := 0\n    for i := 0; i < lenL; i++\
    \ {\n        if i % 3 == 0 {\n            l[i] = l[j]\n            j++\n     \
    \       if j == lenL {\n                j = 0\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnbevhh9b_test.go:14:7: no new variables on left side of :=

    /tmp/tmpnbevhh9b_test.go:23:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for j := range l {\n        if j%3 != 0 {\n            l[i] =\
    \ l[j]\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzspq0ru_test.go:12:7: no new variables on left side of :=

    /tmp/tmpvzspq0ru_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for j > 0 && l[j-1]%3 == 0 {\n            j--\n        }\n        l[i],\
    \ l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvrbf672_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL2 := lenL * 2\n    l := make([]int, lenL2)\n    i := 0\n    for i < lenL\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2\
    \ {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5q_me_s5_test.go:136:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(l)\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y5rd0vt_test.go:12:7: no new variables on left side of :=

    /tmp/tmp8y5rd0vt_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n   \
    \ i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i] =\
    \ j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddifqgbx_test.go:12:7: no new variables on left side of :=

    /tmp/tmpddifqgbx_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a88id2x_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n      \
    \      copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:],\
    \ l[i:])\n            copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n   \
    \         copy(l[i:], l[i:])\n            copy(\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptum0u6gw_test.go:70:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 !=\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzio65pye_test.go:12:7: no new variables on left side of :=

    /tmp/tmpzio65pye_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            continue\n        }\n        j := i\n\
    \        for {\n            j += 1\n            if j%3 == 0 {\n              \
    \  break\n            }\n            if l[j] < l[j-1] {\n                l[i],\
    \ l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpanjheqzl_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073802
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for i := 0; i < len(l); i++ {\n   \
    \     if i % 3 == 0 {\n            result[index] = l[i]\n            index++\n\
    \        }\n    }\n    for i := index; i < len(l); i++ {\n        result[i] =\
    \ l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n \
    \ candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp0k9jm8sq_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp0k9jm8sq_test.go:42: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp0k9jm8sq_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp0k9jm8sq_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    lenL := len(l)\n\
    \    lenL' := lenL\n    i := 0\n    j := 0\n    for i < lenL && j < lenL' {\n\
    \        if l[i] % 3 == 0 && l[j] % 3 == 0 {\n            l[i] = l[i] + l[j]\n\
    \            l[j] = 0\n            i++\n            j++\n        }\n        if\
    \ l[i] % 3 == 1 {\n            l[i] = l[i] + l[j]\n            l[j] = 0\n    \
    \        i++\n        }\n        if l[i] % 3 == 2 {\n            l[i] = l[i] +\
    \ l[j]\n            l[j] = 0\n            i++\n        }\n        if l[j] % 3\
    \ == 1 {\n            l[i] = l[i] + l[j]\n            l[j] = 0\n            j++\n\
    \        }\n        if l[j] % 3 == 2 {\n            l[i] = l[i] + l[j]\n     \
    \       l[j] = 0\n            j++\n        }\n        if l[i] > l[j] {\n     \
    \       i++\n        } else {\n            j++\n        }\n    }\n    return l[0:j]\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfgad1_rq_test.go:13:9: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez09vu2s_test.go:12:7: no new variables on left side of :=

    /tmp/tmpez09vu2s_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    for i := range\
    \ l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n    \
    \        j := i\n            k := i\n            l := make([]int, len(l))\n  \
    \          for {\n                if j%3 != 0 {\n                    l[k] = l[j]\n\
    \                    j++\n                    k++\n                } else {\n\
    \                    l[k] = l[j]\n                    j++\n                  \
    \  break\n                }\n            }\n            l[k] = l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssng__mb_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073804
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        if v%3 == 0 {\n    \
    \        l[i] = v\n            i++\n        }\n    }\n    for _, v := range l\
    \ {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gso1x19_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv91piltr_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    result :=\
    \ make([]int, len(l))\n    index := 0\n    for _, value := range l {\n       \
    \ if index % 3 == 0 {\n            result[index] = value\n        }\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmph_llh6eb_test.go:39: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        if i%3 ==\
    \ 0 {\n            result[i] = l[i]\n        } else {\n            result[i] =\
    \ l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2v0e2tg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpl2v0e2tg_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qzb5ttn_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1qzb5ttn_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\nfunc sort_third(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n        \
    \    l[i] = l[i]\n        } else {\n            l[i] = l[i] + 3\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg08r1vwg_test.go:12:7: no new variables on left side of :=

    /tmp/tmpg08r1vwg_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
