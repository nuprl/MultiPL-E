language: go_test.go
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'No'\n\
    \    var valid string = \"No\"\n    \n    // Initialize a boolean variable 'dot_found'\
    \ to 'No'\n    var dot_found string = \"No\"\n    \n    // Initialize a boolean\
    \ variable 'first_letter_not_found' to 'No'\n    var first_letter_not_found string\
    \ = \"No\"\n    \n    // Initialize a boolean variable 'dot_not_found' to 'No'\n\
    \    var dot_not_found string = \"No\"\n    \n    // Initialize a boolean variable\
    \ 'file_name_contains_only_one_dot' to 'No'\n    var file_name_contains_only_one_dot\
    \ string = \"No\"\n    \n    // Initialize a boolean variable 'file_name_contains_no_dot_characters'\
    \ to 'No'\n    var file_name_contains_no_dot_characters string = \"No\"\n    \n\
    \    // Initialize a boolean variable 'file_name_contains_no_letters' to 'No'\n\
    \    var file_name_contains_no_letters string = \"No\"\n    \n    // Initialize\
    \ a boolean variable 'file_name_contains_no_numbers' to 'No'\n    var file_name_contains_no_numbers\
    \ string = \"No\"\n    \n    // Initialize a boolean variable 'file_name_contains_no_spaces'\
    \ to 'No'\n    var file_name_contains_no_spaces string = \"No\"\n    \n    //\
    \ Initialize a boolean variable 'file_name_contains_no_special_characters' to\
    \ 'No'\n    var file_name_contains_no_special_characters string = \"No\"\n   \
    \ \n    // Initialize a boolean variable 'file_name_contains_no_spaces' to 'No'\n\
    \    var file_name_contains_no_spaces string = \"No\"\n    \n    // Initialize\
    \ a boolean variable 'file_name_contains_no_spaces' to 'No'\n    var file_name_contains_no_spaces\
    \ string = \"No\"\n    \n    // Initialize a boolean variable 'file_name_contains_no_spaces'\
    \ to 'No'\n    var file_name_contains_no_spaces string = \"No\"\n    \n    //\
    \ Initialize a boolean variable 'file_name_contains_no_spaces' to 'No'\n    var\
    \ file_name_contains_no_spaces string = \"No\"\n    \n    // Initialize a boolean\
    \ variable 'file_name_contains_no_spaces' to 'No'\n    var file_name_contains_no_spaces\
    \ string = \"No\"\n    \n    // Initialize a boolean variable 'file_name_contains_no_spaces'\
    \ to 'No'\n    var file_name_contains_no_spaces string = \"No\"\n    \n    //\
    \ Initialize a boolean variable 'file_name_contains_no_spaces' to 'No'\n    var\
    \ file_name_contains_no_spaces string = \"No\"\n    \n    // Initialize a boolean\
    \ variable 'file_name_contains_no_spaces' to 'No'\n    var file_name\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9v530yjq_test.go:72:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'true'.\n\
    \    var valid bool = true\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0.\n    var file_name_length int = 0\n    \n    // Initialize a variable\
    \ 'file_name_character' to 0.\n    var file_name_character int = 0\n    \n   \
    \ // Initialize a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to 0.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to 0.\n    var file_name_dot_position int = 0\n   \
    \ \n    // Initialize a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to 0.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to 0.\n    var file_name_dot_position int = 0\n   \
    \ \n    // Initialize a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to 0.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to 0.\n    var file_name_dot_position int = 0\n   \
    \ \n    // Initialize a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to 0.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to 0.\n    var file_name_dot_position int = 0\n   \
    \ \n    // Initialize a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to 0.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to 0.\n    var file_name_dot_position int = 0\n   \
    \ \n    // Initialize a variable 'file_name_dot_position' to 0.\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnpwwcd1z_test.go:90:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Return Yes if the file's\
    \ name is valid\n    if !strings.Contains(file_name, \".\") {\n        return\
    \ \"No\"\n    }\n    \n    // Return No if the file's name contains more than\
    \ three digits\n    if len(file_name) > 3 {\n        return \"No\"\n    }\n  \
    \  \n    // Return No if the file's name contains more than one dot\n    if strings.Contains(file_name,\
    \ \".\") {\n        return \"No\"\n    }\n    \n    // Return No if the file's\
    \ name does not start with a letter from the latin alphabet\n    if !strings.HasPrefix(file_name,\
    \ \"a\") && !strings.HasPrefix(file_name, \"A\") {\n        return \"No\"\n  \
    \  }\n    \n    // Return No if the file's name does not end with one of these:\
    \ ['txt', 'exe', 'dll']\n    if !strings.HasSuffix(file_name, \".txt\") && !strings.HasSuffix(file_name,\
    \ \".exe\") && !strings.HasSuffix(file_name, \".dll\") {\n        return \"No\"\
    \n    }\n    \n    // Return Yes if the file's name is valid\n    return \"Yes\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxf0ddpp_test.go:22:9: undefined: strings

    /tmp/tmpaxf0ddpp_test.go:32:8: undefined: strings

    /tmp/tmpaxf0ddpp_test.go:37:9: undefined: strings

    /tmp/tmpaxf0ddpp_test.go:42:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid.\n    var is_valid = false\n    \n    // Initialize\
    \ a variable to store the first character of the file's name.\n    var first_char\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first character.\n    var file_name_without_first_char = ''\n    \n    // Initialize\
    \ a variable to store the file's name without the last character.\n    var file_name_without_last_char\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char =\
    \ ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot\
    \ = ''\n    \n    // Initialize a variable to store the file's name without the\
    \ first and last characters.\n    var file_name_without_first_and_last_char_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxu5qzh3y_test.go:24:22: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n\n    // Initialize a variable 'file_extension' to an empty\
    \ string.\n    file_extension := \"\"\n\n    // Initialize a variable 'file_name_length'\
    \ to 0.\n    file_name_length := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0.\n    file_name_character := 0\n\n    // Initialize a variable 'file_name_character'\
    \ to \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf17d0dud_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the result\n \
    \   result := \"No\"\n    \n    // Initialize a variable to store the length of\
    \ the file's name\n    length := len(file_name)\n    \n    // Initialize a variable\
    \ to store the index of the first dot ('.') in the file's name\n    dot_index\
    \ := 0\n    \n    // Initialize a variable to store the index of the last dot\
    \ ('.') in the file's name\n    dot_index_last := length - 1\n    \n    // Initialize\
    \ a variable to store the index of the first letter in the file's name\n    letter_index\
    \ := 0\n    \n    // Initialize a variable to store the index of the last letter\
    \ in the file's name\n    letter_index_last := length - 1\n    \n    // Initialize\
    \ a variable to store the index of the first digit in the file's name\n    digit_index\
    \ := 0\n    \n    // Initialize a variable to store the index of the last digit\
    \ in the file's name\n    digit_index_last := length - 1\n    \n    // Initialize\
    \ a variable to store the index of the first letter from the latin alphabet in\
    \ the file's name\n    latin_letter_index := 0\n    \n    // Initialize a variable\
    \ to store the index of the last letter from the latin alphabet in the file's\
    \ name\n    latin_letter_index_last := length - 1\n    \n    // Initialize a variable\
    \ to store the index of the first digit from the latin alphabet in the file's\
    \ name\n    latin_digit_index := 0\n    \n    // Initialize a variable to store\
    \ the index of the last digit from the latin alphabet in the file's name\n   \
    \ latin_digit_index_last := length - 1\n    \n    // Initialize a variable to\
    \ store the index of the first letter from the latin alphabet in the file's name\n\
    \    latin_letter_index := 0\n    \n    // Initialize a variable to store the\
    \ index of the last letter from the latin alphabet in the file's name\n    latin_letter_index_last\
    \ := length - 1\n    \n    // Initialize a variable to store the index of the\
    \ first digit from the latin alphabet in the file's name\n    latin_digit_index\
    \ := 0\n    \n    // Initialize a variable to store the index of the last digit\
    \ from the latin alphabet in the file's name\n    latin_digit_index_last := length\
    \ - 1\n    \n    // Initialize a variable to store the index of the first letter\
    \ from the latin alphabet in the file's name\n    latin_letter_index := 0\n  \
    \  \n    // Initialize a variable to store the index of the last letter from the\
    \ latin alphabet in the file's name\n    latin_letter_index_last := length - 1\n\
    \    \n    // Initialize a variable to store the index of the first digit from\
    \ the latin alphabet in the file's name\n    latin_digit_index := 0\n    \nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk_pvpg84_test.go:77:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_part' to an empty string\n    file_name_part\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_length' to 0\n \
    \   file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7txiaq1q_test.go:90:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n\n    // Initialize a variable 'file_name_part' to an\
    \ empty string\n    file_name_part := \"\"\n\n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n\n    // Initialize a variable 'dot_part' to\
    \ an empty string\n    dot_part := \"\"\n\n    // Initialize a variable 'dot_part_length'\
    \ to 0\n    dot_part_length := 0\n\n    // Initialize a variable 'dot_part_index'\
    \ to 0\n    dot_part_index := 0\n\n    // Initialize a variable 'dot_part_length'\
    \ to 0\n    dot_part_length_check := 0\n\n    // Initialize a variable 'dot_part_index'\
    \ to 0\n    dot_part_index_check := 0\n\n    // Initialize a variable 'dot_part_length'\
    \ to 0\n    dot_part_length_check_test := 0\n\n    // Initialize a variable 'dot_part_index'\
    \ to 0\n    dot_part_index_check_test := 0\n\n    // Initialize a variable 'dot_part_length'\
    \ to 0\n    dot_part_length_check_test_2 := 0\n\n    // Initialize a variable\
    \ 'dot_part_index' to 0\n    dot_part_index_check_test_2 := 0\n\n    // Initialize\
    \ a variable 'dot_part_length' to 0\n    dot_part_length_check_test_3 := 0\n\n\
    \    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_3\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_4\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_4\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_5\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_5\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_6\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_6\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_7\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_7\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_8\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_index_check_test_8\
    \ := 0\n\n    // Initialize a variable 'dot_part_length' to 0\n    dot_part_length_check_test_9\
    \ := 0\n\n    // Initialize a variable 'dot_part_index' to 0\n    dot_part_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpup1yevtl_test.go:97:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp228z1071_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Return Yes if the file's\
    \ name is valid\n    if file_name == \"\" {\n        return \"No\"\n    }\n  \
    \  \n    // Return No if the file's name contains more than three digits\n   \
    \ if len(file_name) > 3 {\n        return \"No\"\n    }\n    \n    // Return No\
    \ if the file's name contains more than one dot\n    if file_name.Contains(\"\
    .\") {\n        return \"No\"\n    }\n    \n    // Return No if the file's name\
    \ starts with a letter from the latin alphabet\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    \n    // Return No if the file's\
    \ name ends with one of these: ['txt', 'exe', 'dll']\n    if file_name[len(file_name)-1]\
    \ != 'txt' && file_name[len(file_name)-1] != 'exe' && file_name[len(file_name)-1]\
    \ != 'dll' {\n        return \"No\"\n    }\n    \n    // Return Yes otherwise\n\
    \    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0981962s_test.go:42:39: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp228z1071_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'false'.\n\
    \    var valid bool = false\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'.\n    var dot_position int = -1 \n    \n    // Initialize a variable\
    \ 'first_letter' to '-1'.\n    var first_letter int = -1 \n    \n    // Initialize\
    \ a variable 'file_extension' to '-1'.\n    var file_extension int = -1 \n   \
    \ \n    // Initialize a variable 'file_extension_length' to '-1'.\n    var file_extension_length\
    \ int = -1 \n    \n    // Initialize a variable 'file_name_length' to '-1'.\n\
    \    var file_name_length int = -1 \n    \n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1 \n    \n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1 \n    \n    //\
    \ Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1 \n    \n    // Initialize a variable 'file_name_length' to '-1'.\n\
    \    var file_name_length int = -1 \n    \n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1 \n    \n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1 \n    \n    //\
    \ Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1 \n    \n    // Initialize a variable 'file_name_length' to '-1'.\n\
    \    var file_name_length int = -1 \n    \n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1 \n    \n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1 \n    \n    //\
    \ Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1 \n    \n    // Initialize a variable 'file_name_length' to '-1'.\n\
    \    var file_name_length int = -1 \n    \n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1 \n    \n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1 \n    \n    //\
    \ Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1 \n    \n    // Initialize a variable 'file_name_length' to '-1'.\n\
    \    var file_name_length int = -1 \n    \n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1 \n    \n    // Initialize a variable\
    \ 'file_name_length' to '-1\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6dwrh1t_test.go:90:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the result\n \
    \   result := \"No\"\n    \n    // Initialize a variable to store the file's name\n\
    \    file_name := file_name\n    \n    // Initialize a variable to store the file's\
    \ extension\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ store the file's name's length\n    name_length := 0\n    \n    // Initialize\
    \ a variable to store the file's extension's length\n    ext_length := 0\n   \
    \ \n    // Initialize a variable to store the file's name's first character\n\
    \    name_first_char := \"\"\n    \n    // Initialize a variable to store the\
    \ file's extension's first character\n    ext_first_char := \"\"\n    \n    //\
    \ Initialize a variable to store the file's name's last character\n    name_last_char\
    \ := \"\"\n    \n    // Initialize a variable to store the file's extension's\
    \ last character\n    ext_last_char := \"\"\n    \n    // Initialize a variable\
    \ to store the file's name's first character's position\n    name_first_char_pos\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's first\
    \ character's position\n    ext_first_char_pos := 0\n    \n    // Initialize a\
    \ variable to store the file's name's last character's position\n    name_last_char_pos\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's last\
    \ character's position\n    ext_last_char_pos := 0\n    \n    // Initialize a\
    \ variable to store the file's name's first character's position\n    name_first_char_pos_2\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's first\
    \ character's position\n    ext_first_char_pos_2 := 0\n    \n    // Initialize\
    \ a variable to store the file's name's last character's position\n    name_last_char_pos_2\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's last\
    \ character's position\n    ext_last_char_pos_2 := 0\n    \n    // Initialize\
    \ a variable to store the file's name's first character's position\n    name_first_char_pos_3\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's first\
    \ character's position\n    ext_first_char_pos_3 := 0\n    \n    // Initialize\
    \ a variable to store the file's name's last character's position\n    name_last_char_pos_3\
    \ := 0\n    \n    // Initialize a variable to store the file's extension's last\
    \ character's position\n    ext_last_char_pos_3 := 0\n    \n    // Initialize\
    \ a variable to store the file's name's first character's position\n    name_first_char_pos_4\
    \ := 0\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpltid59hj_test.go:85:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_char'\
    \ to 0\n    file_name_char := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphat6u4k4_test.go:91:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid or not.\n    valid := false\n    \n    // Initialize\
    \ a variable to store the first character of the file's name.\n    first_char\
    \ := file_name[0]\n    \n    // Initialize a variable to store the last character\
    \ of the file's name.\n    last_char := file_name[len(file_name)-1]\n    \n  \
    \  // Initialize a variable to store the number of digits in the file's name.\n\
    \    num_digits := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file's extension.\n    extension := \"\"\n    \n    // Initialize a variable\
    \ to store the file's extension.\n    dot_position := 0\n    \n    // Initialize\
    \ a variable to store the file's extension.\n    dot_position := len(file_name)\n\
    \    \n    // Initialize a variable to store the file's extension.\n    dot_position\
    \ := len(file_name)\n    \n    // Initialize a variable to store the file's extension.\n\
    \    dot_position := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file's extension.\n    dot_position := len(file_name)\n    \n    // Initialize\
    \ a variable to store the file's extension.\n    dot_position := len(file_name)\n\
    \    \n    // Initialize a variable to store the file's extension.\n    dot_position\
    \ := len(file_name)\n    \n    // Initialize a variable to store the file's extension.\n\
    \    dot_position := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file's extension.\n    dot_position := len(file_name)\n    \n    // Initialize\
    \ a variable to store the file's extension.\n    dot_position := len(file_name)\n\
    \    \n    // Initialize a variable to store the file's extension.\n    dot_position\
    \ := len(file_name)\n    \n    // Initialize a variable to store the file's extension.\n\
    \    dot_position := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file's extension.\n    dot_position := len(file_name)\n    \n    // Initialize\
    \ a variable to store the file's extension.\n    dot_position := len(file_name)\n\
    \    \n    // Initialize a variable to store the file's extension.\n    dot_position\
    \ := len(file_name)\n    \n    // Initialize a variable to store the file's extension.\n\
    \    dot_position := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file's extension.\n    dot_position := len(file_name)\n    \n    // Initialize\
    \ a variable to store the file's extension.\n    dot_position := len(file_name)\n\
    \    \n    // Initialize a variable to store the file's extension.\n    dot_position\
    \ := len(file_name)\n    \n    // Initialize a variable to store the file's extension.\n\
    \    dot_position := len(file_name)\n    \n    // Initialize a variable to store\
    \ the file\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyt_92yuy_test.go:96:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp9gh2idlc_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp9gh2idlc_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'first_letter'\
    \ to 'a'\n    first_letter := 'a'\n    \n    // Initialize a variable 'last_letter'\
    \ to 'z'\n    last_letter := 'z'\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaibhnj9p_test.go:104:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to an empty string\n    file_name_length := \"\"\n    \n\
    \    // Initialize a variable 'file_name_first_letter' to an empty string\n  \
    \  file_name_first_letter := \"\"\n    \n    // Initialize a variable 'file_name_second_letter'\
    \ to an empty string\n    file_name_second_letter := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_third_letter' to an empty string\n    file_name_third_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_fourth_letter' to an\
    \ empty string\n    file_name_fourth_letter := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_fifth_letter' to an empty string\n    file_name_fifth_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_sixth_letter' to an empty\
    \ string\n    file_name_sixth_letter := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_seventh_letter' to an empty string\n    file_name_seventh_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_eighth_letter' to an\
    \ empty string\n    file_name_eighth_letter := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_ninth_letter' to an empty string\n    file_name_ninth_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_tenth_letter' to an empty\
    \ string\n    file_name_tenth_letter := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_eleventh_letter' to an empty string\n    file_name_eleventh_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_twelfth_letter' to an\
    \ empty string\n    file_name_twelfth_letter := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_thirteenth_letter' to an empty string\n    file_name_thirteenth_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_fourteenth_letter' to\
    \ an empty string\n    file_name_fourteenth_letter := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_fifteenth_letter' to an empty string\n    file_name_fifteenth_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_sixteenth_letter' to\
    \ an empty string\n    file_name_sixteenth_letter := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_seventeenth_letter' to an empty string\n    file_name_seventeenth_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_eighteenth_letter' to\
    \ an empty string\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnz8df4kr_test.go:82:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Declare a variable named file_name of type string\n\
    \    file_name := file_name\n    \n    // Declare a variable named result of type\
    \ string\n    result := \"No\"\n    \n    // Declare a variable named dot_count\
    \ of type int\n    dot_count := 0\n    \n    // Declare a variable named first_letter\
    \ of type string\n    first_letter := \"\"\n    \n    // Declare a variable named\
    \ last_letter of type string\n    last_letter := \"\"\n    \n    // Declare a\
    \ variable named valid_name of type bool\n    valid_name := false\n    \n    //\
    \ Declare a variable named dot_count of type int\n    dot_count := 0\n    \n \
    \   // Declare a variable named first_letter of type string\n    first_letter\
    \ := \"\"\n    \n    // Declare a variable named last_letter of type string\n\
    \    last_letter := \"\"\n    \n    // Declare a variable named valid_name of\
    \ type bool\n    valid_name := false\n    \n    // Declare a variable named dot_count\
    \ of type int\n    dot_count := 0\n    \n    // Declare a variable named first_letter\
    \ of type string\n    first_letter := \"\"\n    \n    // Declare a variable named\
    \ last_letter of type string\n    last_letter := \"\"\n    \n    // Declare a\
    \ variable named valid_name of type bool\n    valid_name := false\n    \n    //\
    \ Declare a variable named dot_count of type int\n    dot_count := 0\n    \n \
    \   // Declare a variable named first_letter of type string\n    first_letter\
    \ := \"\"\n    \n    // Declare a variable named last_letter of type string\n\
    \    last_letter := \"\"\n    \n    // Declare a variable named valid_name of\
    \ type bool\n    valid_name := false\n    \n    // Declare a variable named dot_count\
    \ of type int\n    dot_count := 0\n    \n    // Declare a variable named first_letter\
    \ of type string\n    first_letter := \"\"\n    \n    // Declare a variable named\
    \ last_letter of type string\n    last_letter := \"\"\n    \n    // Declare a\
    \ variable named valid_name of type bool\n    valid_name := false\n    \n    //\
    \ Declare a variable named dot_count of type int\n    dot_count := 0\n    \n \
    \   // Declare a variable named first_letter of type string\n    first_letter\
    \ := \"\"\n    \n    // Declare a variable named last_letter of type string\n\
    \    last_letter := \"\"\n    \n    // Declare a variable named valid_name of\
    \ type bool\n    valid_name := false\n    \n    // Declare a variable named dot_count\
    \ of type int\n    dot_count := 0\n    \n    // Declare a variable named first_letter\
    \ of type string\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu8spsl5s_test.go:102:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'true'.\n\
    \    var valid bool = true\n\n    // Initialize a variable 'dot' to '-1'.\n  \
    \  var dot int = -1\n\n    // Initialize a variable 'first_letter' to '-1'.\n\
    \    var first_letter int = -1\n\n    // Initialize a variable 'last_letter' to\
    \ '-1'.\n    var last_letter int = -1\n\n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1\n\n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n    // Initialize\
    \ a variable 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n\
    \    // Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1\n\n    // Initialize a variable 'file_name_length' to '-1'.\n    var\
    \ file_name_length int = -1\n\n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1\n\n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n    // Initialize\
    \ a variable 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n\
    \    // Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1\n\n    // Initialize a variable 'file_name_length' to '-1'.\n    var\
    \ file_name_length int = -1\n\n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1\n\n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n    // Initialize\
    \ a variable 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n\
    \    // Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1\n\n    // Initialize a variable 'file_name_length' to '-1'.\n    var\
    \ file_name_length int = -1\n\n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1\n\n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n    // Initialize\
    \ a variable 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n\
    \    // Initialize a variable 'file_name_length' to '-1'.\n    var file_name_length\
    \ int = -1\n\n    // Initialize a variable 'file_name_length' to '-1'.\n    var\
    \ file_name_length int = -1\n\n    // Initialize a variable 'file_name_length'\
    \ to '-1'.\n    var file_name_length int = -1\n\n    // Initialize a variable\
    \ 'file_name_length' to '-1'.\n    var file_name_length int = -1\n\n    // \n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpywjlxyj6_test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. There should be exactly one dot '.'\n    if file_name[len(file_name)-1]\
    \ != '.' {\n        return \"No\"\n    }\n    \n    // 3. There should not be\
    \ an empty substring before the dot ('.').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n    \n    // 4. There should be one\
    \ of these substring after the dot ('txt', 'exe', 'dll').\n    valid_extensions\
    \ := []string{\"txt\", \"exe\", \"dll\"}\n    if !contains(valid_extensions, file_name[len(file_name)-1])\
    \ {\n        return \"No\"\n    }\n    \n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86ffx_3k_test.go:37:9: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 2. There should be exactly one dot '.'\n    if file_name[len(file_name)-1]\
    \ != '.' {\n        return \"No\"\n    }\n\n    // 3. There should not be an empty\
    \ substring before the dot\n    if file_name[0:len(file_name)-1] == \"\" {\n \
    \       return \"No\"\n    }\n\n    // 4. There should be one of these: ['txt',\
    \ 'exe', 'dll']\n    if file_name[len(file_name)-3:len(file_name)] != \"txt\"\
    \ && file_name[len(file_name)-3:len(file_name)] != \"exe\" && file_name[len(file_name)-3:len(file_name)]\
    \ != \"dll\" {\n        return \"No\"\n    }\n\n    // 5. There should be exactly\
    \ one dot '.'\n    if file_name[len(file_name)-2] != '.' {\n        return \"\
    No\"\n    }\n\n    // 6. There should not be an empty substring after the dot\n\
    \    if file_name[len(file_name)-1:len(file_name)] != \"\" {\n        return \"\
    No\"\n    }\n\n    // 7. There should be one of these: ['txt', 'exe', 'dll']\n\
    \    if file_name[len(file_name)-4:len(file_name)] != \"txt\" && file_name[len(file_name)-4:len(file_name)]\
    \ != \"exe\" && file_name[len(file_name)-4:len(file_name)] != \"dll\" {\n    \
    \    return \"No\"\n    }\n\n    // 8. There should be exactly one dot '.'\n \
    \   if file_name[len(file_name)-3] != '.' {\n        return \"No\"\n    }\n\n\
    \    // 9. There should not be an empty substring after the dot\n    if file_name[len(file_name)-2:len(file_name)]\
    \ != \"\" {\n        return \"No\"\n    }\n\n    // 10. There should be one of\
    \ these: ['txt', 'exe', 'dll']\n    if file_name[len(file_name)-3:len(file_name)]\
    \ != \"txt\" && file_name[len(file_name)-3:len(file_name)] != \"exe\" && file_name[len(file_name)-3:len(file_name)]\
    \ != \"dll\" {\n        return \"No\"\n    }\n\n    // 11. There should be exactly\
    \ one dot '.'\n    if file_name[len(file_name)-1] != '.' {\n        return \"\
    No\"\n    }\n\n    // 12. There should not be an empty substring after the dot\n\
    \    if file_name[len(file_name)-1:len(file_name)] != \"\" {\n        return \"\
    No\"\n    }\n\n    // 13. There should be one of these: ['txt', 'exe', 'dll']\n\
    \    if file_name[len(file_name)-4:len(file_name)] != \"txt\" && file_name[len(file_name)-4:len(file_name)]\
    \ != \"exe\" && file_name[len(file_name)-4:len(file_name)] != \"dll\" {\n    \
    \    return \"No\"\n    }\n\n    // 14. There should be exactly one dot '.'\n\
    \    if file_name[len(file_name)-3] != '.' {\n        return \"No\"\n    }\n\n\
    \    // 15. There should not be an empty substring after the dot\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdn58y8_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp228z1071_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0.\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_char'\
    \ to 'a'.\n    file_name_char := 'a'\n    \n    // Initialize a variable 'file_name_dot_index'\
    \ to 0.\n    file_name_dot_index := 0\n    \n    // Initialize a variable 'file_name_dot_length'\
    \ to 0.\n    file_name_dot_length := 0\n    \n    // Initialize a variable 'file_name_dot_char'\
    \ to 'a'.\n    file_name_dot_char := 'a'\n    \n    // Initialize a variable 'file_name_dot_dot_index'\
    \ to 0.\n    file_name_dot_dot_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_dot_length' to 0.\n    file_name_dot_dot_length := 0\n    \n\
    \    // Initialize a variable 'file_name_dot_dot_char' to 'a'.\n    file_name_dot_dot_char\
    \ := 'a'\n    \n    // Initialize a variable 'file_name_dot_dot_dot_index' to\
    \ 0.\n    file_name_dot_dot_dot_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_dot_dot_length' to 0.\n    file_name_dot_dot_dot_length := 0\n\
    \    \n    // Initialize a variable 'file_name_dot_dot_dot_char' to 'a'.\n   \
    \ file_name_dot_dot_dot_char := 'a'\n    \n    // Initialize a variable 'file_name_dot_dot_dot_dot_index'\
    \ to 0.\n    file_name_dot_dot_dot_dot_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_dot_dot_dot_length' to 0.\n    file_name_dot_dot_dot_dot_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_dot_dot_dot_char' to\
    \ 'a'.\n    file_name_dot_dot_dot_dot_char := 'a'\n    \n    // Initialize a variable\
    \ 'file_name_dot_dot_dot_dot_dot_index' to 0.\n    file_name_dot_dot_dot_dot_dot_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_dot_dot_dot_dot_length'\
    \ to 0.\n    file_name_dot_dot_dot_dot_dot_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_dot_dot_dot_dot_dot_char' to 'a'.\n    file_name_dot_dot_dot_dot_dot_char\
    \ := 'a'\n    \n    // Initialize a variable 'file_name_dot_dot_dot_dot_dot_dot_index'\
    \ to 0.\n    file_name_dot_dot_dot_dot_dot_dot_index := 0\n    \n    // Initialize\
    \ a variable 'file_name_dot_dot_dot_dot_\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa7rk48ev_test.go:78:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx47k_sbq_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 2. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if len(file_name) < 3 {\n        return \"No\"\n  \
    \  }\n\n    // 3. There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    if file_name[0] == '0' || file_name[0] == '9' {\n        return\
    \ \"No\"\n    }\n\n    // 4. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if file_name[len(file_name)-1] == '0' || file_name[len(file_name)-1]\
    \ == '9' {\n        return \"No\"\n    }\n\n    // 5. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 6. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 7. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 8. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 9. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 10. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 11. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 12. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 13. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 14. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 15. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-2]\
    \ == '.' {\n        return \"No\"\n    }\n\n    // 16. There should not be more\
    \ than three \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2i8kb3_test.go:96:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp9gh2idlc_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp9gh2idlc_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp9gh2idlc_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) < 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if len(file_name) > 3 {\n        return \"No\"\n  \
    \  }\n    \n    // 3. There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n    if file_name[0] < 'a' || file_name[0] > 'z' {\n      \
    \  return \"No\"\n    }\n    \n    // 4. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if file_name[1] < 'a' || file_name[1] > 'z'\
    \ {\n        return \"No\"\n    }\n    \n    // 5. There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n    if file_name[2] < '0' || file_name[2]\
    \ > '9' {\n        return \"No\"\n    }\n    \n    // 6. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    if file_name[len(file_name)-1]\
    \ < 'a' || file_name[len(file_name)-1] > 'z' {\n        return \"No\"\n    }\n\
    \    \n    // 7. There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    if file_name[len(file_name)-2] != 'txt' && file_name[len(file_name)-2]\
    \ != 'exe' && file_name[len(file_name)-2] != 'dll' {\n        return \"No\"\n\
    \    }\n    \n    // 8. There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n    if file_name[len(file_name)-1] != '.' {\n        return\
    \ \"No\"\n    }\n    \n    // 9. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if file_name[len(file_name)-2] != 'txt' && file_name[len(file_name)-2]\
    \ != 'exe' && file_name[len(file_name)-2] != 'dll' {\n        return \"No\"\n\
    \    }\n    \n    // 10. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if file_name[len(file_name)-1] != '.' {\n        return\
    \ \"No\"\n    }\n    \n    // 11. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if file_name[len(file_name)-2] != 'txt' && file_name[len(file_name)-2]\
    \ != 'exe' && file_name[len(file_name)-2] != 'dll' {\n        return \"No\"\n\
    \    }\n    \n    // 12. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    if file_name[len(file_name)-1] != '.' {\n        return\
    \ \"No\"\n    }\n    \n    // 13. There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxxek9rop_test.go:51:39: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Return Yes if the file's\
    \ name is valid\n    if file_name == \"\" || len(file_name) < 3 || file_name[0]\
    \ == '.' || file_name[len(file_name)-1] != 'txt' || file_name[len(file_name)-1]\
    \ != 'exe' || file_name[len(file_name)-1] != 'dll' {\n        return \"No\"\n\
    \    }\n    \n    // Return No if the file's name is invalid\n    if file_name[0]\
    \ == '0' || file_name[0] == '1' || file_name[0] == '2' || file_name[0] == '3'\
    \ || file_name[0] == '4' || file_name[0] == '5' || file_name[0] == '6' || file_name[0]\
    \ == '7' || file_name[0] == '8' || file_name[0] == '9' {\n        return \"No\"\
    \n    }\n    \n    // Return Yes if the file's name contains exactly one dot '.'\n\
    \    if file_name[len(file_name)-1] == '.' {\n        return \"Yes\"\n    }\n\
    \    \n    // Return No if the file's name does not contain exactly one dot '.'\n\
    \    if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n \
    \   \n    // Return Yes if the file's name starts with a letter from the latin\
    \ alphabet ('a' -'z' and 'A' -'Z')\n    if file_name[0] != 'a' && file_name[0]\
    \ != 'A' && file_name[0] != 'b' && file_name[0] != 'B' && file_name[0] != 'c'\
    \ && file_name[0] != 'C' && file_name[0] != 'd' && file_name[0] != 'D' && file_name[0]\
    \ != 'e' && file_name[0] != 'E' && file_name[0] != 'f' && file_name[0] != 'F'\
    \ && file_name[0] != 'g' && file_name[0] != 'G' && file_name[0] != 'h' && file_name[0]\
    \ != 'H' && file_name[0] != 'i' && file_name[0] != 'I' && file_name[0] != 'j'\
    \ && file_name[0] != 'J' && file_name[0] != 'k' && file_name[0] != 'K' && file_name[0]\
    \ != 'l' && file_name[0] != 'L' && file_name[0] != 'm' && file_name[0] != 'M'\
    \ && file_name[0] != 'n' && file_name[0] != 'N' && file_name[0] != 'o' && file_name[0]\
    \ != 'O' && file_name[0] != 'p' && file_name[0] != 'P' && file_name[0] != 'q'\
    \ && file_name[0] != 'Q' && file_name[0] != 'r' && file_name[0] != 'R' && file_name[0]\
    \ != 's' && file_name[0] != 'S' && file_name[0] != 't' && file_name[0] != 'T'\
    \ && file_name[0] != 'u' && file_name[0] != 'U' && file_name[0] != 'v' && file_name[0]\
    \ != 'V' && file_name[0] != 'w' && file_name[0] != 'W' && file_name[0] != 'x'\
    \ && file_name[0] != 'X' && file_name[0] != 'y' && file_name[0] != 'Y' && file_name[0]\
    \ != 'z' && file_name[0] != 'Z' {\n        return \"No\"\n    }\n    \n    //\
    \ Return No if the file's name does not start with a letter from the latin alphabet\
    \ ('a' -'z' and 'A' -'Z')\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm7p5o43z_test.go:22:103: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check that the file name contains exactly\
    \ one dot '.'\n    if file_name.Count() == 0 || file_name.Count() > 3 {\n    \
    \    return \"No\"\n    }\n    \n    // 2. Check that the substring before the\
    \ dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name.Count() == 0 {\n        return \"No\"\
    \n    }\n    \n    // 3. Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n    if file_name.Count() == 0 {\n        return\
    \ \"No\"\n    }\n    \n    // 4. Check that the file's name contains exactly one\
    \ dot '.'\n    if file_name.Count() == 0 || file_name.Count() > 3 {\n        return\
    \ \"No\"\n    }\n    \n    // 5. Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name.Count() == 0 {\n        return \"No\"\n    }\n  \
    \  \n    // 6. Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    if file_name.Count() == 0 {\n        return \"No\"\
    \n    }\n    \n    // 7. Check that the file's name contains exactly one dot '.'\n\
    \    if file_name.Count() == 0 || file_name.Count() > 3 {\n        return \"No\"\
    \n    }\n    \n    // 8. Check that the substring before the dot should not be\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if file_name.Count() == 0 {\n        return \"No\"\n    }\n    \n    // 9.\
    \ Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n    if file_name.Count() == 0 {\n        return \"No\"\n    }\n    \n\
    \    // 10. Check that the file's name contains exactly one dot '.'\n    if file_name.Count()\
    \ == 0 || file_name.Count() > 3 {\n        return \"No\"\n    }\n    \n    //\
    \ 11. Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name.Count()\
    \ == 0 {\n        return \"No\"\n    }\n    \n    // 12. Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name.Count()\
    \ == 0 {\n        return \"No\"\n    }\n    \n    // 13. Check that the file's\
    \ name contains exactly one dot '.'\n    if file_name.Count() == 0 || file_name.Count()\
    \ > 3 {\n        return \"No\"\n    }\n    \n    // 14. Check that the substring\
    \ before the dot should not be \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbanvphhx_test.go:86:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'.\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0.\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0.\n    dot_position := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2dh82yd_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check that the file's name contains exactly\
    \ one dot '.'\n    if file_name[0 : len(file_name)-1] != \".\" {\n        return\
    \ \"No\"\n    }\n    \n    // 2. Check that the file's name starts with a letter\
    \ from the latin alphabet ('a'-'z' and 'A'-'Z')\n    if file_name[0] < 'a' ||\
    \ file_name[0] > 'z' || file_name[0] < 'A' || file_name[0] > 'Z' {\n        return\
    \ \"No\"\n    }\n    \n    // 3. Check that the file's name contains only 'txt',\
    \ 'exe', 'dll' substrings\n    if file_name[len(file_name)-3 : len(file_name)]\
    \ != \"txt\" && file_name[len(file_name)-3 : len(file_name)] != \"exe\" && file_name[len(file_name)-3\
    \ : len(file_name)] != \"dll\" {\n        return \"No\"\n    }\n    \n    // 4.\
    \ Return Yes if the file's name is valid\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp852gtexf_test.go:77: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmp852gtexf_test.go:77: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmp852gtexf_test.go:77: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp852gtexf_test.go:77: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp852gtexf_test.go:77: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmp852gtexf_test.go:77: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmp852gtexf_test.go:77: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check the length of the file's name\n    if\
    \ len(file_name) > 3 {\n        return \"No\"\n    }\n    \n    // 2. Check the\
    \ file's name\n    if file_name[0] == '.' {\n        return \"No\"\n    }\n  \
    \  \n    // 3. Check the file's name\n    if file_name[0] == 'a' || file_name[0]\
    \ == 'A' {\n        return \"No\"\n    }\n    \n    // 4. Check the file's name\n\
    \    if file_name[len(file_name)-1] == '.' {\n        return \"No\"\n    }\n \
    \   \n    // 5. Check the file's name\n    if file_name[len(file_name)-1] == 'a'\
    \ || file_name[len(file_name)-1] == 'A' {\n        return \"No\"\n    }\n    \n\
    \    // 6. Check the file's name\n    if file_name[len(file_name)-1] == 'b' ||\
    \ file_name[len(file_name)-1] == 'B' {\n        return \"No\"\n    }\n    \n \
    \   // 7. Check the file's name\n    if file_name[len(file_name)-1] == 'c' ||\
    \ file_name[len(file_name)-1] == 'C' {\n        return \"No\"\n    }\n    \n \
    \   // 8. Check the file's name\n    if file_name[len(file_name)-1] == 'd' ||\
    \ file_name[len(file_name)-1] == 'D' {\n        return \"No\"\n    }\n    \n \
    \   // 9. Check the file's name\n    if file_name[len(file_name)-1] == 'e' ||\
    \ file_name[len(file_name)-1] == 'E' {\n        return \"No\"\n    }\n    \n \
    \   // 10. Check the file's name\n    if file_name[len(file_name)-1] == 'f' ||\
    \ file_name[len(file_name)-1] == 'F' {\n        return \"No\"\n    }\n    \n \
    \   // 11. Check the file's name\n    if file_name[len(file_name)-1] == 'g' ||\
    \ file_name[len(file_name)-1] == 'G' {\n        return \"No\"\n    }\n    \n \
    \   // 12. Check the file's name\n    if file_name[len(file_name)-1] == 'h' ||\
    \ file_name[len(file_name)-1] == 'H' {\n        return \"No\"\n    }\n    \n \
    \   // 13. Check the file's name\n    if file_name[len(file_name)-1] == 'i' ||\
    \ file_name[len(file_name)-1] == 'I' {\n        return \"No\"\n    }\n    \n \
    \   // 14. Check the file's name\n    if file_name[len(file_name)-1] == 'j' ||\
    \ file_name[len(file_name)-1] == 'J' {\n        return \"No\"\n    }\n    \n \
    \   // 15. Check the file's name\n    if file_name[len(file_name)-1] == 'k' ||\
    \ file_name[len(file_name)-1] == 'K' {\n        return \"No\"\n    }\n    \n \
    \   // 16. Check the file's name\n    if file_name[len(file_name)-1] == 'l' ||\
    \ file_name[len(file_name)-1] == 'L' {\n        return \"No\"\n    }\n    \n \
    \   // 17. Check the file's name\n    if file_name[len(file_name)-1] == 'm' ||\
    \ file_name[len(file_name)-1] == '\nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4_abcay2_test.go:101:77: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx47k_sbq_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return file_name\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpnxowgetq_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'dot_position' to\
    \ 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprd6gmwt_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Declare a variable called file_name of type string\n\
    \    file_name := file_name\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // Declare a variable called dot_count of type\
    \ int\n    dot_count := 0\n\n    // \nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgkcp6h_q_test.go:111:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. There should be exactly one dot '.'\n    if file_name[len(file_name)-1]\
    \ != '.' {\n        return \"No\"\n    }\n    \n    // 3. There should not be\
    \ an empty substring before the dot\n    if file_name[:len(file_name)-1] == \"\
    \" {\n        return \"No\"\n    }\n    \n    // 4. There should be one of these\
    \ ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"txt\", \"exe\", \"\
    dll\"}\n    \n    // 5. There should be one of these ['txt', 'exe', 'dll']\n \
    \   valid_extensions := []string{\"txt\", \"exe\", \"dll\"}\n    \n    // 6. There\
    \ should be one of these ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"\
    txt\", \"exe\", \"dll\"}\n    \n    // 7. There should be one of these ['txt',\
    \ 'exe', 'dll']\n    valid_extensions := []string{\"txt\", \"exe\", \"dll\"}\n\
    \    \n    // 8. There should be one of these ['txt', 'exe', 'dll']\n    valid_extensions\
    \ := []string{\"txt\", \"exe\", \"dll\"}\n    \n    // 9. There should be one\
    \ of these ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"txt\", \"\
    exe\", \"dll\"}\n    \n    // 10. There should be one of these ['txt', 'exe',\
    \ 'dll']\n    valid_extensions := []string{\"txt\", \"exe\", \"dll\"}\n    \n\
    \    // 11. There should be one of these ['txt', 'exe', 'dll']\n    valid_extensions\
    \ := []string{\"txt\", \"exe\", \"dll\"}\n    \n    // 12. There should be one\
    \ of these ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"txt\", \"\
    exe\", \"dll\"}\n    \n    // 13. There should be one of these ['txt', 'exe',\
    \ 'dll']\n    valid_extensions := []string{\"txt\", \"exe\", \"dll\"}\n    \n\
    \    // 14. There should be one of these ['txt', 'exe', 'dll']\n    valid_extensions\
    \ := []string{\"txt\", \"exe\", \"dll\"}\n    \n    // 15. There should be one\
    \ of these ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"txt\", \"\
    exe\", \"dll\"}\n    \n    // 16. There should be one of these ['txt', 'exe',\
    \ 'dll']\n    valid_extensions := []string{\"txt\", \"exe\", \"dll\"}\n    \n\
    \    // 17. There should be one of these ['txt', '\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjag80c9o_test.go:75:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpkpjcjmjq_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpkpjcjmjq_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpkpjcjmjq_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the valid file's\
    \ name\n    var valid_file_name string = \"No\"\n    \n    // Initialize a variable\
    \ to store the file's name without extension\n    var file_name_without_extension\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's name with\
    \ extension\n    var file_name_with_extension string = \"\"\n    \n    // Initialize\
    \ a variable to store the file's extension\n    var file_extension string = \"\
    \"\n    \n    // Initialize a variable to store the file's name without extension\n\
    \    var file_name_without_extension_check string = \"\"\n    \n    // Initialize\
    \ a variable to store the file's name with extension\n    var file_name_with_extension_check\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's extension\n\
    \    var file_extension_check string = \"\"\n    \n    // Initialize a variable\
    \ to store the file's name without extension\n    var file_name_without_extension_check_2\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's name with\
    \ extension\n    var file_name_with_extension_check_2 string = \"\"\n    \n  \
    \  // Initialize a variable to store the file's extension\n    var file_extension_check_2\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_check_3 string = \"\"\n    \n\
    \    // Initialize a variable to store the file's name with extension\n    var\
    \ file_name_with_extension_check_3 string = \"\"\n    \n    // Initialize a variable\
    \ to store the file's extension\n    var file_extension_check_3 string = \"\"\n\
    \    \n    // Initialize a variable to store the file's name without extension\n\
    \    var file_name_without_extension_check_4 string = \"\"\n    \n    // Initialize\
    \ a variable to store the file's name with extension\n    var file_name_with_extension_check_4\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's extension\n\
    \    var file_extension_check_4 string = \"\"\n    \n    // Initialize a variable\
    \ to store the file's name without extension\n    var file_name_without_extension_check_5\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's name with\
    \ extension\n    var file_name_with_extension_check_5 string = \"\"\n    \n  \
    \  // Initialize a variable to store the file's extension\n    var file_extension_check_5\
    \ string = \"\"\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_check_6 string = \"\"\n    \n\
    \    // Initialize a variable to store the file's name with extension\n    var\
    \ file_name_with_extension_check_6 string = \"\"\n    \n    // Initialize a variable\
    \ to store the file's extension\n    var file_extension_check_6 string = \"\"\n\
    \    \n    // Initialize a variable to store the file's name without \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk10m55qf_test.go:87:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'dot_position' to\
    \ 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_count' to\
    \ 0\n    dot_count := 0\n    \n    // Initialize a variable 'dot_length' to 0\n\
    \    dot_length := 0\n    \n    // Initialize a variable 'dot_name' to 0\n   \
    \ dot_name := 0\n    \n    // Initialize a variable 'dot_name_length' to 0\n \
    \   dot_name_length := 0\n    \n    // Initialize a variable 'dot_name_count'\
    \ to 0\n    dot_name_count := 0\n    \n    // Initialize a variable 'dot_name_char'\
    \ to 0\n    dot_name_char := 0\n    \n    // Initialize a variable 'dot_name_char_count'\
    \ to 0\n    dot_name_char_count := 0\n    \n    // Initialize a variable 'dot_name_char_index'\
    \ to 0\n    dot_name_char_index := 0\n    \n    // Initialize a variable 'dot_name_char_index_count'\
    \ to 0\n    dot_name_char_index_count := 0\n    \n    // Initialize a variable\
    \ 'dot_name_char_index_position' to 0\n    dot_name_char_index_position := 0\n\
    \    \n    // Initialize a variable 'dot_name_char_index_position_count' to 0\n\
    \    dot_name_char_index_position_count := 0\n    \n    // Initialize a variable\
    \ 'dot_name_char_index_position_char' to 0\n    dot_name_char_index_position_char\
    \ := 0\n    \n    // Initialize a variable 'dot_name_char_index_position_char_count'\
    \ to 0\n    dot_name_char_index_position_char_count := 0\n    \n    // Initialize\
    \ a variable 'dot_name_char_index_position_char_position' to 0\n    dot_name_char_index_position_char_position\
    \ := 0\n    \n    // Initialize a variable 'dot_name_char_index_position_char_position_count'\
    \ to 0\n    dot_name_char_index_position_char_position_count := 0\n    \n    //\
    \ Initialize a variable 'dot_name_char_index_position_char_position_char' to 0\n\
    \    dot_name_char_index_position_char_position_char := 0\n    \n    // Initialize\
    \ a variable 'dot_name_char_index_position_char_position_char_count' to 0\n  \
    \  dot_name_char_index_position_char_position_char_count := 0\n    \n    // Initialize\
    \ a variable 'dot_name_char_index_position_char_position_char_index' to 0\n  \
    \  dot_name_char_index_position_char_position_char_index := 0\n    \n    // Initialize\
    \ a variable 'dot_name_char_index_position_char_position_char_index_count' to\
    \ 0\n    dot_name_char_index_position_char_position_char_index_count := 0\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzo8g3anz_test.go:82:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_characters'\
    \ to 0\n    file_name_characters := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_length' to 0\n    file_name_characters_length_2 := 0\n\
    \    \n    // Initialize a variable 'file_name_characters_length' to 0\n    file_name_characters_length_3\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_length' to 0\n\
    \    file_name_characters_length_4 := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length_5 := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_length' to 0\n    file_name_characters_length_6 := 0\n\
    \    \n    // Initialize a variable 'file_name_characters_length' to 0\n    file_name_characters_length_7\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_length' to 0\n\
    \    file_name_characters_length_8 := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length_9 := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_length' to 0\n    file_name_characters_length_10 := 0\n\
    \    \n    // Initialize a variable 'file_name_characters_length' to 0\n    file_name_characters_length_11\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_length' to 0\n\
    \    file_name_characters_length_12 := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length_13 := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_length' to 0\n    file_name_characters_length_14 := 0\n\
    \    \n    // Initialize a variable 'file_name_characters_length' to 0\n    file_name_characters_length_15\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_length' to 0\n\
    \    file_name_characters_length_16 := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length_17 := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_length' to 0\n    file_name_characters_length_18 := 0\n\
    \    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd2zaps0__test.go:83:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt_kcty0p_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx47k_sbq_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075740
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Return Yes if the file's\
    \ name is valid\n    if file_name == \"\" {\n        return \"No\"\n    }\n  \
    \  \n    // Return No if the file's name contains more than three digits\n   \
    \ if strings.Count(file_name, \".\") > 3 {\n        return \"No\"\n    }\n   \
    \ \n    // Return No if the file's name contains less than one dot\n    if strings.Count(file_name,\
    \ \".\") == 0 {\n        return \"No\"\n    }\n    \n    // Return No if the file's\
    \ name starts with a letter from the latin alphabet\n    if strings.Index(file_name,\
    \ \".\") == 0 || strings.Index(file_name, \".\") == 1 {\n        return \"No\"\
    \n    }\n    \n    // Return No if the file's name contains any character other\
    \ than 'txt', 'exe', 'dll'\n    if !strings.Contains(file_name, \"txt\") && !strings.Contains(file_name,\
    \ \"exe\") && !strings.Contains(file_name, \"dll\") {\n        return \"No\"\n\
    \    }\n    \n    // Return Yes if the file's name is valid\n    return \"Yes\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo484my5q_test.go:27:8: undefined: strings

    /tmp/tmpo484my5q_test.go:32:8: undefined: strings

    /tmp/tmpo484my5q_test.go:37:8: undefined: strings

    /tmp/tmpo484my5q_test.go:42:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to indicate whether\
    \ the file's name is valid.\n    var is_valid = true\n\n    // Initialize a boolean\
    \ variable to indicate whether the file's name contains \n    // exactly one dot\
    \ ('.').\n    var contains_dot = false\n\n    // Initialize a boolean variable\
    \ to indicate whether the file's name starts with \n    // a letter from the latin\
    \ alphabet ('a' through 'z').\n    var contains_latin_letter = false\n\n    //\
    \ Initialize a boolean variable to indicate whether the file's name ends with\
    \ \n    // a letter from the latin alphabet ('A' through 'Z').\n    var contains_latin_letter_end\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll'.\n    var contains_substring_text\
    \ = false\n    var contains_substring_exe = false\n    var contains_substring_dll\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll_text\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll_text_exe_dll\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll_text_exe_dll_text\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll_text_exe_dll_text_exe_dll\
    \ = false\n\n    // Initialize a boolean variable to indicate whether the file's\
    \ name contains \n    // the substring 'txt', 'exe', 'dll', 'txt', 'exe', 'dll',\
    \ 'txt', 'exe', 'dll'\n    // and so on.\n    var contains_substring_text_exe_dll_text_exe_dll_text_exe_dll_text\
    \ = false\n\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpspazgzpo_test.go:72:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'true'.\n\
    \    var valid bool = true\n\n    // Initialize a variable 'file_name_length'\
    \ to 0.\n    var file_name_length int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var dot_position int = 0\n\n    // Initialize a variable 'dot_position'\
    \ to 0.\n    var \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoezxc13r_test.go:115:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n\n    // Initialize a variable 'dot_position' to 0\n\
    \    dot_position := 0\n\n    // Initialize a variable 'dot_count' to 0\n    dot_count\
    \ := 0\n\n    // Initialize a variable 'dot_string' to \"\"\n    dot_string :=\
    \ \"\"\n\n    // Initialize a variable 'dot_length' to 0\n    dot_length := 0\n\
    \n    // Initialize a variable 'dot_first_letter' to 'a'\n    dot_first_letter\
    \ := \"a\"\n\n    // Initialize a variable 'dot_second_letter' to 'z'\n    dot_second_letter\
    \ := \"z\"\n\n    // Initialize a variable 'dot_third_letter' to 'A'\n    dot_third_letter\
    \ := \"A\"\n\n    // Initialize a variable 'dot_fourth_letter' to 'Z'\n    dot_fourth_letter\
    \ := \"Z\"\n\n    // Initialize a variable 'dot_first_letter_position' to 0\n\
    \    dot_first_letter_position := 0\n\n    // Initialize a variable 'dot_second_letter_position'\
    \ to 0\n    dot_second_letter_position := 0\n\n    // Initialize a variable 'dot_third_letter_position'\
    \ to 0\n    dot_third_letter_position := 0\n\n    // Initialize a variable 'dot_fourth_letter_position'\
    \ to 0\n    dot_fourth_letter_position := 0\n\n    // Initialize a variable 'dot_first_letter_count'\
    \ to 0\n    dot_first_letter_count := 0\n\n    // Initialize a variable 'dot_second_letter_count'\
    \ to 0\n    dot_second_letter_count := 0\n\n    // Initialize a variable 'dot_third_letter_count'\
    \ to 0\n    dot_third_letter_count := 0\n\n    // Initialize a variable 'dot_fourth_letter_count'\
    \ to 0\n    dot_fourth_letter_count := 0\n\n    // Initialize a variable 'dot_first_letter_index'\
    \ to 0\n    dot_first_letter_index := 0\n\n    // Initialize a variable 'dot_second_letter_index'\
    \ to 0\n    dot_second_letter_index := 0\n\n    // Initialize a variable 'dot_third_letter_index'\
    \ to 0\n    dot_third_letter_index := 0\n\n    // Initialize a variable 'dot_fourth_letter_index'\
    \ to 0\n    dot_fourth_letter_index := 0\n\n    // Initialize a variable 'dot_first_letter_string'\
    \ to \"\"\n    dot_first_letter_string := \"\"\n\n    // Initialize a variable\
    \ 'dot_second_letter_string' to \"\"\n    dot_second_letter_string := \"\"\n\n\
    \    // Initialize a variable 'dot_third_letter_string' to \"\"\n    dot_third_letter_string\
    \ := \"\"\n\n    // Initialize a variable 'dot_fourth_letter_string' to \"\"\n\
    \    dot_fourth_letter_string := \"\"\n\n    // Initialize a variable 'dot_first_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfzyh1wg7_test.go:96:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmphhnyf2iv_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmphhnyf2iv_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmphhnyf2iv_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's name without extension.\n    file_name_without_extension := \"\"\n\
    \    \n    // Initialize a variable to hold the file's name without extension.\n\
    \    file_name_without_extension_2 := \"\"\n    \n    // Initialize a variable\
    \ to hold the file's name without extension.\n    file_name_without_extension_3\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_4 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_5\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_6 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_7\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_8 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_9\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_10 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_11\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_12 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_13\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_14 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_15\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name_without_extension_16 := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without extension.\n    file_name_without_extension_17\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension.\n    file_name\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdadmqo5m_test.go:82:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_substring'\
    \ to an empty string\n    file_name_substring := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_first_letter' to an empty string\n    file_name_first_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_last_letter' to an empty\
    \ string\n    file_name_last_letter := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_first_letter_length' to 0\n    file_name_first_letter_length := 0\n\
    \    \n    // Initialize a variable 'file_name_last_letter_length' to 0\n    file_name_last_letter_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_first_letter_count' to 0\n\
    \    file_name_first_letter_count := 0\n    \n    // Initialize a variable 'file_name_last_letter_count'\
    \ to 0\n    file_name_last_letter_count := 0\n    \n    // Initialize a variable\
    \ 'file_name_first_letter_count_length' to 0\n    file_name_first_letter_count_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_length'\
    \ to 0\n    file_name_last_letter_count_length := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_letter_count_index' to 0\n    file_name_first_letter_count_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_index'\
    \ to 0\n    file_name_last_letter_count_index := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_letter_count_index' to 0\n    file_name_first_letter_count_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_index'\
    \ to 0\n    file_name_last_letter_count_index := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_letter_count_index' to 0\n    file_name_first_letter_count_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_index'\
    \ to 0\n    file_name_last_letter_count_index := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_letter_count_index' to 0\n    file_name_first_letter_count_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_index'\
    \ to 0\n    file_name_last_letter_count_index := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_letter_count_index' to 0\n    file_name_first_letter_count_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_letter_count_index'\
    \ to 0\n    file_name_last_letter_count_index \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5r_cfec_test.go:82:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Declare a variable to store the return value.\n\
    \    result := \"No\"\n\n    // Declare a variable to store the file's name.\n\
    \    file_name := file_name\n\n    // Declare a variable to store the file's extension.\n\
    \    file_extension := \"\"\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // \nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpochudk8n_test.go:111:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n\n    // Initialize a variable 'file_extension' to an\
    \ empty string\n    file_extension := \"\"\n\n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n\n    // Initialize a variable\
    \ 'file_name_characters' to an empty string\n    file_name_characters := \"\"\n\
    \n    // Initialize a variable 'file_name_first_character' to an empty string\n\
    \    file_name_first_character := \"\"\n\n    // Initialize a variable 'file_name_last_character'\
    \ to an empty string\n    file_name_last_character := \"\"\n\n    // Initialize\
    \ a variable 'file_name_first_digit' to an empty string\n    file_name_first_digit\
    \ := \"\"\n\n    // Initialize a variable 'file_name_last_digit' to an empty string\n\
    \    file_name_last_digit := \"\"\n\n    // Initialize a variable 'file_name_first_letter'\
    \ to an empty string\n    file_name_first_letter := \"\"\n\n    // Initialize\
    \ a variable 'file_name_last_letter' to an empty string\n    file_name_last_letter\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_two_letters' to an\
    \ empty string\n    file_name_first_two_letters := \"\"\n\n    // Initialize a\
    \ variable 'file_name_last_two_letters' to an empty string\n    file_name_last_two_letters\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_three_letters' to an\
    \ empty string\n    file_name_first_three_letters := \"\"\n\n    // Initialize\
    \ a variable 'file_name_last_three_letters' to an empty string\n    file_name_last_three_letters\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_four_letters' to an\
    \ empty string\n    file_name_first_four_letters := \"\"\n\n    // Initialize\
    \ a variable 'file_name_last_four_letters' to an empty string\n    file_name_last_four_letters\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_five_letters' to an\
    \ empty string\n    file_name_first_five_letters := \"\"\n\n    // Initialize\
    \ a variable 'file_name_last_five_letters' to an empty string\n    file_name_last_five_letters\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_six_letters' to an\
    \ empty string\n    file_name_first_six_letters := \"\"\n\n    // Initialize a\
    \ variable 'file_name_last_six_letters' to an empty string\n    file_name_last_six_letters\
    \ := \"\"\n\n    // Initialize a variable 'file_name_first_seven_letters' to an\
    \ empty string\n    file_name_first_seven_letters := \"\"\n\n    // Initialize\
    \ a variable 'file_name_last_seven_letters' to an empty string\n    file_name\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeqjvxfc8_test.go:85:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'true'.\n\
    \    var valid bool = true\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0.\n    var file_name_length int = 0\n    \n    // Initialize a variable\
    \ 'file_name_char' to '0'.\n    var file_name_char int = 0\n    \n    // Initialize\
    \ a variable 'file_name_dot_position' to 0.\n    var file_name_dot_position int\
    \ = 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n \
    \   var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    var file_name_dot_position int = 0\n \
    \   \n    // Initialize a variable 'file_name_dot_position' to '0'.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    var file_name_dot_position int = 0\n \
    \   \n    // Initialize a variable 'file_name_dot_position' to '0'.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    var file_name_dot_position int = 0\n \
    \   \n    // Initialize a variable 'file_name_dot_position' to '0'.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    var file_name_dot_position int = 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    var file_name_dot_position int = 0\n \
    \   \n    // Initialize a variable 'file_name_dot_position' to '0'.\n    var file_name_dot_position\
    \ int = 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    var file_name_dot_position int = 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    var file_name_dot_position \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjfdimg8_test.go:84:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. file's name contains exactly one dot '.'\n    if\
    \ file_name[0] == '.' {\n        return \"No\"\n    }\n    \n    // 3. substring\
    \ before the dot should not be empty, and it starts with a letter from \n    //\
    \ the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[0] == '.' || file_name[0]\
    \ == '_' || file_name[0] == '-' {\n        return \"No\"\n    }\n    \n    //\
    \ 4. substring after the dot should be one of these: ['txt', 'exe', 'dll']\n \
    \   if file_name[len(file_name)-1] != 'txt' && file_name[len(file_name)-1] !=\
    \ 'exe' && file_name[len(file_name)-1] != 'dll' {\n        return \"No\"\n   \
    \ }\n    \n    // 5. file's name contains only letters.\n    if file_name[len(file_name)-1]\
    \ == '-' || file_name[len(file_name)-1] == '_' || file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n    \n    // 6. file's name contains\
    \ only letters and digits.\n    if file_name[len(file_name)-1] == '-' || file_name[len(file_name)-1]\
    \ == '_' || file_name[len(file_name)-1] == '.' || file_name[len(file_name)-1]\
    \ == '0' {\n        return \"No\"\n    }\n    \n    // 7. file's name contains\
    \ only letters, digits and dots.\n    if file_name[len(file_name)-1] == '-' ||\
    \ file_name[len(file_name)-1] == '_' || file_name[len(file_name)-1] == '.' ||\
    \ file_name[len(file_name)-1] == '0' || file_name[len(file_name)-1] == '1' {\n\
    \        return \"No\"\n    }\n    \n    // 8. file's name contains only letters,\
    \ digits, dots and '-'.\n    if file_name[len(file_name)-1] == '-' || file_name[len(file_name)-1]\
    \ == '_' || file_name[len(file_name)-1] == '.' || file_name[len(file_name)-1]\
    \ == '0' || file_name[len(file_name)-1] == '1' || file_name[len(file_name)-1]\
    \ == '2' {\n        return \"No\"\n    }\n    \n    // 9. file's name contains\
    \ only letters, digits, dots and '_'.\n    if file_name[len(file_name)-1] == '-'\
    \ || file_name[len(file_name)-1] == '_' || file_name[len(file_name)-1] == '.'\
    \ || file_name[len(file_name)-1] == '0' || file_name[len(file_name)-1] == '1'\
    \ || file_name[len(file_name)-1] == '2' || file_name[len(file_name)-1] == '3'\
    \ {\n        return \"No\"\n    }\n    \n    // 10. file's name contains only\
    \ letters, digits, dots and '.'.\n    if file_name[len(file_name)-1] == '-' ||\
    \ file_name[len(file_name)-1] == '_' || file_name[len(file_name)-1] == '.' ||\
    \ file_name[len(file_name)-1] == '0' || file_name[len(\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8em7nljy_test.go:37:39: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid.\n    valid := false\n    \n    // Initialize a boolean\
    \ variable to store whether the file's name contains \n    // exactly one dot\
    \ '.'.\n    contains_dot := false\n    \n    // Initialize a boolean variable\
    \ to store whether the file's name starts with \n    // a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    contains_letter := false\n    \n    //\
    \ Initialize a boolean variable to store whether the file's name contains \n \
    \   // the substring 'txt', 'exe', 'dll'.\n    contains_substring := false\n \
    \   \n    // Initialize a boolean variable to store whether the file's name contains\
    \ \n    // the substring 'txt', 'exe', 'dll', 'png', 'jpg', 'jpeg', 'gif', 'mp4',\
    \ 'mp3', 'wav', 'ogg', 'flac', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv',\
    \ 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov',\
    \ 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv',\
    \ 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb',\
    \ 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi',\
    \ 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv',\
    \ 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov',\
    \ 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv',\
    \ 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb',\
    \ 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi',\
    \ 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv',\
    \ 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov', 'wmv', 'rmvb', 'avi', 'mkv', 'mov',\
    \ 'wmv', 'rmvb', 'avi', 'mkv', 'mov\nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5lleekb_test.go:37:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return file_name\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpnxowgetq_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp228z1071_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp228z1071_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp228z1071_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpn1w5cqug_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpn1w5cqug_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpn1w5cqug_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0x3hpp8_test.go:166:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 2. The file's name contains exactly one dot '.'\n    if\
    \ file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n\n    //\
    \ 3. The substring before the dot should not be empty, and it starts with a letter\
    \ from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n\n    // 4. The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    dot_pos := strings.IndexRune(file_name,\
    \ '.')\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos\
    \ := dot_pos + 1\n    dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n\
    \    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos\
    \ + 1\n    dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_pos\
    \ == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n  \
    \  dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_pos == -1\
    \ {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos\
    \ := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_pos == -1 {\n    \
    \    return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos := strings.IndexRune(file_name,\
    \ '.', dot_pos)\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n\
    \    dot_pos := dot_pos + 1\n    dot_pos := strings.IndexRune(file_name, '.',\
    \ dot_pos)\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos\
    \ := dot_pos + 1\n    dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n\
    \    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos\
    \ + 1\n    dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_pos\
    \ == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n  \
    \  dot_pos := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_pos == -1\
    \ {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos\
    \ := strings.IndexRune(file_name, '.', dot_pos)\n    if dot_po\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu8ps14e__test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpa3i7ikwa_test.go:63: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpa3i7ikwa_test.go:63:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_first_character' to an empty string\n    file_name_first_character\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_last_character' to an\
    \ empty string\n    file_name_last_character := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_first_character_length' to 0\n    file_name_first_character_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_length' to\
    \ 0\n    file_name_last_character_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_last_character_position'\
    \ to 0\n    file_name_last_character_position := 0\n    \n    // Initialize a\
    \ variable 'file_name_first_character_position' to 0\n    file_name_first_character_position\
    \ := 0\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3i4dqw4z_test.go:85:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    return file_name\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpnxowgetq_test.go:62: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpnxowgetq_test.go:62: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpnxowgetq_test.go:62:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl6769xk_test.go:148:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075739
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check that the file name contains exactly\
    \ one dot ('.').\n    if file_name[len(file_name)-1] != '.' {\n        return\
    \ \"No\"\n    }\n\n    // 2. Check that the file's name does not contain more\
    \ than three digits ('0'-'9').\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 3. Check that the file's name does not contain any digit\
    \ after the dot.\n    if file_name[len(file_name)-1] == '.' {\n        \n    \
    \    // 3.1 Check that the substring before the dot starts with a letter from\
    \ the latin alphabet.\n        if file_name[:1] < 'a' || file_name[:1] > 'z' {\n\
    \            return \"No\"\n        }\n\n        // 3.2 Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n        if file_name[len(file_name)-2:len(file_name)]\
    \ != \"txt\" && file_name[len(file_name)-2:len(file_name)] != \"exe\" && file_name[len(file_name)-2:len(file_name)]\
    \ != \"dll\" {\n            return \"No\"\n        }\n    }\n\n    // 4. Check\
    \ that the file's name starts with a letter from the latin alphabet.\n    if file_name[:1]\
    \ < 'a' || file_name[:1] > 'z' {\n        return \"No\"\n    }\n\n    return \"\
    Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlyknoia_test.go:34:28: invalid operation: file_name[:1] < ''a'' (mismatched
    types string and untyped rune)

    /tmp/tmpmlyknoia_test.go:34:51: invalid operation: file_name[:1] > ''z'' (mismatched
    types string and untyped rune)

    /tmp/tmpmlyknoia_test.go:45:24: invalid operation: file_name[:1] < ''a'' (mismatched
    types string and untyped rune)

    /tmp/tmpmlyknoia_test.go:45:47: invalid operation: file_name[:1] > ''z'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075742
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Declare a variable to store the return value.\n\
    \    result := \"No\"\n\n    // Declare a variable to store the file's name.\n\
    \    file_name := file_name\n\n    // Declare a variable to store the file's extension.\n\
    \    file_extension := \"\"\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // Declare a variable to store the file's name.\n\
    \    dot_position := 0\n\n    // \nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpochudk8n_test.go:111:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9lvgm8ln_test.go:62: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9lvgm8ln_test.go:62: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9lvgm8ln_test.go:62: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075741
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpf8oy_tgz_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpf8oy_tgz_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpf8oy_tgz_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075740
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string.\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0.\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_first_letter' to 'a'.\n    file_name_first_letter := 'a'\n\
    \    \n    // Initialize a variable 'file_name_second_letter' to 'z'.\n    file_name_second_letter\
    \ := 'z'\n    \n    // Initialize a variable 'file_name_third_letter' to 'A'.\n\
    \    file_name_third_letter := 'A'\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_first_letter_count := 1\n    \n    // Initialize a variable\
    \ 'file_name_second_letter_count' to 1.\n    file_name_second_letter_count :=\
    \ 1\n    \n    // Initialize a variable 'file_name_third_letter_count' to 1.\n\
    \    file_name_third_letter_count := 1\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_first_letter_count := 1\n    \n    // Initialize a variable\
    \ 'file_name_second_letter_count' to 1.\n    file_name_second_letter_count :=\
    \ 1\n    \n    // Initialize a variable 'file_name_third_letter_count' to 1.\n\
    \    file_name_third_letter_count := 1\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_first_letter_count := 1\n    \n    // Initialize a variable\
    \ 'file_name_second_letter_count' to 1.\n    file_name_second_letter_count :=\
    \ 1\n    \n    // Initialize a variable 'file_name_third_letter_count' to 1.\n\
    \    file_name_third_letter_count := 1\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_first_letter_count := 1\n    \n    // Initialize a variable\
    \ 'file_name_second_letter_count' to 1.\n    file_name_second_letter_count :=\
    \ 1\n    \n    // Initialize a variable 'file_name_third_letter_count' to 1.\n\
    \    file_name_third_letter_count := 1\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_first_letter_count := 1\n    \n    // Initialize a variable\
    \ 'file_name_second_letter_count' to 1.\n    file_name_second_letter_count :=\
    \ 1\n    \n    // Initialize a variable 'file_name_third_letter_count' to 1.\n\
    \    file_name_third_letter_count := 1\n    \n    // Initialize a variable 'file_name_first_letter_count'\
    \ to 1.\n    file_name_\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8tkrrmg_test.go:85:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075741
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check that the file's name contains exactly\
    \ one dot '.'\n    if file_name_check_test.ContainsDots(file_name) == false {\n\
    \        return \"No\"\n    }\n    \n    // 2. Check that the file's name contains\
    \ no more than three digits ('0'-'9')\n    if file_name_check_test.ContainsDigits(file_name)\
    \ == false {\n        return \"No\"\n    }\n    \n    // 3. Check that the file's\
    \ name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n  \
    \  if file_name_check_test.ContainsLetters(file_name) == false {\n        return\
    \ \"No\"\n    }\n    \n    // 4. Check that the file's name contains one of the\
    \ following strings: ['txt', 'exe', 'dll']\n    if file_name_check_test.ContainsFileTypes(file_name)\
    \ == false {\n        return \"No\"\n    }\n    \n    // 5. Return Yes if the\
    \ file's name is valid\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9tz_en8_test.go:21:8: undefined: file_name_check_test

    /tmp/tmpg9tz_en8_test.go:26:8: undefined: file_name_check_test

    /tmp/tmpg9tz_en8_test.go:31:8: undefined: file_name_check_test

    /tmp/tmpg9tz_en8_test.go:36:8: undefined: file_name_check_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075742
