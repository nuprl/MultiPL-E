language: go_test.go
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    \n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    switch\
    \ month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day > 29 {\n\
    \            return false\n        }\n    case 4, 6, 9, 11:\n        if day <\
    \ 1 || day > 30 {\n            return false\n        }\n    case 2:\n        if\
    \ day < 1 || day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5vu342vp_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    days := days_in_month(year, month)\n  \
    \  if days > 31 {\n        return false\n    }\n    if days > 30 {\n        return\
    \ false\n    }\n    if month > 12 {\n        return false\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false\n    }\n    if month < 1 || month > 12\
    \ {\n        return false\n    }\n    if year < 1000 || year > 9999 {\n      \
    \  return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfninmyko_test.go:19:25: undefined: split_date

    /tmp/tmpfninmyko_test.go:20:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || month == 2 && day > 29 {\n        return false\n    }\n    if\
    \ year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa0epr37h_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := get_date(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1900 || (year > 2099 && year < 2100) {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9hnjxe4_test.go:19:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpns0m5kxr_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n\
    \        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n   \
    \ if err != nil {\n        return false\n    }\n\n    year, err := strconv.Atoi(parts[2])\n\
    \    if err != nil {\n        return false\n    }\n\n    if day < 1 || day > 31\
    \ || month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9v9aqrvt_test.go:20:14: undefined: strings

    /tmp/tmp9v9aqrvt_test.go:25:17: undefined: strconv

    /tmp/tmp9v9aqrvt_test.go:30:19: undefined: strconv

    /tmp/tmp9v9aqrvt_test.go:35:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    days := count_days(day, month, year)\n\
    \    if days > 31 || days < 1 || days > 29 || month > 12 || month < 1 {\n    \
    \    return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vo8_cme_test.go:19:25: undefined: split_date

    /tmp/tmp0vo8_cme_test.go:20:13: undefined: count_days

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1:\n        if day < 1 || day > 29 {\n           \
    \ return false\n        }\n    case 3:\n        if day < 1 || day > 31 {\n   \
    \         return false\n        }\n    case 5:\n        if day < 1 || day > 30\
    \ {\n            return false\n        }\n    case 7:\n        if day < 1 || day\
    \ > 31 {\n            return false\n        }\n    case 8:\n        if day < 1\
    \ || day > 30 {\n            return false\n        }\n    case 10:\n        if\
    \ day < 1 || day > 31 {\n            return false\n        }\n    case 12:\n \
    \       if day < 1 || day > 31 {\n            return false\n        }\n    default:\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01mi7fpu_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    days := []int{0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    months\
    \ := []int{0, 12, 1, 4, 7, 2, 6, 9, 3, 11, 5, 10, 8}\n\n    dayInt, err := strconv.Atoi(day)\n\
    \    if err != nil {\n        return false\n    }\n\n    monthInt, err := strconv.Atoi(month)\n\
    \    if err != nil {\n        return false\n    }\n\n    yearInt, err := strconv.Atoi(year)\n\
    \    if err != nil {\n        return false\n    }\n\n    if dayInt > days[monthInt]\
    \ {\n        return false\n    }\n\n    if monthInt > months[yearInt] {\n    \
    \    return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc318zoc_test.go:20:14: undefined: strings

    /tmp/tmpvc318zoc_test.go:26:24: undefined: strings

    /tmp/tmpvc318zoc_test.go:27:24: undefined: strings

    /tmp/tmpvc318zoc_test.go:32:20: undefined: strconv

    /tmp/tmpvc318zoc_test.go:37:22: undefined: strconv

    /tmp/tmpvc318zoc_test.go:42:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code goes here\n    \n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpbny2cxti_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpbny2cxti_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpbny2cxti_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpbny2cxti_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpbny2cxti_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpbny2cxti_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day := strings.TrimSpace(day)\n\
    \    month := strings.TrimSpace(month)\n    year := strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.Tri\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpouaoh1_q_test.go:45:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppwp69kbl_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    if month ==\
    \ 1 {\n        if day > 31 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0ulc7l0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    dayInt, _ :=\
    \ strconv.Atoi(day)\n    monthInt, _ := strconv.Atoi(month)\n    yearInt, _ :=\
    \ strconv.Atoi(year)\n    if dayInt < 1 || dayInt > 31 || monthInt < 1 || monthInt\
    \ > 12 || yearInt < 1 || yearInt > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pel5smf_test.go:19:14: undefined: strings

    /tmp/tmp_pel5smf_test.go:24:18: undefined: strconv

    /tmp/tmp_pel5smf_test.go:25:20: undefined: strconv

    /tmp/tmp_pel5smf_test.go:26:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykk58lbt_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    year, err :=\
    \ strconv.Atoi(year)\n    if err != nil {\n        return false\n    }\n    month,\
    \ err = strconv.Atoi(month)\n    if err != nil {\n        return false\n    }\n\
    \    day, err = strconv.Atoi(day)\n    if err != nil {\n        return false\n\
    \    }\n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 ||\
    \ year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ut5sd_s_test.go:19:14: undefined: strings

    /tmp/tmp6ut5sd_s_test.go:24:18: undefined: strconv

    /tmp/tmp6ut5sd_s_test.go:28:18: undefined: strconv

    /tmp/tmp6ut5sd_s_test.go:32:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykk58lbt_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  monthDays := []int{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334}\n\
    \    monthDays[month-1]\n    if day > monthDays[month-1] {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4pu8_33_test.go:19:25: undefined: split_date

    /tmp/tmpr4pu8_33_test.go:24:5: monthDays[month - 1] (variable of type int) is
    not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := 0, 0, 0\n    day, month, year = parseDate(date)\n\n    if\
    \ day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n\
    \        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n \
    \           return false\n        }\n    }\n\n    if month == 4 || month == 6\
    \ || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    }\n\n    if month == 1 {\n        if day > 31 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda5l2a_w_test.go:21:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := 0, 0, 0\n    \n    day, month, year = parseDate(date)\n\
    \    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 ||\
    \ year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5xdlxbe_test.go:22:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpsk4bje_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    month, day, year := parts[0], parts[1], parts[2]\n    month := strings.ToLower(month)\n\
    \    day := strings.ToLower(day)\n    year := strings.ToLower(year)\n    if month\
    \ == \"jan\" || month == \"feb\" || month == \"mar\" || month == \"apr\" || month\
    \ == \"may\" || month == \"jun\" || month == \"jul\" || month == \"aug\" || month\
    \ == \"sep\" || month == \"oct\" || month == \"nov\" || month == \"dec\" {\n \
    \       if day == \"01\" {\n            if year == \"jan\" || year == \"feb\"\
    \ || year == \"mar\" || year == \"apr\" || year == \"may\" || year == \"jun\"\
    \ || year == \"jul\" || year == \"aug\" || year == \"sep\" || year == \"oct\"\
    \ || year == \"nov\" || year == \"dec\" {\n                return true\n     \
    \       }\n        }\n    }\n    if month == \"apr\" || month == \"may\" || month\
    \ == \"jun\" || month == \"jul\" || month == \"aug\" || month == \"sep\" || month\
    \ == \"oct\" || month == \"nov\" || month == \"dec\" {\n        if day == \"31\"\
    \ {\n            if year == \"jan\" || year == \"feb\" || year == \"mar\" || year\
    \ == \"apr\" || year == \"may\" || year == \"jun\" || year == \"jul\" || year\
    \ == \"aug\" || year == \"sep\" || year == \"oct\" || year == \"nov\" || year\
    \ == \"dec\" {\n                return true\n            }\n        }\n    }\n\
    \    if month == \"jan\" || month == \"feb\" || month == \"mar\" || month == \"\
    apr\" || month == \"may\" || month == \"jun\" || month == \"jul\" || month ==\
    \ \"aug\" || month == \"sep\" || month == \"oct\" || month == \"nov\" || month\
    \ == \"dec\" {\n        if day == \"30\" {\n            if year == \"jan\" ||\
    \ year == \"feb\" || year == \"mar\" || year == \"apr\" || year == \"may\" ||\
    \ year == \"jun\" || year == \"jul\" || year == \"aug\" || year == \"sep\" ||\
    \ year == \"oct\" || year == \"nov\" || year == \"dec\" {\n                return\
    \ true\n            }\n        }\n    }\n    if month == \"apr\" || month == \"\
    may\" || month == \"jun\" || month == \"jul\" || month == \"aug\" || month ==\
    \ \"sep\" || month == \"oct\" || month == \"nov\" || month == \"dec\" {\n    \
    \    if day == \"29\" {\n            if year == \"jan\" || year == \"feb\" ||\
    \ year == \"mar\" || year == \"apr\" || year == \"may\" || year == \"jun\" ||\
    \ year == \"jul\" || year == \"aug\" || year == \"sep\" || year == \"oct\" ||\
    \ year == \"nov\" || \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_a3u9beu_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := get_date_components(date)\n\n    if day < 1 || day > 31\
    \ || month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3jbqzktx_test.go:20:25: undefined: get_date_components

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ _ := strconv.Atoi(date[2:4])\n    if day < 1 || day > 31 || day > 29 {\n   \
    \     return false\n    }\n    month, _ := strconv.Atoi(date[0:2])\n    if month\
    \ < 1 || month > 12 {\n        return false\n    }\n    year, _ := strconv.Atoi(date[4:8])\n\
    \    if year < 1000 || year > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhcsq5au_test.go:19:15: undefined: strconv

    /tmp/tmpxhcsq5au_test.go:23:17: undefined: strconv

    /tmp/tmpxhcsq5au_test.go:27:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := get_date(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1950 || year > 2050 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjlprqe6m_test.go:19:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    days := 0\n    switch month {\n    case \"jan\", \"january\", \"jan \",\
    \ \"january\", \"januari\", \"januaria\", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \",\
    \ \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \",\
    \ \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \",\
    \ \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \",\
    \ \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \",\
    \ \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan\
    \ \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\
    jan \", \"jan \", \"jan \", \"jan \", \"jan \", \"\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4bud1d3n_test.go:31:1118: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    // Your code here\n \
    \   \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp20o902am_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp20o902am_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp20o902am_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp20o902am_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp20o902am_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp20o902am_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := get_date(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17tdjipd_test.go:20:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbufqwav0_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    days := parts[2]\n    days := strings.Replace(days, \"-\", \"\", -1)\n\
    \    days := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(days, \"/\", \"\", -1)\n    days\
    \ := strings.Replace(days, \"/\", \"\", -1)\n    days := strings.Replace(days,\
    \ \"/\", \"\", -1)\n    days := strings.Replace(day\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprm8s2_15_test.go:60:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_parts\
    \ := strings.Split(date, \"-\")\n    if len(date_parts) != 3 {\n        return\
    \ false\n    }\n    month := int(date_parts[0])\n    day := int(date_parts[1])\n\
    \    year := int(date_parts[2])\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n  \
    \  if month == 2 && day > 29 {\n        return false\n    }\n    if month == 4\
    \ || month == 6 || month == 9 || month == 11 && day > 30 {\n        return false\n\
    \    }\n    if month == 1 && day > 31 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsj_reom_test.go:19:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    month, day, year := parts[0], parts[1], parts[2]\n    month, day,\
    \ year = strings.ToUpper(month), strings.ToUpper(day), strings.ToUpper(year)\n\
    \    switch month {\n    case \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"\
    JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\":\n        if month\
    \ == \"JAN\" {\n            month = \"01\"\n        } else if month == \"FEB\"\
    \ {\n            month = \"02\"\n        } else if month == \"MAR\" {\n      \
    \      month = \"03\"\n        } else if month == \"APR\" {\n            month\
    \ = \"04\"\n        } else if month == \"MAY\" {\n            month = \"05\"\n\
    \        } else if month == \"JUN\" {\n            month = \"06\"\n        } else\
    \ if month == \"JUL\" {\n            month = \"07\"\n        } else if month ==\
    \ \"AUG\" {\n            month = \"08\"\n        } else if month == \"SEP\" {\n\
    \            month = \"09\"\n        } else if month == \"OCT\" {\n          \
    \  month = \"10\"\n        } else if month == \"NOV\" {\n            month = \"\
    11\"\n        } else if month == \"DEC\" {\n            month = \"12\"\n     \
    \   }\n        if day == \"\" {\n            return false\n        }\n       \
    \ if day == \"01\" {\n            day = \"01\"\n        } else if day == \"02\"\
    \ {\n            day = \"02\"\n        } else if day == \"03\" {\n           \
    \ day = \"03\"\n        } else if day == \"04\" {\n            day = \"04\"\n\
    \        } else if day == \"05\" {\n            day = \"05\"\n        } else if\
    \ day == \"06\" {\n            day = \"06\"\n        } else if day == \"07\" {\n\
    \            day = \"07\"\n        } else if day == \"08\" {\n            day\
    \ = \"08\"\n        } else if day == \"09\" {\n            day = \"09\"\n    \
    \    } else if day == \"10\" {\n            day = \"10\"\n        } else if day\
    \ == \"11\" {\n            day = \"11\"\n        } else if day == \"12\" {\n \
    \           day = \"12\"\n        }\n        if year == \"\" {\n            return\
    \ false\n        }\n        if year == \"0000\" {\n            return false\n\
    \        }\n        if year == \"0001\" {\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4w934o64_test.go:88:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    if month ==\
    \ 1 {\n        if day > 31 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0ulc7l0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    }\n\n    if month == 4 || month == 6 || month == 9 ||\
    \ month == 11 {\n        if day < 1 || day > 30 {\n            return false\n\
    \        }\n    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9rx5520_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_parts\
    \ := strings.Split(date, \"-\")\n    if len(date_parts) != 3 {\n        return\
    \ false\n    }\n    month, day, year := date_parts[0], date_parts[1], date_parts[2]\n\
    \    month := strings.ToLower(month)\n    day := strings.ToLower(day)\n    year\
    \ := strings.ToLower(year)\n    if month == \"jan\" || month == \"feb\" || month\
    \ == \"mar\" || month == \"apr\" || month == \"may\" || month == \"jun\" || month\
    \ == \"jul\" || month == \"aug\" || month == \"sep\" || month == \"oct\" || month\
    \ == \"nov\" || month == \"dec\" {\n        if day == \"01\" || day == \"02\"\
    \ || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day ==\
    \ \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" ||\
    \ day == \"12\" {\n            if year == \"19\" || year == \"20\" || year ==\
    \ \"21\" || year == \"22\" || year == \"23\" || year == \"24\" || year == \"25\"\
    \ || year == \"26\" || year == \"27\" || year == \"28\" || year == \"29\" || year\
    \ == \"30\" || year == \"31\" {\n                return true\n            }\n\
    \        }\n    }\n    if month == \"apr\" || month == \"may\" || month == \"\
    jun\" || month == \"jul\" || month == \"aug\" || month == \"sep\" || month ==\
    \ \"oct\" || month == \"nov\" || month == \"dec\" {\n        if day == \"01\"\
    \ || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day ==\
    \ \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" ||\
    \ day == \"11\" || day == \"12\" {\n            if year == \"19\" || year == \"\
    20\" || year == \"21\" || year == \"22\" || year == \"23\" || year == \"24\" ||\
    \ year == \"25\" || year == \"26\" || year == \"27\" || year == \"28\" || year\
    \ == \"29\" || year == \"30\" || year == \"31\" {\n                return true\n\
    \            }\n        }\n    }\n    if month == \"jan\" || month == \"feb\"\
    \ || month == \"mar\" || month == \"apr\" || month == \"may\" || month == \"jun\"\
    \ || month == \"jul\" || month == \"aug\" || month == \"sep\" || month == \"oct\"\
    \ || month == \"nov\" || month == \"dec\" {\n        if day == \"01\" || day ==\
    \ \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" ||\
    \ day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"\
    11\" || day == \"12\" {\n            if year == \"19\" || year == \"20\" || year\
    \ == \"\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd27is59l_test.go:43:56: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := get_date(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuncxn7q8_test.go:19:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    year, err := strconv.Atoi(parts[0])\n    if err != nil {\n       \
    \ return false\n    }\n    month, err := strconv.Atoi(parts[1])\n    if err !=\
    \ nil {\n        return false\n    }\n    day, err := strconv.Atoi(parts[2])\n\
    \    if err != nil {\n        return false\n    }\n    if day < 1 || day > 31\
    \ || month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq4v4581_test.go:19:14: undefined: strings

    /tmp/tmplq4v4581_test.go:23:18: undefined: strconv

    /tmp/tmplq4v4581_test.go:27:19: undefined: strconv

    /tmp/tmplq4v4581_test.go:31:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, err := strconv.Atoi(parts[0])\n    if err != nil {\n        return\
    \ false\n    }\n    month, err := strconv.Atoi(parts[1])\n    if err != nil {\n\
    \        return false\n    }\n    year, err := strconv.Atoi(parts[2])\n    if\
    \ err != nil {\n        return false\n    }\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprpurle9a_test.go:19:14: undefined: strings

    /tmp/tmprpurle9a_test.go:23:17: undefined: strconv

    /tmp/tmprpurle9a_test.go:27:19: undefined: strconv

    /tmp/tmprpurle9a_test.go:31:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    }\n\n    if month == 4 || month == 6 || month == 9 ||\
    \ month == 11 {\n        if day < 1 || day > 30 {\n            return false\n\
    \        }\n    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9rx5520_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n        \
    \    return false\n        }\n    }\n    \n    if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    }\n    \n    if month == 2 {\n        if day < 1 || day\
    \ > 28 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3p09_oez_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqikb_zg_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code goes here\n    \n    \n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    year, err := strconv.Atoi(parts[0])\n    if err != nil {\n       \
    \ return false\n    }\n    month, err := strconv.Atoi(parts[1])\n    if err !=\
    \ nil {\n        return false\n    }\n    day, err := strconv.Atoi(parts[2])\n\
    \    if err != nil {\n        return false\n    }\n    if year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 || day > 31 || (month == 2 && day > 29) {\n   \
    \     return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2cb02jfn_test.go:19:14: undefined: strings

    /tmp/tmp2cb02jfn_test.go:23:18: undefined: strconv

    /tmp/tmp2cb02jfn_test.go:27:19: undefined: strconv

    /tmp/tmp2cb02jfn_test.go:31:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    if month ==\
    \ 1 {\n        if day > 31 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0ulc7l0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1__v435v_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpsk4bje_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075308
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_parts\
    \ := strings.Split(date, \"-\")\n    if len(date_parts) != 3 {\n        return\
    \ false\n    }\n    day, month, year := date_parts[0], date_parts[1], date_parts[2]\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw79e4pf4_test.go:44:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := 0, 0, 0\n    \n    day, month, year = parseDate(date)\n\
    \    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 ||\
    \ year > 9999 {\n        return false\n    }\n    \n    if month == 2 {\n    \
    \    if day > 29 {\n            return false\n        }\n    }\n    \n    if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n \
    \           return false\n        }\n    }\n    \n    if month == 2 {\n      \
    \  if day > 28 {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43fo68u5_test.go:22:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88e9hsfu_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    m, d, y := parts[0], parts[1], parts[2]\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToUpper(m),\
    \ strings.ToUpper(d), strings.ToUpper(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToUpper(m),\
    \ strings.ToUpper(d), strings.ToUpper(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToUpper(m),\
    \ strings.ToUpper(d), strings.ToUpper(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToUpper(m),\
    \ strings.ToUpper(d), strings.ToUpper(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToUpper(m),\
    \ strings.ToUpper(d), strings.ToUpper(y)\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    m, d, y = strings.TrimSpace(\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplp4nybk6_test.go:45:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := 0, 0, 0\n    day, month, year = parseDate(date)\n\n    if\
    \ day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n\
    \        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n \
    \           return false\n        }\n    }\n\n    if month == 4 || month == 6\
    \ || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    }\n\n    if month == 2 {\n        if day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4n7ubue_test.go:21:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := getDateParts(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptr1c9p9y_test.go:19:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    // Check valid day\n    if day <\
    \ 1 || day > 31 || day == 30 || day == 29 {\n        return false\n    }\n\n \
    \   // Check valid month\n    if month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    // Check valid year\n    if year < 1000 || year > 9999 {\n     \
    \   return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0fl3t0i_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 30 || month\
    \ < 1 || month > 2 {\n        return false\n    }\n\n    // Check valid number\
    \ of days\n    if day < 1 || day > 29 {\n        return false\n    }\n\n    //\
    \ Check valid number of days\n    if day < 1 || day > 31 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 30 {\n  \
    \      return false\n    }\n\n    // Check valid number of days\n    if day <\
    \ 1 || day > 31 {\n        return false\n    }\n\n    // Check valid number of\
    \ days\n    if day < 1 || day > 30 {\n        return false\n    }\n\n    // Check\
    \ valid number of days\n    if day < 1 || day > 31 {\n        return false\n \
    \   }\n\n    // Check valid number of days\n    if day < 1 || day > 30 {\n   \
    \     return false\n    }\n\n    // Check valid number of days\n    if day < 1\
    \ || day > 31 {\n        return false\n    }\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 30 {\n        return false\n    }\n\n    // Check valid\
    \ number of days\n    if day < 1 || day > 31 {\n        return false\n    }\n\n\
    \    // Check valid number of days\n    if day < 1 || day > 30 {\n        return\
    \ false\n    }\n\n    // Check valid number of days\n    if day < 1 || day > 31\
    \ {\n        return false\n    }\n\n    // Check valid number of days\n    if\
    \ day < 1 || day > 30 {\n        return false\n    }\n\n    // Check valid number\
    \ of days\n    if day < 1 || day > 31 {\n        return false\n    }\n\n    //\
    \ Check valid number of days\n    if day < 1 || day > 30 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 31 {\n  \
    \      return false\n    }\n\n    // Check valid number of days\n    if day <\
    \ 1 || day > 30 {\n        return false\n    }\n\n    // Check valid number of\
    \ days\n    if day < 1 || day > 31 {\n        return false\n    }\n\n    // Check\
    \ valid number of days\n    if day < 1 || day > 30 {\n        return false\n \
    \   }\n\n    // Check valid number of days\n    if day < 1 || day > 31 {\n   \
    \     return false\n    }\n\n    // Check valid number of days\n    if day < 1\
    \ || day > 30 {\n        return false\n    }\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 31 {\n        return false\n    }\n\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5lb6z3ve_test.go:143:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgw6un3_l_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgw6un3_l_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgw6un3_l_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgw6un3_l_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgw6un3_l_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgw6un3_l_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbufqwav0_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return\
    \ false\n    }\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n\
    \        return false\n    }\n    year, err := strconv.Atoi(parts[2])\n    if\
    \ err != nil {\n        return false\n    }\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbmxc2rf_test.go:19:14: undefined: strings

    /tmp/tmpwbmxc2rf_test.go:23:17: undefined: strconv

    /tmp/tmpwbmxc2rf_test.go:27:19: undefined: strconv

    /tmp/tmpwbmxc2rf_test.go:31:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n        \
    \    return false\n        }\n    }\n    \n    if month == 4 {\n        if day\
    \ < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if\
    \ month == 6 {\n        if day < 1 || day > 31 {\n            return false\n \
    \       }\n    }\n    \n    if month == 9 {\n        if day < 1 || day > 30 {\n\
    \            return false\n        }\n    }\n    \n    if month == 11 {\n    \
    \    if day < 1 || day > 31 {\n            return false\n        }\n    }\n  \
    \  \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    }\n    \n    if month == 4 {\n        if day < 1 || day\
    \ > 30 {\n            return false\n        }\n    }\n    \n    if month == 6\
    \ {\n        if day < 1 || day > 31 {\n            return false\n        }\n \
    \   }\n    \n    if month == 9 {\n        if day < 1 || day > 30 {\n         \
    \   return false\n        }\n    }\n    \n    if month == 11 {\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsapp4ihh_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppwp69kbl_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    days := days_in_month(year, month)\n  \
    \  if days > 31 || days < 1 {\n        return false\n    }\n    if month > 12\
    \ || month < 1 {\n        return false\n    }\n    if year < 1000 || year > 9999\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm16v1ot4_test.go:19:25: undefined: split_date

    /tmp/tmpm16v1ot4_test.go:20:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    if month ==\
    \ 1 {\n        if day > 31 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0ulc7l0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day > 30 {\n            return false\n        }\n    }\n\n\
    \    if month == 2 {\n        if day > 28 {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbv8g65__test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 {\n        if day < 1 || day > 30 {\n   \
    \         return false\n        }\n    }\n    if month == 6 {\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n    }\n    if month\
    \ == 9 {\n        if day < 1 || day > 31 {\n            return false\n       \
    \ }\n    }\n    if month == 11 {\n        if day < 1 || day > 30 {\n         \
    \   return false\n        }\n    }\n    if month == 2 {\n        if day < 1 ||\
    \ day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpntw74sph_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    month, day, year := parts[0], parts[1], parts[2]\n    month\
    \ := strings.TrimSpace(month)\n    day := strings.TrimSpace(day)\n    year :=\
    \ strings.TrimSpace(year)\n\n    month, day, year = strings.ToLower(month), strings.ToLower(day),\
    \ strings.ToLower(year)\n\n    switch month {\n    case \"january\", \"jan\",\
    \ \"1\":\n        month = string(January)\n    case \"february\", \"feb\", \"\
    2\":\n        month = string(February)\n    case \"march\", \"mar\", \"3\":\n\
    \        month = string(March)\n    case \"april\", \"apr\", \"4\":\n        month\
    \ = string(April)\n    case \"may\", \"may\", \"5\":\n        month = string(May)\n\
    \    case \"june\", \"jun\", \"6\":\n        month = string(June)\n    case \"\
    july\", \"jul\", \"7\":\n        month = string(July)\n    case \"august\", \"\
    aug\", \"8\":\n        month = string(August)\n    case \"september\", \"sep\"\
    , \"9\":\n        month = string(September)\n    case \"october\", \"oct\", \"\
    10\":\n        month = string(October)\n    case \"november\", \"nov\", \"11\"\
    :\n        month = string(November)\n    case \"december\", \"dec\", \"12\":\n\
    \        month = string(December)\n    default:\n        return false\n    }\n\
    \n    switch day {\n    case \"01\", \"1\", \"january\", \"jan\", \"1\":\n   \
    \     day = string(January)\n    case \"02\", \"2\", \"february\", \"feb\", \"\
    2\":\n        day = string(February)\n    case \"03\", \"3\", \"march\", \"mar\"\
    , \"3\":\n        day = string(March)\n    case \"04\", \"4\", \"april\", \"apr\"\
    , \"4\":\n        day = string(April)\n    case \"05\", \"5\", \"may\", \"may\"\
    , \"5\":\n        day = string(May)\n    case \"06\", \"6\", \"june\", \"jun\"\
    , \"6\":\n        day = string(June)\n    case \"07\", \"7\", \"july\", \"jul\"\
    , \"7\":\n        day = string(July)\n    case \"08\", \"8\", \"august\", \"aug\"\
    , \"8\":\n        day = string(August)\n    case \"09\", \"9\", \"september\"\
    , \"sep\", \"9\":\n        day = string(September)\n    case \"10\", \"10\", \"\
    october\", \"oct\", \"10\":\n        day = string(October)\n    case \"\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuj5egjn0_test.go:82:10: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp6xn2rw2l_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp6xn2rw2l_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp6xn2rw2l_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp6xn2rw2l_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp6xn2rw2l_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp6xn2rw2l_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 4 || month == 6 || month == 9 || month == 11 {\n        return\
    \ false\n    }\n    if month == 2 && day > 29 {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpme1j7afa_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    // Check month validity\n    if\
    \ month < 1 || month > 12 {\n        return false\n    }\n\n    // Check day validity\n\
    \    if day < 1 || day > 31 {\n        return false\n    }\n\n    // Check year\
    \ validity\n    if year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpar8xkxe6_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 30 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 29 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 28 {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tg_9ofu_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    switch month {\n    case 1:\n        if day > 29 {\n            return false\n\
    \        }\n    case 3:\n        if day > 30 {\n            return false\n   \
    \     }\n    case 5:\n        if day > 30 {\n            return false\n      \
    \  }\n    case 7:\n        if day > 30 {\n            return false\n        }\n\
    \    case 8:\n        if day > 30 {\n            return false\n        }\n   \
    \ case 10:\n        if day > 30 {\n            return false\n        }\n    case\
    \ 12:\n        if day > 30 {\n            return false\n        }\n    }\n\n \
    \   return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31tsribp_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1950 || year > 2050 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvsep2yp8_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    month, day, year := parts[0], parts[1], parts[2]\n    month := strings.TrimSpace(month)\n\
    \    day := strings.TrimSpace(day)\n    year := strings.TrimSpace(year)\n    month,\
    \ day, year = strings.ToLower(month), strings.ToLower(day), strings.ToLower(year)\n\
    \    if month == \"jan\" || month == \"feb\" || month == \"mar\" || month == \"\
    apr\" || month == \"may\" || month == \"jun\" || month == \"jul\" || month ==\
    \ \"aug\" || month == \"sep\" || month == \"oct\" || month == \"nov\" || month\
    \ == \"dec\" {\n        if day < 1 || day > 31 || day > 30 || day > 29 {\n   \
    \         return false\n        }\n    }\n    if month == \"jan\" || month ==\
    \ \"feb\" || month == \"mar\" || month == \"apr\" || month == \"may\" || month\
    \ == \"jun\" || month == \"jul\" || month == \"aug\" || month == \"sep\" || month\
    \ == \"oct\" || month == \"nov\" || month == \"dec\" {\n        if day < 1 ||\
    \ day > 31 || day > 30 || day > 29 {\n            return false\n        }\n  \
    \  }\n    if month == \"jan\" || month == \"feb\" || month == \"mar\" || month\
    \ == \"apr\" || month == \"may\" || month == \"jun\" || month == \"jul\" || month\
    \ == \"aug\" || month == \"sep\" || month == \"oct\" || month == \"nov\" || month\
    \ == \"dec\" {\n        if day < 1 || day > 31 || day > 30 || day > 29 {\n   \
    \         return false\n        }\n    }\n    if month == \"jan\" || month ==\
    \ \"feb\" || month == \"mar\" || month == \"apr\" || month == \"may\" || month\
    \ == \"jun\" || month == \"jul\" || month == \"aug\" || month == \"sep\" || month\
    \ == \"oct\" || month == \"nov\" || month == \"dec\" {\n        if day < 1 ||\
    \ day > 31 || day > 30 || day > 29 {\n            return false\n        }\n  \
    \  }\n    if month == \"jan\" || month == \"feb\" || month == \"mar\" || month\
    \ == \"apr\" || month == \"may\" || month == \"jun\" || month == \"jul\" || month\
    \ == \"aug\" || month == \"sep\" || month == \"oct\" || month == \"nov\" || month\
    \ == \"dec\" {\n        if day < 1 || day > 31 || day > 30 || day > 29 {\n   \
    \         return false\n        }\n    }\n    if month == \"jan\" || month ==\
    \ \"feb\" || month == \"mar\" || month == \"apr\" || month == \"may\" || month\
    \ == \"jun\" || month == \"jul\" || month == \"aug\" || month == \"\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt47fb40f_test.go:53:161: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := getDateParts(date)\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    monthDays := []int{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304,\
    \ 334}\n    if monthDays[month-1] < day || day > monthDays[month-1] {\n      \
    \  return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzttur9ty_test.go:20:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || month == 2 && day > 29 {\n        return false\n    }\n    if\
    \ year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa0epr37h_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := 0, 0, 0\n    day, month, year = parseDate(date)\n\n    if\
    \ day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n\
    \        return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploip0ex6_test.go:21:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_hpht4k_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := get_date(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuncxn7q8_test.go:19:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykk58lbt_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    days := days_in_month(year, month)\n\
    \    if days > 31 || days < 1 {\n        return false\n    }\n\n    if month >\
    \ 12 || month < 1 {\n        return false\n    }\n\n    if year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hbq0x6s_test.go:20:25: undefined: split_date

    /tmp/tmp6hbq0x6s_test.go:21:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || month == 2 && day > 29 || month == 4 && day > 30 || month == 6\
    \ && day > 31 || month == 8 && day > 31 || month == 10 && day > 31 || month ==\
    \ 12 && day > 31 {\n        return false\n    }\n    if month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n\
    \        return true\n    }\n    if month == 4 || month == 6 || month == 9 ||\
    \ month == 11 {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8xshpv0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1950 || year > 2050 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0phs4l7g_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if\
    \ day < 1 || day > 30 {\n            return false\n        }\n    case 4, 6, 9,\
    \ 11:\n        if day < 1 || day > 29 {\n            return false\n        }\n\
    \    case 2:\n        if day < 1 || day > 28 {\n            return false\n   \
    \     }\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp04k2w2qd_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbufqwav0_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // \nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkybcretr_test.go:163:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        return true\n\
    \    case 4, 6, 9, 11:\n        return true\n    case 2:\n        return true\n\
    \    default:\n        return false\n    }\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_lkaauq_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc9lw0aap_test.go:63:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 30 || month\
    \ < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid number\
    \ of days\n    if day < 1 || day > 29 || month < 1 || month > 12 {\n        return\
    \ false\n    }\n\n    // Check valid number of days\n    if day < 1 || day > 31\
    \ || month < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid\
    \ number of days\n    if day < 1 || day > 30 || month < 1 || month > 12 {\n  \
    \      return false\n    }\n\n    // Check valid number of days\n    if day <\
    \ 1 || day > 29 || month < 1 || month > 12 {\n        return false\n    }\n\n\
    \    // Check valid number of days\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 {\n        return false\n    }\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 30 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 29 || month\
    \ < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid number\
    \ of days\n    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return\
    \ false\n    }\n\n    // Check valid number of days\n    if day < 1 || day > 30\
    \ || month < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid\
    \ number of days\n    if day < 1 || day > 29 || month < 1 || month > 12 {\n  \
    \      return false\n    }\n\n    // Check valid number of days\n    if day <\
    \ 1 || day > 31 || month < 1 || month > 12 {\n        return false\n    }\n\n\
    \    // Check valid number of days\n    if day < 1 || day > 30 || month < 1 ||\
    \ month > 12 {\n        return false\n    }\n\n    // Check valid number of days\n\
    \    if day < 1 || day > 29 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    // Check valid number of days\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid number\
    \ of days\n    if day < 1 || day > 30 || month < 1 || month > 12 {\n        return\
    \ false\n    }\n\n    // Check valid number of days\n    if day < 1 || day > 29\
    \ || month < 1 || month > 12 {\n        return false\n    }\n\n    // Check valid\
    \ number of days\n    if \nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaxw071lv_test.go:114:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    month, day, year := parts[0], parts[1], parts[2]\n    month := strings.ToLower(month)\n\
    \    day := strings.ToLower(day)\n    year := strings.ToLower(year)\n    switch\
    \ month {\n    case \"january\", \"jan\", \"1\":\n    case \"february\", \"feb\"\
    , \"2\":\n    case \"march\", \"mar\", \"3\":\n    case \"april\", \"apr\", \"\
    4\":\n    case \"may\", \"may\", \"5\":\n    case \"june\", \"jun\", \"6\":\n\
    \    case \"july\", \"jul\", \"7\":\n    case \"august\", \"aug\", \"8\":\n  \
    \  case \"september\", \"sep\", \"9\":\n    case \"october\", \"oct\", \"10\"\
    :\n    case \"november\", \"nov\", \"11\":\n    case \"december\", \"dec\", \"\
    12\":\n    default:\n        return false\n    }\n    switch day {\n    case \"\
    monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\",\
    \ \"sunday\":\n    default:\n        return false\n    }\n    switch year {\n\
    \    case \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"\
    january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\",\
    \ \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"\
    january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\",\
    \ \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"\
    january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\",\
    \ \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"\
    january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\",\
    \ \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"\
    january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\",\
    \ \"1\", \"january\", \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\"\
    , \"jan\", \"1\", \"january\", \"jan\", \"1\", \"january\", \"\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8xhmebp6_test.go:49:1033: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    days := days_in_month(year, month)\n  \
    \  if days > 31 || days < 1 {\n        return false\n    }\n    if month > 12\
    \ || month < 1 {\n        return false\n    }\n    if year < 1000 || year > 9999\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm16v1ot4_test.go:19:25: undefined: split_date

    /tmp/tmpm16v1ot4_test.go:20:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ _ := strconv.Atoi(date[1 : len(date)-1])\n    month, _ := strconv.Atoi(date[len(date)-2:])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    year, _ := strconv.Atoi(date[:len(date)-3])\n    if year < 1000 ||\
    \ year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq5potq3_test.go:19:15: undefined: strconv

    /tmp/tmplq5potq3_test.go:20:17: undefined: strconv

    /tmp/tmplq5potq3_test.go:24:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    switch\
    \ month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day > 29 {\n\
    \            return false\n        }\n    case 4, 6, 9, 11:\n        if day <\
    \ 1 || day > 30 {\n            return false\n        }\n    case 2:\n        if\
    \ day < 1 || day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5vu342vp_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_tuz47nh_test.go:62:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppwp69kbl_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_parts\
    \ := strings.Split(date, \"-\")\n    if len(date_parts) != 3 {\n        return\
    \ false\n    }\n    day, month, year := date_parts[0], date_parts[1], date_parts[2]\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), \nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt7m_mlyk_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n    \n    if month == 4 {\n        if day > 30 {\n        \
    \    return false\n        }\n    }\n    \n    if month == 6 {\n        if day\
    \ > 30 {\n            return false\n        }\n    }\n    \n    if month == 9\
    \ {\n        if day > 30 {\n            return false\n        }\n    }\n    \n\
    \    if month == 11 {\n        if day > 30 {\n            return false\n     \
    \   }\n    }\n    \n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfgyzo3be_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    dayInt, err\
    \ := strconv.Atoi(day)\n    if err != nil {\n        return false\n    }\n   \
    \ monthInt, err := strconv.Atoi(month)\n    if err != nil {\n        return false\n\
    \    }\n    yearInt, err := strconv.Atoi(year)\n    if err != nil {\n        return\
    \ false\n    }\n    if dayInt < 1 || dayInt > 31 || monthInt < 1 || monthInt >\
    \ 12 || yearInt < 1 || yearInt > 9999 {\n        return false\n    }\n    if monthInt\
    \ == 2 && dayInt > 29 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6rggwnx_test.go:19:14: undefined: strings

    /tmp/tmpg6rggwnx_test.go:24:20: undefined: strconv

    /tmp/tmpg6rggwnx_test.go:28:22: undefined: strconv

    /tmp/tmpg6rggwnx_test.go:32:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpse5j8ltq_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1950 || year > 2050 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0phs4l7g_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return\
    \ false\n    }\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n\
    \        return false\n    }\n    year, err := strconv.Atoi(parts[2])\n    if\
    \ err != nil {\n        return false\n    }\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbmxc2rf_test.go:19:14: undefined: strings

    /tmp/tmpwbmxc2rf_test.go:23:17: undefined: strconv

    /tmp/tmpwbmxc2rf_test.go:27:19: undefined: strconv

    /tmp/tmpwbmxc2rf_test.go:31:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n    \n    if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n\
    \    \n    if month == 1 {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbk7z7xrl_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        return true\n\
    \    case 4, 6, 9, 11:\n        return true\n    case 2:\n        return true\n\
    \    default:\n        return false\n    }\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_lkaauq_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day > 29 {\n            return false\n     \
    \   }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 {\n            return false\n        }\n    }\n\n    if month\
    \ == 1 {\n        if day > 31 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia3qredy_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    m, d, y := parts[0], parts[1], parts[2]\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    if m == \"\" || d == \"\" ||\
    \ y == \"\" {\n        return false\n    }\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    if m == \"jan\" || m == \"feb\"\
    \ || m == \"mar\" || m == \"apr\" || m == \"may\" || m == \"jun\" || m == \"jul\"\
    \ || m == \"aug\" || m == \"sep\" || m == \"oct\" || m == \"nov\" || m == \"dec\"\
    \ {\n        if d == \"31\" || d == \"30\" || d == \"29\" {\n            if y\
    \ == \"year\" {\n                return true\n            }\n        }\n    }\n\
    \    if m == \"jan\" || m == \"feb\" || m == \"mar\" || m == \"apr\" || m == \"\
    may\" || m == \"jun\" || m == \"jul\" || m == \"aug\" || m == \"sep\" || m ==\
    \ \"oct\" || m == \"nov\" || m == \"dec\" {\n        if d == \"31\" || d == \"\
    30\" || d == \"29\" {\n            if y == \"year\" {\n                return\
    \ true\n            }\n        }\n    }\n    if m == \"jan\" || m == \"feb\" ||\
    \ m == \"mar\" || m == \"apr\" || m == \"may\" || m == \"jun\" || m == \"jul\"\
    \ || m == \"aug\" || m == \"sep\" || m == \"oct\" || m == \"nov\" || m == \"dec\"\
    \ {\n        if d == \"31\" || d == \"30\" || d == \"29\" {\n            if y\
    \ == \"year\" {\n                return true\n            }\n        }\n    }\n\
    \    if m == \"jan\" || m == \"feb\" || m == \"mar\" || m == \"apr\" || m == \"\
    may\" || m == \"jun\" || m == \"jul\" || m == \"aug\" || m == \"sep\" || m ==\
    \ \"oct\" || m == \"nov\" || m == \"dec\" {\n        if d == \"31\" || d == \"\
    30\" || d == \"29\" {\n            if y == \"year\" {\n                return\
    \ true\n            }\n        }\n    }\n    if m == \"jan\" || m == \"feb\" ||\
    \ m == \"mar\" || m == \"apr\" || m == \"may\" || m == \"jun\" || m == \"jul\"\
    \ || m == \"aug\" || m == \"sep\" || m == \"oct\" || m == \"nov\" || m == \"dec\"\
    \ {\n        if d == \"31\" || d == \"30\" || d == \"29\" {\n            if y\
    \ == \"year\" {\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2scdinvi_test.go:60:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ _ := strconv.Atoi(date[1 : len(date)-1])\n    if day < 1 || day > 31 {\n   \
    \     return false\n    }\n    month, _ := strconv.Atoi(date[len(date)-2:])\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    year, _ :=\
    \ strconv.Atoi(date[:len(date)-3])\n    if year < 1000 || year > 9999 {\n    \
    \    return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38xjjwwa_test.go:19:15: undefined: strconv

    /tmp/tmp38xjjwwa_test.go:23:17: undefined: strconv

    /tmp/tmp38xjjwwa_test.go:27:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    \n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpq0bi1c6z_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpq0bi1c6z_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := get_date(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    if month\
    \ == 2 {\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwm1bkzl3_test.go:19:25: undefined: get_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    days := []int{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    months\
    \ := []int{0, 12, 31, 12}\n\n    dayInt, monthInt, yearInt := 0, 0, 0\n    dayInt,\
    \ monthInt, yearInt = days[month], months[month], year\n\n    if day == \"\" {\n\
    \        return false\n    }\n\n    dayInt, monthInt, yearInt = days[strings.ToLower(day)],\
    \ months[strings.ToLower(month)], year\n\n    if dayInt > 31 || monthInt > 12\
    \ || yearInt > 9999 {\n        return false\n    }\n\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6f6srz1_test.go:20:14: undefined: strings

    /tmp/tmpk6f6srz1_test.go:26:24: undefined: strings

    /tmp/tmpk6f6srz1_test.go:27:24: undefined: strings

    /tmp/tmpk6f6srz1_test.go:39:38: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 30 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 29 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 28 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpts_mga25_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day > 29 {\n            return false\n     \
    \   }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 {\n            return false\n        }\n    }\n\n    if month\
    \ == 1 {\n        if day > 31 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia3qredy_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day > 29 {\n            return false\n     \
    \   }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 {\n            return false\n        }\n    }\n\n    if month\
    \ == 1 {\n        if day > 31 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpia3qredy_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ _ := strconv.Atoi(date[0:2])\n    month, _ := strconv.Atoi(date[2:4])\n    year,\
    \ _ := strconv.Atoi(date[4:8])\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    if month\
    \ == 2 {\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8a91dnpx_test.go:19:15: undefined: strconv

    /tmp/tmp8a91dnpx_test.go:20:17: undefined: strconv

    /tmp/tmp8a91dnpx_test.go:21:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || month == 2 {\n        return false\n    }\n    if year < 1000\
    \ || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddagrj4f_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n        \
    \    return false\n        }\n    }\n    \n    if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    }\n    \n    if month == 2 {\n        if day < 1 || day\
    \ > 28 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3p09_oez_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if\
    \ day < 1 || day > 29 {\n            return false\n        }\n    case 4, 6, 9,\
    \ 11:\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    case 2:\n        if day < 1 || day > 31 {\n            return false\n   \
    \     }\n    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe4ymyp_e_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    days := []int{0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    months\
    \ := []int{0, 12, 1, 4, 7, 2, 6, 9, 3, 10, 5, 8, 11}\n\n    dayInt, monthInt,\
    \ yearInt := 0, 0\n    for _, d := range day {\n        dayInt += int(d)\n   \
    \ }\n    for _, m := range month {\n        monthInt += int(m)\n    }\n    for\
    \ _, y := range year {\n        yearInt += int(y)\n    }\n\n    if dayInt > days[monthInt-1]\
    \ || dayInt > days[monthInt] {\n        return false\n    }\n\n    if monthInt\
    \ > months[yearInt-1] || monthInt > months[yearInt] {\n        return false\n\
    \    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo8hvme2v_test.go:20:14: undefined: strings

    /tmp/tmpo8hvme2v_test.go:26:24: undefined: strings

    /tmp/tmpo8hvme2v_test.go:27:24: undefined: strings

    /tmp/tmpo8hvme2v_test.go:32:34: assignment mismatch: 3 variables but 2 values

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    case 2:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjocdtpld_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // \nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkybcretr_test.go:163:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpze8h4piw_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    year, err := strconv.Atoi(parts[0])\n    if err != nil {\n\
    \        return false\n    }\n\n    month, err := strconv.Atoi(parts[1])\n   \
    \ if err != nil {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[2])\n\
    \    if err != nil {\n        return false\n    }\n\n    if year < 1 || year >\
    \ 9999 {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n  \
    \      return false\n    }\n\n    if day < 1 || day > 31 {\n        return false\n\
    \    }\n\n    if month == 2 && day > 29 {\n        return false\n    }\n\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxgk33sno_test.go:20:14: undefined: strings

    /tmp/tmpxgk33sno_test.go:25:18: undefined: strconv

    /tmp/tmpxgk33sno_test.go:30:19: undefined: strconv

    /tmp/tmpxgk33sno_test.go:35:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    month, day, year := parts[0], parts[1], parts[2]\n    month := strings.ToLower(month)\n\
    \    day := strings.ToLower(day)\n    year := strings.ToLower(year)\n    if month\
    \ == \"jan\" || month == \"feb\" || month == \"mar\" || month == \"apr\" || month\
    \ == \"may\" || month == \"jun\" || month == \"jul\" || month == \"aug\" || month\
    \ == \"sep\" || month == \"oct\" || month == \"nov\" || month == \"dec\" {\n \
    \       if day == \"01\" || day == \"03\" || day == \"05\" || day == \"07\" ||\
    \ day == \"08\" || day == \"10\" || day == \"12\" {\n            if year == \"\
    19\" || year == \"20\" || year == \"21\" || year == \"22\" || year == \"23\" ||\
    \ year == \"24\" || year == \"25\" || year == \"26\" || year == \"27\" || year\
    \ == \"28\" {\n                return true\n            }\n        }\n    }\n\
    \    if month == \"apr\" || month == \"jun\" || month == \"sep\" || month == \"\
    nov\" || month == \"dec\" {\n        if day == \"01\" || day == \"04\" || day\
    \ == \"06\" || day == \"09\" || day == \"11\" {\n            if year == \"19\"\
    \ || year == \"20\" || year == \"21\" || year == \"22\" || year == \"23\" || year\
    \ == \"24\" || year == \"25\" || year == \"26\" || year == \"27\" || year == \"\
    28\" {\n                return true\n            }\n        }\n    }\n    if month\
    \ == \"jan\" || month == \"feb\" || month == \"mar\" || month == \"apr\" || month\
    \ == \"may\" || month == \"jun\" || month == \"jul\" || month == \"aug\" || month\
    \ == \"sep\" || month == \"oct\" || month == \"nov\" || month == \"dec\" {\n \
    \       if day == \"01\" || day == \"03\" || day == \"05\" || day == \"07\" ||\
    \ day == \"08\" || day == \"10\" || day == \"12\" {\n            if year == \"\
    19\" || year == \"20\" || year == \"21\" || year == \"22\" || year == \"23\" ||\
    \ year == \"24\" || year == \"25\" || year == \"26\" || year == \"27\" || year\
    \ == \"28\" {\n                return true\n            }\n        }\n    }\n\
    \    if month == \"apr\" || month == \"jun\" || month == \"sep\" || month == \"\
    nov\" || month == \"dec\" {\n        if day == \"01\" || day == \"04\" || day\
    \ == \"06\" || day == \"09\" || day == \"11\" {\n            if year == \"19\"\
    \ || year == \"20\" || year == \"21\" || year == \"22\" || year == \"23\" || year\
    \ == \"24\" || \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnwisjt6c_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppwp69kbl_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    if day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n  \
    \  }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day > 30 {\n            return false\n        }\n    }\n\n\
    \    if month == 1 {\n        if day > 31 {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0yudmbvx_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk22_trq7_test.go:43:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day\
    \ > 30 {\n            return false\n        }\n    }\n    if month == 2 {\n  \
    \      if day > 29 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeir8g9ok_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykk58lbt_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph44ycknn_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    days := days_in_month(year, month)\n\
    \    if days > 31 || days < 1 {\n        return false\n    }\n\n    if month >\
    \ 12 || month < 1 {\n        return false\n    }\n\n    if year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hbq0x6s_test.go:20:25: undefined: split_date

    /tmp/tmp6hbq0x6s_test.go:21:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.Trim\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjzll9u5_test.go:64:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || month == 2 {\n        return false\n    }\n    if year < 1000\
    \ || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddagrj4f_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqikb_zg_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y4oak5a_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    if\
    \ month == 2 {\n        if day < 1 || day > 29 {\n            return false\n \
    \       }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   }\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmfk9qpr5_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    dayInt, err\
    \ := strconv.Atoi(day)\n    if err != nil {\n        return false\n    }\n   \
    \ monthInt, err := strconv.Atoi(month)\n    if err != nil {\n        return false\n\
    \    }\n    yearInt, err := strconv.Atoi(year)\n    if err != nil {\n        return\
    \ false\n    }\n    if monthInt < 1 || monthInt > 12 {\n        return false\n\
    \    }\n    if dayInt < 1 || dayInt > 31 {\n        return false\n    }\n    if\
    \ monthInt < 4 || monthInt > 12 {\n        return false\n    }\n    if yearInt\
    \ < 1000 || yearInt > 9999 {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5s_bu43_test.go:19:14: undefined: strings

    /tmp/tmpo5s_bu43_test.go:24:20: undefined: strconv

    /tmp/tmpo5s_bu43_test.go:28:22: undefined: strconv

    /tmp/tmpo5s_bu43_test.go:32:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    m, d, y := parts[0], parts[1], parts[2]\n    m, d, y = strings.TrimSpace(m),\
    \ strings.TrimSpace(d), strings.TrimSpace(y)\n    if m == \"\" || d == \"\" ||\
    \ y == \"\" {\n        return false\n    }\n    m, d, y = strings.ToLower(m),\
    \ strings.ToLower(d), strings.ToLower(y)\n    if m == \"jan\" || m == \"feb\"\
    \ || m == \"mar\" || m == \"apr\" || m == \"may\" || m == \"jun\" || m == \"jul\"\
    \ || m == \"aug\" || m == \"sep\" || m == \"oct\" || m == \"nov\" || m == \"dec\"\
    \ {\n        if d == \"01\" || d == \"02\" || d == \"03\" || d == \"04\" || d\
    \ == \"05\" || d == \"06\" || d == \"07\" || d == \"08\" || d == \"09\" || d ==\
    \ \"10\" || d == \"11\" || d == \"12\" {\n            if y == \"19\" || y == \"\
    20\" || y == \"21\" || y == \"22\" || y == \"23\" || y == \"24\" || y == \"25\"\
    \ || y == \"26\" || y == \"27\" || y == \"28\" || y == \"29\" || y == \"30\" ||\
    \ y == \"31\" {\n                return true\n            }\n        }\n    }\n\
    \    if m == \"january\" || m == \"february\" || m == \"march\" || m == \"april\"\
    \ || m == \"may\" || m == \"june\" || m == \"july\" || m == \"august\" || m ==\
    \ \"september\" || m == \"october\" || m == \"november\" || m == \"december\"\
    \ {\n        if d == \"01\" || d == \"02\" || d == \"03\" || d == \"04\" || d\
    \ == \"05\" || d == \"06\" || d == \"07\" || d == \"08\" || d == \"09\" || d ==\
    \ \"10\" || d == \"11\" || d == \"12\" {\n            if y == \"19\" || y == \"\
    20\" || y == \"21\" || y == \"22\" || y == \"23\" || y == \"24\" || y == \"25\"\
    \ || y == \"26\" || y == \"27\" || y == \"28\" || y == \"29\" || y == \"30\" ||\
    \ y == \"31\" {\n                return true\n            }\n        }\n    }\n\
    \    if m == \"jan\" || m == \"feb\" || m == \"mar\" || m == \"apr\" || m == \"\
    may\" || m == \"jun\" || m == \"jul\" || m == \"aug\" || m == \"sep\" || m ==\
    \ \"oct\" || m == \"nov\" || m == \"dec\" {\n        if d == \"01\" || d == \"\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa3xhx4lz_test.go:44:30: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n\
    \    day, month, year := split_date(date)\n    \n    if day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1__v435v_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1900 || (year > 2100 && year < 2200) {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfw2jvp6_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvrl_lh8c_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    if month ==\
    \ 1 {\n        if day > 31 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0ulc7l0_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    parts\
    \ := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n\
    \    }\n    day, month, year := parts[0], parts[1], parts[2]\n    day, month,\
    \ year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7eldff4_test.go:44:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n\n    // Check valid day\n    if day <\
    \ 1 || day > 31 {\n        return false\n    }\n\n    // Check valid month\n \
    \   if month < 1 || month > 12 {\n        return false\n    }\n\n    // Check\
    \ valid year\n    if year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnfxvbm5_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88e9hsfu_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075311
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code goes here\n    \n    \n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp0nczo81a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp0nczo81a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ day, month, year := split_date(date)\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n\
    \n    switch month {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n   \
    \ case 8:\n    case 10:\n    case 12:\n    case 4:\n    case 6:\n    case 9:\n\
    \    case 11:\n    case 2:\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    case 0:\n        if day < 1 || day > 30 {\n          \
    \  return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdf_lbqke_test.go:20:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpse5j8ltq_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    day,\
    \ month, year := split_date(date)\n    if day < 1 || day > 31 || month < 1 ||\
    \ month > 12 || year < 1000 || year > 9999 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10en2ou4_test.go:19:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075307
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n\n   \
    \ parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return\
    \ false\n    }\n\n    day, month, year := parts[0], parts[1], parts[2]\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppwp69kbl_test.go:65:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075306
