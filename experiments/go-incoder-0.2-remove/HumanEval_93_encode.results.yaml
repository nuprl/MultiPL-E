language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.Index(letter)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvql5009a_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpvql5009a_test.go:21:37: vowels.Index undefined (type []string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var newMessage string = \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            newMessage += letter\n        } else {\n      \
    \      newMessage += string(letter) + string(letter)\n        }\n    }\n    return\
    \ newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpivhbt_t4_test.go:18:13: invalid operation: newMessage += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter))\
    \ + string([]rune(\"a\"))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4fakhlc_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpb4fakhlc_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter+1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvagyt0f_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.index(letter)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyq_drn10_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpyq_drn10_test.go:21:37: vowels.index undefined (type []string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5edat85_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8if_97s_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8if_97s_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo843lsom_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpo843lsom_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        result\
    \ += string([]byte{letter})\n    }\n    for _, letter := range message {\n   \
    \     if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += string([]byte{letter})\n            continue\n\
    \        }\n        result += \"_\"\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4m4qxz45_test.go:17:33: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmp4m4qxz45_test.go:21:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.index(letter)+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9e2fnxu_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpp9e2fnxu_test.go:21:37: vowels.index undefined (type []string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        if letter == 'a' {\n            result += letter\n\
    \        } else if letter == 'e' {\n            result += letter\n        } else\
    \ if letter == 'i' {\n            result += letter\n        } else if letter ==\
    \ 'o' {\n            result += letter\n        } else if letter == 'u' {\n   \
    \         result += letter\n        } else {\n            result += letter\n \
    \       }\n    }\n    for _, vowel := range vowels {\n        result += string(vowel)\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84f7dqx3_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp84f7dqx3_test.go:21:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp84f7dqx3_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp84f7dqx3_test.go:25:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp84f7dqx3_test.go:27:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp84f7dqx3_test.go:29:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        result\
    \ += \"A\"\n    }\n    for _, letter := range message {\n        result += \"\
    E\"\n    }\n    for _, letter := range message {\n        result += \"I\"\n  \
    \  }\n    for _, letter := range message {\n        result += \"O\"\n    }\n \
    \   for _, letter := range message {\n        result += \"U\"\n    }\n    for\
    \ _, letter := range message {\n        result += \"a\"\n    }\n    for _, letter\
    \ := range message {\n        result += \"e\"\n    }\n    for _, letter := range\
    \ message {\n        result += \"i\"\n    }\n    for _, letter := range message\
    \ {\n        result += \"o\"\n    }\n    for _, letter := range message {\n  \
    \      result += \"u\"\n    }\n    for _, letter := range message {\n        result\
    \ += \"b\"\n    }\n    for _, letter := range message {\n        result += \"\
    g\"\n    }\n    for _, letter := range message {\n        result += \"k\"\n  \
    \  }\n    for _, letter := range message {\n        result += \"m\"\n    }\n \
    \   for _, letter := range message {\n        result += \"p\"\n    }\n    for\
    \ _, letter := range message {\n        result += \"s\"\n    }\n    for _, letter\
    \ := range message {\n        result += \"t\"\n    }\n    for _, letter := range\
    \ message {\n        result += \"v\"\n    }\n    for _, letter := range message\
    \ {\n        result += \"w\"\n    }\n    for _, letter := range message {\n  \
    \      result += \"y\"\n    }\n    for _, letter := range message {\n        result\
    \ += \"z\"\n    }\n    for _, letter := range message {\n        result += \"\
    B\"\n    }\n    for _, letter := range message {\n        result += \"G\"\n  \
    \  }\n    for _, letter := range message {\n        result += \"K\"\n    }\n \
    \   for _, letter := range message {\n        result += \"M\"\n    }\n    for\
    \ _, letter := range message {\n        result += \"P\"\n    }\n    for _, letter\
    \ := range message {\n        result += \"S\"\n    }\n    for _, letter := range\
    \ message {\n        result += \"T\"\n    }\n    for _, letter := range message\
    \ {\n        result += \"V\"\n    }\n    for _, letter := range message {\n  \
    \      result += \"W\"\n    }\n    for _, letter := range message {\n        result\
    \ += \"Y\"\n    }\n    for _, letter := range message {\n        result += \"\
    Z\"\n    }\n    return result\n}\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcv4p5ev_test.go:16:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:19:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:22:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:25:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:28:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:31:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:34:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:37:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:40:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:43:12: letter declared but not used

    /tmp/tmpqcv4p5ev_test.go:43:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5edat85_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter\
    \ + int(letter - 'a'))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpizo2ecwg_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpizo2ecwg_test.go:20:30: invalid operation: letter + int(letter - ''a'')
    (mismatched types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        result\
    \ += string(letter) + string(letter)\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbpzar6cq_test.go:39: expected 'tgst', got 'TTEESSTT'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpbpzar6cq_test.go:39: expected 'mWDCSKR',\
    \ got 'MMuuddaassiirr'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n       \
    \ tmpbpzar6cq_test.go:39: expected 'ygs', got 'YYEESS'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpbpzar6cq_test.go:39: expected 'tHKS KS C MGSSCGG', got 'TThhiiss\
    \  iiss  aa  mmeessssaaggee'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n \
    \       tmpbpzar6cq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'II\
    \  DDooNNtt  KKnnOOww  WWhhAAtt  ttOO  WWrrIIttEE'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075899
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter\
    \ + int(letter - 'a' + 2))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78towzqm_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp78towzqm_test.go:20:30: invalid operation: letter + int(letter - ''a''
    + 2) (mismatched types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.Index(letter)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvql5009a_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpvql5009a_test.go:21:37: vowels.Index undefined (type []string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter))\
    \ + string([]rune(\"a\"))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4fakhlc_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpb4fakhlc_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        result += string(letter)\n    }\n    for _, vowel :=\
    \ range vowels {\n        result += \"a\" + string(vowel)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbs0sf5t9_test.go:43: expected 'tgst', got 'TESTaaaeaiaoau'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmpbs0sf5t9_test.go:43: expected\
    \ 'mWDCSKR', got 'Mudasiraaaeaiaoau'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n\
    \        tmpbs0sf5t9_test.go:43: expected 'ygs', got 'YESaaaeaiaoau'\n    ---\
    \ FAIL: TestEncode/test_num__3 (0.00s)\n        tmpbs0sf5t9_test.go:43: expected\
    \ 'tHKS KS C MGSSCGG', got 'This is a messageaaaeaiaoau'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpbs0sf5t9_test.go:43: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'I DoNt KnOw WhAt tO WrItEaaaeaiaoau'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075899
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter\
    \ + 2)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa47hoz8z_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter+1)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1iacslf_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte(letter))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkvyj40wo_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpkvyj40wo_test.go:20:37: cannot convert letter (variable of type rune)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075899
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo843lsom_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpo843lsom_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[2:])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplem2py84_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmplem2py84_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5edat85_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        switch\
    \ letter {\n        case 'a':\n            result += \"b\"\n        case 'e':\n\
    \            result += \"f\"\n        case 'i':\n            result += \"g\"\n\
    \        case 'o':\n            result += \"h\"\n        case 'u':\n         \
    \   result += \"j\"\n        case 'A':\n            result += \"B\"\n        case\
    \ 'E':\n            result += \"F\"\n        case 'I':\n            result +=\
    \ \"G\"\n        case 'O':\n            result += \"H\"\n        case 'U':\n \
    \           result += \"J\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplijex0c__test.go:39:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        result\
    \ += string([]rune(letter))\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzt64y6vk_test.go:17:33: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.index(letter)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyq_drn10_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpyq_drn10_test.go:21:37: vowels.index undefined (type []string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += letter + string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadwgwh07_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpadwgwh07_test.go:21:23: invalid operation: letter + string(vowels[vowels.index(letter)
    + 1]) (mismatched types rune and string)

    /tmp/tmpadwgwh07_test.go:21:53: vowels.index undefined (type []string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += letter\n        }\
    \ else {\n            result += vowels[vowels.index(letter)+1]\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfeg_z1xc_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpfeg_z1xc_test.go:21:13: invalid operation: result += vowels[vowels.index(letter)
    + 1] (mismatched types string and rune)

    /tmp/tmpfeg_z1xc_test.go:21:37: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[0])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_qjhbs7_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpj_qjhbs7_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        result\
    \ += string(letter)\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpsgplu7l1_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpsgplu7l1_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpsgplu7l1_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpsgplu7l1_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpsgplu7l1_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ >= 'a' && letter <= 'z' {\n            result += string(letter + 2 - 'a')\n\
    \        } else {\n            result += string(letter)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo1acdtt2_test.go:43: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo1acdtt2_test.go:43: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpo1acdtt2_test.go:43: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpo1acdtt2_test.go:43: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo1acdtt2_test.go:43: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter >= 'a' && letter <= 'z' {\n            result += string(letter+('a'\
    \ - 'a' + 1))\n        } else {\n            result += string(letter)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmptb4c6j5z_test.go:43: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmptb4c6j5z_test.go:43: expected 'mWDCSKR', got 'Mvebtjs'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmptb4c6j5z_test.go:43:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmptb4c6j5z_test.go:43: expected 'tHKS KS C MGSSCGG', got 'Tijt jt b nfttbhf'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmptb4c6j5z_test.go:43:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DpNu KoOx WiAu uO WsIuE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[1:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycvk9sh3_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpycvk9sh3_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        result\
    \ += string(letter) + string(letter)\n    }\n    for _, vowel := range \"aeiou\"\
    \ {\n        result = result.replace(vowel, vowel + string(vowel))\n    }\n  \
    \  return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tdyowby_test.go:20:25: result.replace undefined (type string has no field
    or method replace)

    /tmp/tmp4tdyowby_test.go:20:40: invalid operation: vowel + string(vowel) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8if_97s_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte(letter))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkvyj40wo_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpkvyj40wo_test.go:20:37: cannot convert letter (variable of type rune)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075899
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter\
    \ + int(letter - 'a' + 2))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78towzqm_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp78towzqm_test.go:20:30: invalid operation: letter + int(letter - ''a''
    + 2) (mismatched types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter\
    \ + string(letter))\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogwlqxiv_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpogwlqxiv_test.go:20:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        result\
    \ += string([]byte{letter})\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwvncw7g_test.go:17:33: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k7ojlqh_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp1k7ojlqh_test.go:21:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += letter\n        }\
    \ else {\n            result += string(vowels[len(vowels)-1])\n            vowels\
    \ = append(vowels, letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1s5k7l93_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter + int(letter - 'a' + 1))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuhzs9q4_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpkuhzs9q4_test.go:20:30: invalid operation: letter + int(letter - ''a''
    + 1) (mismatched types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter+1)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1iacslf_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var newMessage string = \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            newMessage += letter\n        } else {\n      \
    \      newMessage += string(letter + string(letter))\n        }\n    }\n    return\
    \ newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwtn5gxgq_test.go:18:13: invalid operation: newMessage += letter (mismatched
    types string and rune)

    /tmp/tmpwtn5gxgq_test.go:20:34: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5edat85_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string([]byte(letter)) + string([]byte(letter))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppl5t495h_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmppl5t495h_test.go:20:37: cannot convert letter (variable of type rune)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ >= 'a' && letter <= 'z' {\n            result += string(letter - 'a') + string(letter\
    \ - 'a' + 2)\n        } else {\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8kqal9nv_test.go:20:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        result\
    \ += string(letter) + string(letter)\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbpzar6cq_test.go:39: expected 'tgst', got 'TTEESSTT'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpbpzar6cq_test.go:39: expected 'mWDCSKR',\
    \ got 'MMuuddaassiirr'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n       \
    \ tmpbpzar6cq_test.go:39: expected 'ygs', got 'YYEESS'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpbpzar6cq_test.go:39: expected 'tHKS KS C MGSSCGG', got 'TThhiiss\
    \  iiss  aa  mmeessssaaggee'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n \
    \       tmpbpzar6cq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'II\
    \  DDooNNtt  KKnnOOww  WWhhAAtt  ttOO  WWrrIIttEE'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075899
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n    for _, letter :=\
    \ range message {\n        if letter == 'a' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'e' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'i' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'o' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'u' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'y' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'A' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'E' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'I' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'O' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'U' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'Y' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'a' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'e' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'i' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'o' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'u' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'y' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'A' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'E' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'I' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'O' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'U' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'Y' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'a' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'e' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'i' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'o' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'u' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'y' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'A' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'E' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'I' {\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbapp416i_test.go:148:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075900
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        result += string(letter)\n    }\n    for _, vowel :=\
    \ range vowels {\n        result += string(vowel)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpcy2alty__test.go:43: expected 'tgst', got 'TESTaeiou'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpcy2alty__test.go:43: expected 'mWDCSKR',\
    \ got 'Mudasiraeiou'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpcy2alty__test.go:43:\
    \ expected 'ygs', got 'YESaeiou'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmpcy2alty__test.go:43: expected 'tHKS KS C MGSSCGG', got 'This is a\
    \ messageaeiou'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpcy2alty__test.go:43:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEaeiou'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string = \"\"\n    for _, letter := range message {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += letter\n        } else {\n            result\
    \ += string(letter) + string(letter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5edat85_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8if_97s_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string(letter)\
    \ + string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2iop0ef_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a88aizn_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp_a88aizn_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[:2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo843lsom_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpo843lsom_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegz0nhud_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpegz0nhud_test.go:20:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += letter\n        } else {\n            result += vowels[vowels.index(letter)+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9e2fnxu_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpp9e2fnxu_test.go:21:37: vowels.index undefined (type []string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075898
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bvp_y18_test.go:118:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075897
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        result += \"a\" + letter\n    }\n    for _, vowel :=\
    \ range vowels {\n        result += \"a\" + string(vowel)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpx_8sl7_test.go:18:19: invalid operation: "a" + letter (mismatched types
    untyped string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        result += string(letter)\n    }\n    for _, vowel :=\
    \ range vowels {\n        result += string(vowel)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpcy2alty__test.go:43: expected 'tgst', got 'TESTaeiou'\n    --- FAIL:\
    \ TestEncode/test_num__1 (0.00s)\n        tmpcy2alty__test.go:43: expected 'mWDCSKR',\
    \ got 'Mudasiraeiou'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpcy2alty__test.go:43:\
    \ expected 'ygs', got 'YESaeiou'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmpcy2alty__test.go:43: expected 'tHKS KS C MGSSCGG', got 'This is a\
    \ messageaeiou'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpcy2alty__test.go:43:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEaeiou'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    for _, letter := range message {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += letter\n        } else {\n            result += string([]rune(letter)[2:])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplem2py84_test.go:18:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmplem2py84_test.go:20:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for _, letter :=\
    \ range message {\n        if letter == 'a' {\n            result += letter\n\
    \        } else if letter == 'e' {\n            result += letter\n        } else\
    \ if letter == 'i' {\n            result += letter\n        } else if letter ==\
    \ 'o' {\n            result += letter\n        } else if letter == 'u' {\n   \
    \         result += letter\n        } else {\n            result += letter\n \
    \       }\n    }\n    for _, vowel := range vowels {\n        result += \"a\"\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp641n32is_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:21:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:25:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:27:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:29:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp641n32is_test.go:32:12: vowel declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075901
