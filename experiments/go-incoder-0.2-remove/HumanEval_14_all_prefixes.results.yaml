language: go_test.go
name: HumanEval_14_all_prefixes
results:
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if myString[:len(prefix)]\
    \ == prefix {\n            prefixes = append(prefixes, prefix)\n        }\n  \
    \  }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9mksob4_test.go:11:28: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        prefix += string(c)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3xsr3tz7_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp3xsr3tz7_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpaiwh4oot_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpaiwh4oot_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n        } else {\n     \
    \       prefix = char\n            prefixes = append(prefixes, prefix)\n     \
    \   }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg77tzrsw_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpg77tzrsw_test.go:16:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprofjvtvt_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprofjvtvt_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3xsr3tz7_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp3xsr3tz7_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += string(\"\
    0123456789abcdefghijklmnopqrstuvwxyz\"[char])\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = \"\"\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [97] with length 36 [recovered]\n\tpanic: runtime error: index out of\
    \ range [97] with length 36\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpcsj61iq7_test.go:13\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpcsj61iq7_test.go:28\
    \ +0x819\ntesting.tRunner(0xc0001a0340, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg1n8_oax_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpg1n8_oax_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, char := range myString {\n        if char == prefix {\n\
    \            continue\n        }\n        prefix = char\n        result = append(result,\
    \ prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj5mwg3c9_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpj5mwg3c9_test.go:16:18: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, c := range myString {\n        if prefix == \"\" {\n   \
    \         prefix = c\n        } else {\n            if c != prefix {\n       \
    \         prefix = \"\"\n            }\n        }\n        if prefix == \"\" {\n\
    \            result = append(result, prefix)\n        }\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5fg51_oe_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmp5fg51_oe_test.go:16:21: invalid operation: c != prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n        } else {\n     \
    \       prefix = char\n            prefixes = append(prefixes, prefix)\n     \
    \   }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg77tzrsw_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpg77tzrsw_test.go:16:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpdtdm8h4r_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpdtdm8h4r_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefixes = append(prefixes, myString[0:len(myString)-1])\n    for i := 1; i\
    \ < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmp94r7oktj_test.go:11\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmp94r7oktj_test.go:25\
    \ +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprofjvtvt_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprofjvtvt_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprofjvtvt_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprofjvtvt_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpc4sz6mbr_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpc4sz6mbr_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += string(char)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3xsr3tz7_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp3xsr3tz7_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    i := 0\n    for i < length {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n        i += 1\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpysbz5ps2_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpysbz5ps2_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpflvoc2al_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n        } else {\n     \
    \       prefix = char\n            prefixes = append(prefixes, prefix)\n     \
    \   }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg77tzrsw_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpg77tzrsw_test.go:16:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for {\n        j := i\n        for {\n            if myString[j]\
    \ == myString[i] {\n                break\n            }\n            j = j +\
    \ 1\n        }\n        prefixes = append(prefixes, myString[i:j])\n        i\
    \ = j\n        if i == len(myString) {\n            break\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpia5crete_test.go:15\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpia5crete_test.go:36\
    \ +0x18\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if myString[:len(prefix)]\
    \ == prefix {\n            prefixes = append(prefixes, prefix)\n        }\n  \
    \  }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9mksob4_test.go:11:28: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := make([]string, 0)\n\
    \    for i := 0; i < len(myString); i++ {\n        result := append(result, myString[:i])\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08lmdd7__test.go:12:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp88d68qf9_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp88d68qf9_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += c\n        }\n    }\n    prefixes = append(prefixes,\
    \ prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkgdz788_test.go:17:13: invalid operation: prefix += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for i < len(myString) {\n        prefixes = append(prefixes, myString[0:i])\n\
    \        i += 1\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpqx7hy7ie_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpqx7hy7ie_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, c := range myString {\n        if prefix == \"\" {\n   \
    \         prefix = c\n        } else {\n            prefix = prefix + c\n    \
    \    }\n        result = append(result, prefix)\n    }\n    return result\n}\n\
    \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhnv2qy__test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpjhnv2qy__test.go:16:22: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        if letter ==\
    \ prefix {\n            prefixes = append(prefixes, prefix)\n            prefix\
    \ = \"\"\n        } else {\n            prefix = letter\n        }\n    }\n  \
    \  prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2qlruad7_test.go:13:22: invalid operation: letter == prefix (mismatched
    types rune and string)

    /tmp/tmp2qlruad7_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        if i == 0 {\n            prefixes = append(prefixes, prefix)\n\
    \        } else {\n            prefixes = append(prefixes, prefix+myString[i-1])\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykp_by51_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    /tmp/tmpykp_by51_test.go:17:41: invalid operation: prefix + myString[i - 1] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp88d68qf9_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp88d68qf9_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if myString ==\
    \ prefix {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrg0rl3v_test.go:11:28: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_xmslxrf_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_xmslxrf_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdgsgghcm_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpdgsgghcm_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32ee9lqj_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmp32ee9lqj_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg1n8_oax_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpg1n8_oax_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += string(c)\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmple7hb2e1_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmple7hb2e1_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\"\
    \ {\n            prefix = c\n        } else {\n            if prefix == c {\n\
    \                prefixes = append(prefixes, prefix)\n                prefix =\
    \ \"\"\n            } else {\n                prefix = \"\"\n            }\n \
    \       }\n    }\n    if prefix != \"\" {\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7jxbcbl_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpe7jxbcbl_test.go:16:26: invalid operation: prefix == c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\"\
    \ {\n            prefix = c\n        } else {\n            prefix = prefix + c\n\
    \        }\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl474grc1_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpl474grc1_test.go:16:22: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for {\n        i := i + 1\n        if i == len(myString) {\n  \
    \          break\n        }\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:1] with length 0 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmptblcdoka_test.go:17\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmptblcdoka_test.go:29\
    \ +0x1a\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == prefix[len(prefix):]\
    \ {\n            prefix = prefix + c\n        } else {\n            prefixes =\
    \ append(prefixes, prefix)\n            prefix = c\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bbvptqf_test.go:13:23: invalid operation: c == prefix[len(prefix):] (mismatched
    types rune and string)

    /tmp/tmp4bbvptqf_test.go:14:22: invalid operation: prefix + c (mismatched types
    string and rune)

    /tmp/tmp4bbvptqf_test.go:17:22: cannot use c (variable of type rune) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += c\n        }\n    }\n    prefixes = append(prefixes,\
    \ prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkgdz788_test.go:17:13: invalid operation: prefix += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if myString ==\
    \ prefix {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrg0rl3v_test.go:11:28: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_xmslxrf_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_xmslxrf_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        if i == 0 {\n            prefixes = append(prefixes, prefix)\n\
    \        } else {\n            prefixes = append(prefixes, prefix+myString[i-1])\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykp_by51_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    /tmp/tmpykp_by51_test.go:17:41: invalid operation: prefix + myString[i - 1] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp88d68qf9_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp88d68qf9_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprofjvtvt_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprofjvtvt_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == '.' || c\
    \ == '-' || c == '_' || c == '/' {\n            prefixes = append(prefixes, prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += string(c)\n\
    \        }\n    }\n    prefixes = append(prefixes, prefix)\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_yuef6_w_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmp_yuef6_w_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefix := \"\"\n    for _, char := range myString {\n        prefix += string(char)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, letter := range myString {\n        prefix += letter\n \
    \       if prefix[len(prefix)-1] == '.' {\n            prefix = prefix[:len(prefix)-1]\n\
    \            break\n        }\n    }\n    for _, letter := range myString {\n\
    \        prefix += letter\n        if prefix[len(prefix)-1] == '.' {\n       \
    \     prefix = prefix[:len(prefix)-1]\n            break\n        }\n    }\n \
    \   for _, letter := range myString {\n        prefix += letter\n        if prefix[len(prefix)-1]\
    \ == '.' {\n            prefix = prefix[:len(prefix)-1]\n            break\n \
    \       }\n    }\n    for _, letter := range myString {\n        prefix += letter\n\
    \        if prefix[len(prefix)-1] == '.' {\n            prefix = prefix[:len(prefix)-1]\n\
    \            break\n        }\n    }\n    for _, letter := range myString {\n\
    \        prefix += letter\n        if prefix[len(prefix)-1] == '.' {\n       \
    \     prefix = prefix[:len(prefix)-1]\n            break\n        }\n    }\n \
    \   for _, letter := range myString {\n        prefix += letter\n        if prefix[len(prefix)-1]\
    \ == '.' {\n            prefix = prefix[:len(prefix)-1]\n            break\n \
    \       }\n    }\n    for _, letter := range myString {\n        prefix += letter\n\
    \        if prefix[len(prefix)-1] == '.' {\n            prefix = prefix[:len(prefix)-1]\n\
    \            break\n        }\n    }\n    for _, letter := range myString {\n\
    \        prefix += letter\n        if prefix[len(prefix)-1] == '.' {\n       \
    \     prefix = prefix[:len(prefix)-1]\n            break\n        }\n    }\n \
    \   for _, letter := range myString {\n        prefix += letter\n        if prefix[len(prefix)-1]\
    \ == '.' {\n            prefix = prefix[:len(prefix)-1]\n            break\n \
    \       }\n    }\n    for _, letter := range myString {\n        prefix += letter\n\
    \        if prefix[len(prefix)-1] == '.' {\n            prefix = prefix[:len(prefix)-1]\n\
    \            break\n        }\n    }\n    for _, letter := range myString {\n\
    \        prefix += letter\n        if prefix[len(prefix)-1] == '.' {\n       \
    \     prefix = prefix[:len(prefix)-1]\n            break\n        }\n    }\n \
    \   for _, letter := range myString {\n        prefix += letter\n        if prefix[len(prefix)-1]\
    \ == '.' {\n            prefix = prefix[:len(prefix)-1]\n            break\n \
    \       }\n    }\n    for _, letter := range myString {\n        prefix += letter\n\
    \        if prefix[len(prefix)-1] == '.' {\n            prefix = prefix[:len(prefix)-1]\n\
    \            break\n        }\n    }\n    for _, letter := range my\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe3xjuhdm_test.go:103:30: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3xsr3tz7_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp3xsr3tz7_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        prefix += string(c)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\"\
    \ {\n            prefix = c\n        } else {\n            prefix += c\n     \
    \   }\n        if prefix == myString {\n            prefixes = append(prefixes,\
    \ prefix)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk03mow4w_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpk03mow4w_test.go:16:13: invalid operation: prefix += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_xmslxrf_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_xmslxrf_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for {\n        i := i + 1\n        if i >= len(myString) {\n  \
    \          break\n        }\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075334
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += string(c)\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmple7hb2e1_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmple7hb2e1_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3btehn_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpfn3btehn_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, c := range myString {\n        if prefix == \"\" {\n   \
    \         prefix = c\n        } else {\n            if c != prefix {\n       \
    \         prefix = \"\"\n                result := append(result, prefix)\n  \
    \          }\n        }\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqk01cq99_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpqk01cq99_test.go:16:21: invalid operation: c != prefix (mismatched types
    rune and string)

    /tmp/tmpqk01cq99_test.go:18:17: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\"\
    \ {\n            prefix = c\n        } else {\n            prefix = prefix + c\n\
    \        }\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl474grc1_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpl474grc1_test.go:16:22: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[0:i]\n   \
    \     prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5x5xv3wp_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5x5xv3wp_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n        } else {\n     \
    \       prefix = char\n            prefixes = append(prefixes, prefix)\n     \
    \   }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg77tzrsw_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpg77tzrsw_test.go:16:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := make([]string, 0)\n\
    \    prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\
    \" {\n            prefix = c\n        } else {\n            if c == prefix {\n\
    \                prefix = \"\"\n            } else {\n                prefix =\
    \ prefix + c\n            }\n        }\n        result = append(result, prefix)\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdjqen06_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpgdjqen06_test.go:16:21: invalid operation: c == prefix (mismatched types
    rune and string)

    /tmp/tmpgdjqen06_test.go:19:26: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    i := 0\n    for i < length {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n        i += 1\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpysbz5ps2_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpysbz5ps2_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[0:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp30o9trfh_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp30o9trfh_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpdtdm8h4r_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpdtdm8h4r_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        prefix += letter\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbrapmk4_test.go:13:9: invalid operation: prefix += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ var i int\n    for i = 0; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpzncrh4lv_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpzncrh4lv_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefixes = append(prefixes, myString[0:len(myString)-1])\n    for i := 1; i\
    \ < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmp94r7oktj_test.go:11\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmp94r7oktj_test.go:25\
    \ +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_xmslxrf_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_xmslxrf_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        if i == 0 {\n            prefixes = append(prefixes, prefix)\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjwr6_7v_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    for\
    \ i := 0; i < len(myString); i++ {\n        result := append(result, myString[:i])\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekha3eig_test.go:12:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix += char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10rv7usm_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmp10rv7usm_test.go:17:13: invalid operation: prefix += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        if i == 0 {\n            prefixes = append(prefixes, prefix)\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjwr6_7v_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[0:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp30o9trfh_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp30o9trfh_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, c := range myString {\n        if prefix == \"\" {\n   \
    \         prefix = c\n        } else {\n            if prefix == c {\n       \
    \         prefix = \"\"\n            } else {\n                prefix = prefix\
    \ + c\n            }\n        }\n        result = append(result, prefix)\n   \
    \ }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6usxyyig_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmp6usxyyig_test.go:16:26: invalid operation: prefix == c (mismatched types
    string and rune)

    /tmp/tmp6usxyyig_test.go:19:26: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        prefix += letter\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbrapmk4_test.go:13:9: invalid operation: prefix += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        if myString[i]\
    \ == myString[len(myString)-1] {\n            prefixes = append(prefixes, prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += myString[i]\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_fjpwnw_test.go:17:13: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg1n8_oax_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpg1n8_oax_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString,\
    \ prefix) {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekuuy15a_test.go:11:28: undefined: all_prefixes_test

    /tmp/tmpekuuy15a_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, c := range myString {\n        if prefix == \"\" {\n   \
    \         prefix = c\n        } else {\n            if c == prefix {\n       \
    \         prefix = \"\"\n            } else {\n                prefix = prefix\
    \ + c\n            }\n        }\n    }\n    for _, c := range myString {\n   \
    \     if prefix == \"\" {\n            result = append(result, c)\n        } else\
    \ {\n            if c == prefix {\n                result = append(result, c)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qbs1mgj_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmp9qbs1mgj_test.go:16:21: invalid operation: c == prefix (mismatched types
    rune and string)

    /tmp/tmp9qbs1mgj_test.go:19:26: invalid operation: prefix + c (mismatched types
    string and rune)

    /tmp/tmp9qbs1mgj_test.go:25:37: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp9qbs1mgj_test.go:27:21: invalid operation: c == prefix (mismatched types
    rune and string)

    /tmp/tmp9qbs1mgj_test.go:28:41: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for i := 0; i < len(myString); i++ {\n        prefix +=\
    \ myString[i]\n        if i == 0 {\n            prefixes = append(prefixes, prefix)\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjwr6_7v_test.go:13:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for i < len(myString) {\n        prefixes = append(prefixes, myString[:i])\n\
    \        i += 1\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_hhe0fbc_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_hhe0fbc_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        prefix = prefix\
    \ + letter\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5520gerx_test.go:13:18: invalid operation: prefix + letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += string(c)\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmple7hb2e1_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmple7hb2e1_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_xmslxrf_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp_xmslxrf_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := make([]string, 0)\n\
    \    prefix := myString\n    for len(prefix) > 0 {\n        result = append(result,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmppg58mrkp_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmppg58mrkp_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n        } else {\n     \
    \       prefix = char\n            prefixes = append(prefixes, prefix)\n     \
    \   }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg77tzrsw_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpg77tzrsw_test.go:16:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ var i int\n    for i = 0; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8vi3kp5p_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp8vi3kp5p_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefixes = append(prefixes, myString[0:len(myString)-1])\n    for i := 1; i\
    \ < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmp94r7oktj_test.go:11\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmp94r7oktj_test.go:25\
    \ +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for _, prefix := range myString {\n        prefixes = append(prefixes, prefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphwljczr1_test.go:12:37: cannot use prefix (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3btehn_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpfn3btehn_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        prefix += letter\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbrapmk4_test.go:13:9: invalid operation: prefix += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char + prefix\n        }\n    }\n   \
    \ prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm08m8zx_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmplm08m8zx_test.go:17:22: invalid operation: char + prefix (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp88d68qf9_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp88d68qf9_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ var i int\n    for i = 0; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8vi3kp5p_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp8vi3kp5p_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += string(c)\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmple7hb2e1_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmple7hb2e1_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix += char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10rv7usm_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmp10rv7usm_test.go:17:13: invalid operation: prefix += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[0:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp30o9trfh_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp30o9trfh_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpdtdm8h4r_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpdtdm8h4r_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := make([]string, 0)\n\
    \    prefix := myString\n    for len(prefix) > 0 {\n        result = append(result,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmppg58mrkp_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmppg58mrkp_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3btehn_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpfn3btehn_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ for _, prefix := range myString {\n        prefixes = append(prefixes, prefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9ptc3wd_test.go:12:37: cannot use prefix (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := make([]string, 0)\n\
    \    prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\
    \" {\n            prefix = c\n        } else {\n            if c == prefix {\n\
    \                prefix = \"\"\n            } else {\n                prefix =\
    \ prefix + c\n            }\n        }\n        result = append(result, prefix)\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdjqen06_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpgdjqen06_test.go:16:21: invalid operation: c == prefix (mismatched types
    rune and string)

    /tmp/tmpgdjqen06_test.go:19:26: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3btehn_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpfn3btehn_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefix := \"\"\n    for _, letter := range myString {\n        prefix += letter\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_s10zno_test.go:13:9: invalid operation: prefix += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpaiwh4oot_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpaiwh4oot_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        if letter ==\
    \ prefix {\n            prefixes = append(prefixes, prefix)\n            prefix\
    \ = \"\"\n        } else {\n            prefix = letter + prefix\n        }\n\
    \    }\n    prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2g2ef7th_test.go:13:22: invalid operation: letter == prefix (mismatched
    types rune and string)

    /tmp/tmp2g2ef7th_test.go:17:22: invalid operation: letter + prefix (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp88d68qf9_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp88d68qf9_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, letter := range myString {\n        if letter ==\
    \ prefix {\n            prefixes = append(prefixes, prefix)\n            prefix\
    \ = \"\"\n        } else {\n            prefix = letter\n        }\n    }\n  \
    \  prefixes = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2qlruad7_test.go:13:22: invalid operation: letter == prefix (mismatched
    types rune and string)

    /tmp/tmp2qlruad7_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += string(c)\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmple7hb2e1_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmple7hb2e1_test.go:39: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for {\n        if i >= len(myString) {\n            break\n   \
    \     }\n        prefixes = append(prefixes, myString[:i])\n        i = i + 1\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpantjlidn_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpantjlidn_test.go:37: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for {\n        prefixes = append(prefixes, myString[:i])\n    \
    \    if i == len(myString) {\n            break\n        }\n        i++\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3a7ytk_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpfn3a7ytk_test.go:37: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefix := \"\"\n    for _, c := range myString {\n        prefix += string(c)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        prefix += string(c)\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg1n8_oax_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpg1n8_oax_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix = prefix\
    \ + char\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbtxjkq__test.go:13:18: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    prefix := myString[0:length-1]\n    prefixes =\
    \ append(prefixes, prefix)\n    for i := 1; i < length-1; i++ {\n        prefix\
    \ = myString[0:length-i] + prefix\n        prefixes = append(prefixes, prefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpl5__4xmk_test.go:12\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpl5__4xmk_test.go:28\
    \ +0x1c\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        prefix = prefix +\
    \ c\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmopmp6h_test.go:13:18: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += c\n        }\n    }\n    prefixes = append(prefixes,\
    \ prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkgdz788_test.go:17:13: invalid operation: prefix += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    var prefixes []string\n   \
    \ prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxo_gq775_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefixes = append(prefixes,\
    \ myString[:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfn3btehn_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpfn3btehn_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefix\
    \ := myString[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprofjvtvt_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprofjvtvt_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  i := 0\n    for ; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpp2a8hejp_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpp2a8hejp_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        prefix += char\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposqddl3f_test.go:13:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := \"\"\n    for _, char := range myString {\n        if char == prefix {\n\
    \            continue\n        }\n        prefix = char\n        result = append(result,\
    \ prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj5mwg3c9_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpj5mwg3c9_test.go:16:18: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := myString\n    for len(prefix) > 0 {\n        prefixes = append(prefixes,\
    \ prefix)\n        prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpk49wh24u_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if prefix == \"\"\
    \ {\n            prefix = c\n        } else {\n            if c != prefix {\n\
    \                prefixes = append(prefixes, prefix)\n                prefix =\
    \ c\n            }\n        }\n    }\n    prefixes = append(prefixes, prefix)\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawdwr625_test.go:14:22: cannot use c (variable of type rune) as type string
    in assignment

    /tmp/tmpawdwr625_test.go:16:21: invalid operation: c != prefix (mismatched types
    rune and string)

    /tmp/tmpawdwr625_test.go:18:26: cannot use c (variable of type rune) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, c := range myString {\n        if c == ' ' {\n \
    \           prefixes = append(prefixes, prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += c\n        }\n    }\n    prefixes = append(prefixes,\
    \ prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkgdz788_test.go:17:13: invalid operation: prefix += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpaiwh4oot_test.go:32: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpaiwh4oot_test.go:32: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    result := []string{}\n    prefix\
    \ := myString\n    for len(prefix) > 0 {\n        prefix = prefix[:len(prefix)-1]\n\
    \        result = append(result, prefix)\n    }\n    return result\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpdensr6ad_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg asdf asd as a ]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpdensr6ad_test.go:34: expected '[W WW WWW]', got '[WW W ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  prefix := \"\"\n    for _, char := range myString {\n        if char == prefix\
    \ {\n            prefixes = append(prefixes, prefix)\n            prefix = \"\"\
    \n        } else {\n            prefix = char\n        }\n    }\n    prefixes\
    \ = append(prefixes, prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu_7pva3_test.go:13:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmptu_7pva3_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    func all_prefixes(myString string) []string {\n    prefixes := []string{}\n  \
    \  length := len(myString)\n    for i := 0; i < length; i++ {\n        prefixes\
    \ = append(prefixes, myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp29fqls7n_test.go:33: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp29fqls7n_test.go:33: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
