language: go_test.go
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3jezcw04_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3jezcw04_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        diff += number - threshold\n        diff /= 2\n\
    \        if diff < 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpt3id0ovd_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpt3id0ovd_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpt3id0ovd_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9luq7c5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9luq7c5t_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9luq7c5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9luq7c5t_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    n := len(numbers)\n    if n < 2 {\n        return\
    \ false\n    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < n; i++\
    \ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkd3sd04o_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkd3sd04o_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkd3sd04o_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = 0\n        }\n\
    \        diff += number\n    }\n\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpzsh253j__test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpzsh253j__test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpzsh253j__test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpzsh253j__test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        diff += number - threshold\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfnc1im26_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfnc1im26_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpfnc1im26_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3sen8712_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3sen8712_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, num := range numbers[2:]\
    \ {\n        if abs(num-diff) < threshold {\n            return true\n       \
    \ }\n        diff = num\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqomu9idp_test.go:17:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            return true\n        }\n        diff = number - threshold\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxa_eiat_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmprp_wle72_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmprp_wle72_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmprp_wle72_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        diff += number - threshold\n        diff /= 2\n\
    \        if diff < 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpt3id0ovd_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpt3id0ovd_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpt3id0ovd_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3jezcw04_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3jezcw04_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, n :=\
    \ range numbers[2:] {\n        if diff > threshold {\n            return false\n\
    \        }\n\n        diff -= n\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpdoou8z2m_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpdoou8z2m_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpdoou8z2m_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n\n    min := numbers[0]\n    max := numbers[length-1]\n\
    \n    for i := 1; i < length; i++ {\n        if numbers[i] > max {\n         \
    \   max = numbers[i]\n        } else if numbers[i] < min {\n            min =\
    \ numbers[i]\n        }\n    }\n\n    return min - threshold <= max && max - threshold\
    \ >= min\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp0yf_dzei_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp0yf_dzei_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp0yf_dzei_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - diff < threshold {\n            return\
    \ true\n        }\n        diff = number - diff\n    }\n\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpl6jv984t_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpl6jv984t_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoj1w3omh_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for i := 1;\
    \ i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n       \
    \ diff /= 2\n\n        if diff < threshold {\n            return true\n      \
    \  }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpqfecct1__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpqfecct1__test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    n := len(numbers)\n    if n < 2 {\n        return\
    \ false\n    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < n; i++\
    \ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkd3sd04o_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkd3sd04o_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkd3sd04o_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_7vxrmov_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number > threshold {\n            return false\n\
    \        }\n\n        diff += number - threshold\n        diff /= 2\n    }\n\n\
    \    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpsrewohj0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpsrewohj0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpsrewohj0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpsrewohj0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3jezcw04_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3jezcw04_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_7vxrmov_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > threshold {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnv1ww6sx_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(number-diff) < threshold {\n            return true\n    \
    \    }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh42zaho_test.go:17:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_7vxrmov_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(diff-number) < threshold {\n            return true\n    \
    \    }\n        diff = number-numbers[0]\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzkdtgej_test.go:16:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoj1w3omh_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9luq7c5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9luq7c5t_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9luq7c5t_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9luq7c5t_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > threshold {\n            return false\n        }\n  \
    \      diff += number - threshold\n    }\n    return diff < 0\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpqgbieceb_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpqgbieceb_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpqgbieceb_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpqgbieceb_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjh36341_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n\
    \n    for _, number := range numbers {\n        diff += number - threshold\n \
    \       diff /= 2\n        diff *= diff\n    }\n\n    return diff < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5_kj6hcm_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp5_kj6hcm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5_kj6hcm_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp5_kj6hcm_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3sen8712_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3sen8712_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers[2:] {\n        if number - diff < threshold {\n           \
    \ return true\n        }\n\n        diff = number\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp52yc03gs_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp52yc03gs_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= float64(len(numbers))\n\
    \n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n\
    \        diff /= float64(len(numbers))\n        if diff < threshold {\n      \
    \      return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkeq37dw3_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkeq37dw3_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkeq37dw3_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n    diff := numbers[1] - numbers[0]\n    for i :=\
    \ 1; i < length; i++ {\n        diff += numbers[i] - numbers[i-1]\n        if\
    \ diff > threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp2gqj807h_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp2gqj807h_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp2gqj807h_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n    diff *= diff\n\
    \    diff += threshold\n\n    for _, number := range numbers {\n        diff +=\
    \ number - threshold\n        if diff < 0 {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3g1fmj3e_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3g1fmj3e_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp3g1fmj3e_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    diff := numbers[len(numbers)-1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if diff < threshold\
    \ {\n            return true\n        }\n        if diff > threshold {\n     \
    \       return false\n        }\n        diff -= numbers[i]\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3p9s8c5_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoj1w3omh_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoj1w3omh_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    for i := range numbers\
    \ {\n        if numbers[i] > threshold {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17rjauev_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_7vxrmov_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        diff += number - numbers[0]\n        if diff > threshold {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3o2mdcv6_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - diff < threshold {\n            return\
    \ true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4bs65g_v_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        diff += number - numbers[0]\n        if diff > threshold {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3o2mdcv6_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(number-diff) < threshold {\n            return true\n    \
    \    }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjfcef67_test.go:16:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_w5wxirh_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_w5wxirh_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_w5wxirh_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp_w5wxirh_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff = number - numbers[0]\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5mz5xbst_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp5mz5xbst_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5mz5xbst_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp5mz5xbst_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = number - threshold\n\
    \        }\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_7vxrmov_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp_7vxrmov_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        diff += number - numbers[0]\n        if diff > threshold {\n    \
    \        return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpucqkmaro_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpucqkmaro_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpucqkmaro_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n    diff := numbers[1] - numbers[0]\n    for i :=\
    \ 2; i < length; i++ {\n        diff += numbers[i] - numbers[i-1]\n        if\
    \ diff > threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmprom_8sfm_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmprom_8sfm_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmprom_8sfm_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpm0l0aqyv_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm0l0aqyv_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpw3t36qvl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpw3t36qvl_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpm0l0aqyv_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm0l0aqyv_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= n\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9ns9u49t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9ns9u49t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3jezcw04_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3jezcw04_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, num := range numbers[2:]\
    \ {\n        if num-diff < threshold {\n            return true\n        }\n \
    \       diff = num - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp2jy_v8fq_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp2jy_v8fq_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmp2jy_v8fq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - diff < threshold {\n            return\
    \ true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4bs65g_v_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbfge0g7d_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbfge0g7d_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbfge0g7d_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - diff < threshold {\n            return\
    \ true\n        }\n        diff = number - diff\n    }\n\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpl6jv984t_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpl6jv984t_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length == 0 {\n\
    \        return false\n    }\n    diff := numbers[0] - numbers[1]\n    for i :=\
    \ 1; i < length; i++ {\n        diff += numbers[i] - numbers[i-1]\n        if\
    \ diff > threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp207gybjq_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp207gybjq_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp207gybjq_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, num := range numbers[2:]\
    \ {\n        if num > threshold {\n            return false\n        }\n     \
    \   if diff > threshold {\n            diff = threshold - num\n        } else\
    \ {\n            diff = num - threshold\n        }\n    }\n    return true\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9kc_ck7l_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9kc_ck7l_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9kc_ck7l_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9kc_ck7l_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpajfmrt8a_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpajfmrt8a_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            diff = 0\n        }\n\
    \        diff += number - threshold\n    }\n    return diff < threshold\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpl3s_jtt6_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpl3s_jtt6_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpl3s_jtt6_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpl3s_jtt6_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(number-diff) < threshold {\n            return true\n    \
    \    }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjfcef67_test.go:16:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, n := range numbers[2:]\
    \ {\n        diff += n - numbers[0]\n        if diff > threshold {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpljtn87ir_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpljtn87ir_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpljtn87ir_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3jezcw04_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3jezcw04_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n    diff := numbers[1] - numbers[0]\n    for i :=\
    \ 2; i < length; i++ {\n        diff += numbers[i] - numbers[i-1]\n        if\
    \ diff > threshold {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpncd3tua0_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpncd3tua0_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpncd3tua0_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpncd3tua0_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff = number - numbers[0]\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9w3e02r4_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9w3e02r4_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9w3e02r4_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9w3e02r4_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3sen8712_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3sen8712_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n    diff := numbers[1] - numbers[0]\n    for i :=\
    \ 1; i < length; i++ {\n        diff += numbers[i] - numbers[i-1]\n        if\
    \ diff > threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp2gqj807h_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp2gqj807h_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp2gqj807h_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - diff < threshold {\n            return\
    \ true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4bs65g_v_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4bs65g_v_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        diff += number - numbers[0]\n        if diff > threshold {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3o2mdcv6_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp3o2mdcv6_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    length := len(numbers)\n    if length < 2 {\n\
    \        return false\n    }\n\n    min := numbers[0]\n    max := numbers[length-1]\n\
    \    for i := 1; i < length; i++ {\n        if numbers[i] > max {\n          \
    \  max = numbers[i]\n        }\n        if numbers[i] < min {\n            min\
    \ = numbers[i]\n        }\n    }\n\n    if max - min < threshold {\n        return\
    \ false\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpny5q45z3_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpny5q45z3_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpny5q45z3_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoikvj840_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpoikvj840_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if diff > threshold {\n            return false\n        }\n    \
    \    diff -= number\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmprgsjdt0a_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmprgsjdt0a_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmprgsjdt0a_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmprgsjdt0a_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number-diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpwfqdxpmu_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpwfqdxpmu_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpwfqdxpmu_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpm0l0aqyv_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm0l0aqyv_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptifntvkd_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmptifntvkd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    diff := numbers[len(numbers)-1]\
    \ - numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if diff < threshold\
    \ {\n            return true\n        }\n        if diff > threshold {\n     \
    \       return false\n        }\n        diff -= numbers[i]\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpouku_jwg_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp3sen8712_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp3sen8712_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    sort.Float64s(numbers)\n    for i := range numbers\
    \ {\n        if numbers[i] > threshold {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17rjauev_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(diff) < threshold {\n            return true\n        }\n\
    \        diff -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6quw_fi_test.go:16:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8jt5dam8_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp8jt5dam8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers[2:]\
    \ {\n        if abs(number-diff) < threshold {\n            return true\n    \
    \    }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh42zaho_test.go:17:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n    diff := numbers[1] - numbers[0]\n    for _, number := range numbers\
    \ {\n        if number - diff < threshold {\n            return true\n       \
    \ }\n        diff = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5jm3bewe_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp5jm3bewe_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074638
