language: go_test.go
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    numbers :=\
    \ strings.Split(strings.Join(numbers, \" \"), \"zero\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"one\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"two\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"three\"\
    )\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"four\")\n    numbers\
    \ := strings.Split(strings.Join(numbers, \" \"), \"five\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"six\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"seven\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"eight\"\
    )\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"nine\")\n    numbers\
    \ := strings.Split(strings.Join(numbers, \" \"), \"zero\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"one\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"two\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"three\"\
    )\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"four\")\n    numbers\
    \ := strings.Split(strings.Join(numbers, \" \"), \"five\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"six\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"seven\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"eight\"\
    )\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"nine\")\n    numbers\
    \ := strings.Split(strings.Join(numbers, \" \"), \"zero\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"one\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"two\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"three\"\
    )\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"four\")\n    numbers\
    \ := strings.Split(strings.Join(numbers, \" \"), \"five\")\n    numbers := strings.Split(strings.Join(numbers,\
    \ \" \"), \"six\")\n    numbers := strings.Split(strings.Join(numbers, \" \"),\
    \ \"seven\")\n    numbers := strings.Split(strings.Join(numbers, \" \"), \"\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsu1aw7y_test.go:42:58: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp69qxs4lb_test.go:12:13: no new variables on left side of :=

    /tmp/tmp69qxs4lb_test.go:12:16: undefined: strings

    /tmp/tmp69qxs4lb_test.go:13:13: no new variables on left side of :=

    /tmp/tmp69qxs4lb_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmp69qxs4lb_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp69qxs4lb_test.go:17:5: undefined: sort

    /tmp/tmp69qxs4lb_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn94yy2x_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmptn94yy2x_test.go:12:16: undefined:\
    \ strings\n/tmp/tmptn94yy2x_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmptn94yy2x_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmptn94yy2x_test.go:13:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmptn94yy2x_test.go:14:5: undefined: sort\n/tmp/tmptn94yy2x_test.go:15:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var output string\n\
    \    for _, number := range strings.Split(numbers, \" \") {\n        if number\
    \ == \"zero\" {\n            output = \"zero \"\n        } else if number == \"\
    one\" {\n            output = \"one \"\n        } else if number == \"two\" {\n\
    \            output = \"two \"\n        } else if number == \"three\" {\n    \
    \        output = \"three \"\n        } else if number == \"four\" {\n       \
    \     output = \"four \"\n        } else if number == \"five\" {\n           \
    \ output = \"five \"\n        } else if number == \"six\" {\n            output\
    \ = \"six \"\n        } else if number == \"seven\" {\n            output = \"\
    seven \"\n        } else if number == \"eight\" {\n            output = \"eight\
    \ \"\n        } else if number == \"nine\" {\n            output = \"nine \"\n\
    \        } else {\n            output = output + number + \" \" // append the\
    \ number to the output\n        }\n    }\n    return output\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07zhrpf9_test.go:13:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gsoqv21_test.go:12:15: undefined: strings

    /tmp/tmp5gsoqv21_test.go:13:13: no new variables on left side of :=

    /tmp/tmp5gsoqv21_test.go:13:16: undefined: strings

    /tmp/tmp5gsoqv21_test.go:14:5: undefined: sort

    /tmp/tmp5gsoqv21_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimPrefix(numbers, \"0\")\n    numbers = strings.TrimPrefix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffi\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo8756blk_test.go:55:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0e_7wqq_test.go:12:15: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:13:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:13:16: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:14:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmpv0e_7wqq_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\"}, numbers...)\n    numbers :=\
    \ append(numbers, []string{\"nine\"}...)\n    sort.Strings(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv0xfxfpl_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmpv0xfxfpl_test.go:12:16: undefined:\
    \ strings\n/tmp/tmpv0xfxfpl_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmpv0xfxfpl_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmpv0xfxfpl_test.go:13:41:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmpv0xfxfpl_test.go:14:13: no new variables on left side of :=\n\
    /tmp/tmpv0xfxfpl_test.go:14:23: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpv0xfxfpl_test.go:15:5: undefined:\
    \ sort\n/tmp/tmpv0xfxfpl_test.go:16:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps953rnig_test.go:76:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        if number == \"zero\" {\n            numbers[i] = \"1\"\n\
    \        } else if number == \"one\" {\n            numbers[i] = \"2\"\n     \
    \   } else if number == \"two\" {\n            numbers[i] = \"3\"\n        } else\
    \ if number == \"three\" {\n            numbers[i] = \"4\"\n        } else if\
    \ number == \"four\" {\n            numbers[i] = \"5\"\n        } else if number\
    \ == \"five\" {\n            numbers[i] = \"6\"\n        } else if number == \"\
    six\" {\n            numbers[i] = \"7\"\n        } else if number == \"seven\"\
    \ {\n            numbers[i] = \"8\"\n        } else if number == \"eight\" {\n\
    \            numbers[i] = \"9\"\n        } else if number == \"nine\" {\n    \
    \        numbers[i] = \"0\"\n        } else {\n            fmt.Println(\"Invalid\
    \ number:\", number)\n        }\n    }\n    sort.Strings(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8vfkp7c_test.go:12:13: no new variables on left side of :=

    /tmp/tmpj8vfkp7c_test.go:12:16: undefined: strings

    /tmp/tmpj8vfkp7c_test.go:13:13: no new variables on left side of :=

    /tmp/tmpj8vfkp7c_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpj8vfkp7c_test.go:15:22: invalid operation: number == "zero" (mismatched
    types rune and untyped string)

    /tmp/tmpj8vfkp7c_test.go:16:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpj8vfkp7c_test.go:17:29: invalid operation: number == "one" (mismatched
    types rune and untyped string)

    /tmp/tmpj8vfkp7c_test.go:18:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpj8vfkp7c_test.go:19:29: invalid operation: number == "two" (mismatched
    types rune and untyped string)

    /tmp/tmpj8vfkp7c_test.go:20:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpj8vfkp7c_test.go:20:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04a3b6t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:12:16: undefined: strings

    /tmp/tmpd04a3b6t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpd04a3b6t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpd04a3b6t_test.go:17:5: undefined: sort

    /tmp/tmpd04a3b6t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \",\")\n    numbers = strings.TrimRight(numbers, \"\\n\")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpif370p2j_test.go:55:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i][:len(numbers[i])-1]\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkn1tevl_test.go:12:13: no new variables on left side of :=

    /tmp/tmphkn1tevl_test.go:12:16: undefined: strings

    /tmp/tmphkn1tevl_test.go:13:13: no new variables on left side of :=

    /tmp/tmphkn1tevl_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmphkn1tevl_test.go:15:22: invalid operation: cannot slice numbers[i] (value
    of type byte)

    /tmp/tmphkn1tevl_test.go:17:5: undefined: sort

    /tmp/tmphkn1tevl_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn94yy2x_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmptn94yy2x_test.go:12:16: undefined:\
    \ strings\n/tmp/tmptn94yy2x_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmptn94yy2x_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmptn94yy2x_test.go:13:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmptn94yy2x_test.go:14:5: undefined: sort\n/tmp/tmptn94yy2x_test.go:15:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \".\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"+\")\n    numbers = strings.Trim(numbers,\
    \ \"/\")\n    numbers = strings.Trim(numbers, \"(\")\n    numbers = strings.Trim(numbers,\
    \ \")\")\n    numbers = strings.Trim(numbers, \"/\")\n    numbers = strings.Trim(numbers,\
    \ \"*\")\n    numbers = strings.Trim(numbers, \"%\")\n    numbers = strings.Trim(numbers,\
    \ \"#\")\n    numbers = strings.Trim(numbers, \"@\")\n    numbers = strings.Trim(numbers,\
    \ \"$\")\n    numbers = strings.Trim(numbers, \"%\")\n    numbers = strings.Trim(numbers,\
    \ \"!\")\n    numbers = strings.Trim(numbers, \"?\")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"+\")\n    numbers = strings.Trim(numbers,\
    \ \"/\")\n    numbers = strings.Trim(numbers, \"(\")\n    numbers = strings.Trim(numbers,\
    \ \")\")\n    numbers = strings.Trim(numbers, \"/\")\n    numbers = strings.Trim(numbers,\
    \ \"*\")\n    numbers = strings.Trim(numbers, \"%\")\n    numbers = strings.Trim(numbers,\
    \ \"#\")\n    numbers = strings.Trim(numbers, \"@\")\n    numbers = strings.Trim(numbers,\
    \ \"$\")\n    numbers = strings.Trim(numbers, \"%\")\n    numbers = strings.Trim(numbers,\
    \ \"!\")\n    numbers = strings.Trim(numbers, \"?\")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8zcru2jl_test.go:62:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn35fgs05_test.go:12:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:12:16: undefined: strings

    /tmp/tmpn35fgs05_test.go:13:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpn35fgs05_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpn35fgs05_test.go:17:5: undefined: sort

    /tmp/tmpn35fgs05_test.go:18:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:18:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3vnh65xp_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4na6zuvl_test.go:12:15: undefined: strings

    /tmp/tmp4na6zuvl_test.go:13:13: no new variables on left side of :=

    /tmp/tmp4na6zuvl_test.go:13:16: undefined: strings

    /tmp/tmp4na6zuvl_test.go:14:13: no new variables on left side of :=

    /tmp/tmp4na6zuvl_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp4na6zuvl_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0e_7wqq_test.go:12:15: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:13:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:13:16: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:14:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmpv0e_7wqq_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7msyv7fa_test.go:12:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:12:16: undefined: strings

    /tmp/tmp7msyv7fa_test.go:13:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:13:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp7msyv7fa_test.go:14:5: undefined: sort

    /tmp/tmp7msyv7fa_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var result string\n\
    \    var numbers_array []string\n    var i int\n    var j int\n    var k int\n\
    \    var l int\n    var m int\n\n    // Split string into array\n    numbers_array\
    \ = strings.Split(numbers, \" \")\n\n    // Sort array\n    for i = 0; i <= len(numbers_array);\
    \ i++ {\n        numbers_array[i] = strings.ToLower(numbers_array[i])\n    }\n\
    \    for i = 0; i <= len(numbers_array); i++ {\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"nine\", \"9\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"zero\", \"0\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"one\", \"1\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"two\", \"2\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"three\", \"3\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"four\", \"4\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"five\", \"5\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"six\", \"6\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"seven\", \"7\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"eight\", \"8\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"nine\", \"9\", -1)\n    }\n    for i = 0; i <= len(numbers_array); i++ {\n\
    \        numbers_array[i] = strings.Replace(numbers_array[i], \"9\", \"nine\"\
    , -1)\n        numbers_array[i] = strings.Replace(numbers_array[i], \"0\", \"\
    zero\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i], \"1\"\
    , \"one\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i], \"\
    2\", \"two\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"3\", \"three\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"4\", \"four\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"5\", \"five\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"6\", \"six\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"7\", \"seven\", -1)\n        numbers_array[i] = strings.Replace(numbers_array[i],\
    \ \"8\", \"eight\", -1)\n        numbers_array\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg_rgq10c_test.go:52:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvf5sq59_test.go:12:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:12:16: undefined: strings

    /tmp/tmptvf5sq59_test.go:13:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmptvf5sq59_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmptvf5sq59_test.go:17:5: undefined: sort

    /tmp/tmptvf5sq59_test.go:18:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:18:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqztaha3p_test.go:12:13: no new variables on left side of :=

    /tmp/tmpqztaha3p_test.go:12:16: undefined: strings

    /tmp/tmpqztaha3p_test.go:13:13: no new variables on left side of :=

    /tmp/tmpqztaha3p_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpqztaha3p_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpqztaha3p_test.go:17:5: undefined: sort

    /tmp/tmpqztaha3p_test.go:18:13: no new variables on left side of :=

    /tmp/tmpqztaha3p_test.go:18:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmputqwnw6k_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"ten\")\n    numbers := append(numbers,\
    \ \"eleven\")\n    numbers := append(numbers, \"twelve\")\n    numbers := append(numbers,\
    \ \"thirteen\")\n    numbers := append(numbers, \"fourteen\")\n    numbers :=\
    \ append(numbers, \"fifteen\")\n    numbers := append(numbers, \"sixteen\")\n\
    \    numbers := append(numbers, \"seventeen\")\n    numbers := append(numbers,\
    \ \"eighteen\")\n    numbers := append(numbers, \"nineteen\")\n    numbers :=\
    \ append(numbers, \"twenty\")\n    numbers := append(numbers, \"thirty\")\n  \
    \  numbers := append(numbers, \"forty\")\n    numbers := append(numbers, \"fifty\"\
    )\n    numbers := append(numbers, \"sixty\")\n    numbers := append(numbers, \"\
    seventy\")\n    numbers := append(numbers, \"eighty\")\n    numbers := append(numbers,\
    \ \"ninety\")\n    numbers := append(numbers, \"hundred\")\n    numbers := append(numbers,\
    \ \"thousand\")\n    numbers := append(numbers, \"million\")\n    numbers := append(numbers,\
    \ \"billion\")\n    numbers := append(numbers, \"trillion\")\n    numbers := append(numbers,\
    \ \"quadrillion\")\n    numbers := append(numbers, \"quintillion\")\n    numbers\
    \ := append(numbers, \"sextillion\")\n    numbers := append(numbers, \"septillion\"\
    )\n    numbers := append(numbers, \"octillion\")\n    numbers := append(numbers,\
    \ \"nonillion\")\n    numbers := append(numbers, \"decillion\")\n    numbers :=\
    \ append(numbers, \"undecillion\")\n    numbers := append(numbers, \"duodecillion\"\
    )\n    numbers := append(numbers, \"tredecillion\")\n    numbers := append(numbers,\
    \ \"quattuordecillion\")\n    numbers := append(numbers, \"quindecillion\")\n\
    \    numbers := append(numbers, \"sexdecillion\")\n    numbers := append(numbers,\
    \ \"septendecillion\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4v583ijs_test.go:59:32: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var result string\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\\"\")\n    numbers = strings.Trim(numbers,\
    \ \"'\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg8v0nwne_test.go:64:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var numbers []string\n\
    \    for _, number := range strings.Split(numbers, \" \") {\n        if number\
    \ == \"zero\" {\n            numbers = append(numbers, \"0\")\n        } else\
    \ if number == \"one\" {\n            numbers = append(numbers, \"1\")\n     \
    \   } else if number == \"two\" {\n            numbers = append(numbers, \"2\"\
    )\n        } else if number == \"three\" {\n            numbers = append(numbers,\
    \ \"3\")\n        } else if number == \"four\" {\n            numbers = append(numbers,\
    \ \"4\")\n        } else if number == \"five\" {\n            numbers = append(numbers,\
    \ \"5\")\n        } else if number == \"six\" {\n            numbers = append(numbers,\
    \ \"6\")\n        } else if number == \"seven\" {\n            numbers = append(numbers,\
    \ \"7\")\n        } else if number == \"eight\" {\n            numbers = append(numbers,\
    \ \"8\")\n        } else if number == \"nine\" {\n            numbers = append(numbers,\
    \ \"9\")\n        } else {\n            numbers = append(numbers, number)\n  \
    \      }\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpalvf5jn7_test.go:12:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpalvf5jn7_test.go:11:19: other declaration\
    \ of numbers\n/tmp/tmpalvf5jn7_test.go:13:28: undefined: strings\n/tmp/tmpalvf5jn7_test.go:15:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:17:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:19:30: first argument\
    \ to append must be a slice; have numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:21:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:23:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:25:30: first argument\
    \ to append must be a slice; have numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:27:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:29:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:29:30: too many\
    \ errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \".\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \".\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ejktwdy_test.go:62:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"\")\n    sort.Strings(numbers)\n  \
    \  return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkexuscs5_test.go:12:13: no new variables on left side of :=

    /tmp/tmpkexuscs5_test.go:12:16: undefined: strings

    /tmp/tmpkexuscs5_test.go:13:13: no new variables on left side of :=

    /tmp/tmpkexuscs5_test.go:13:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpkexuscs5_test.go:14:5: undefined: sort

    /tmp/tmpkexuscs5_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpega3thsk_test.go:63:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn94yy2x_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmptn94yy2x_test.go:12:16: undefined:\
    \ strings\n/tmp/tmptn94yy2x_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmptn94yy2x_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmptn94yy2x_test.go:13:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmptn94yy2x_test.go:14:5: undefined: sort\n/tmp/tmptn94yy2x_test.go:15:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppq4o_g22_test.go:12:15: undefined: strings

    /tmp/tmppq4o_g22_test.go:13:13: no new variables on left side of :=

    /tmp/tmppq4o_g22_test.go:13:16: undefined: strings

    /tmp/tmppq4o_g22_test.go:14:5: undefined: sort

    /tmp/tmppq4o_g22_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps953rnig_test.go:76:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_sort(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnridoaq7_test.go:12:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:12:16: undefined: strings

    /tmp/tmpnridoaq7_test.go:13:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpnridoaq7_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fwepbp8_test.go:12:13: no new variables on left side of :=

    /tmp/tmp2fwepbp8_test.go:12:16: undefined: strings

    /tmp/tmp2fwepbp8_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2fwepbp8_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp2fwepbp8_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp2fwepbp8_test.go:17:5: undefined: sort

    /tmp/tmp2fwepbp8_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, v := range numbers\
    \ {\n        numbers[i] = int(v)\n    }\n    sort.Ints(numbers)\n    numbers :=\
    \ make([]string, len(numbers))\n    for i, v := range numbers {\n        numbers[i]\
    \ = strconv.Itoa(v)\n    }\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vru2m5x_test.go:12:13: no new variables on left side of :=

    /tmp/tmp0vru2m5x_test.go:12:16: undefined: strings

    /tmp/tmp0vru2m5x_test.go:13:13: no new variables on left side of :=

    /tmp/tmp0vru2m5x_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp0vru2m5x_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp0vru2m5x_test.go:17:5: undefined: sort

    /tmp/tmp0vru2m5x_test.go:18:13: no new variables on left side of :=

    /tmp/tmp0vru2m5x_test.go:18:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmp0vru2m5x_test.go:20:22: undefined: strconv

    /tmp/tmp0vru2m5x_test.go:22:12: undefined: strings

    /tmp/tmp0vru2m5x_test.go:22:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\"}, numbers...)\n    numbers :=\
    \ append(numbers, []string{\"nine\"}...)\n    sort.Strings(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv0xfxfpl_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmpv0xfxfpl_test.go:12:16: undefined:\
    \ strings\n/tmp/tmpv0xfxfpl_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmpv0xfxfpl_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmpv0xfxfpl_test.go:13:41:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmpv0xfxfpl_test.go:14:13: no new variables on left side of :=\n\
    /tmp/tmpv0xfxfpl_test.go:14:23: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpv0xfxfpl_test.go:15:5: undefined:\
    \ sort\n/tmp/tmpv0xfxfpl_test.go:16:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.Tri\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2om_c2lc_test.go:54:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7msyv7fa_test.go:12:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:12:16: undefined: strings

    /tmp/tmp7msyv7fa_test.go:13:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:13:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp7msyv7fa_test.go:14:5: undefined: sort

    /tmp/tmp7msyv7fa_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04a3b6t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:12:16: undefined: strings

    /tmp/tmpd04a3b6t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpd04a3b6t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpd04a3b6t_test.go:17:5: undefined: sort

    /tmp/tmpd04a3b6t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpczxytw4e_test.go:66:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\f\")\n    numbers = strings.Trim(numbers,\
    \ \"\\v\")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\f\")\n    numbers = strings.Trim(numbers,\
    \ \"\\v\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\f\")\n    numbers = strings.Trim(numbers, \"\\v\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\f\")\n    numbers = strings.Trim(numbers,\
    \ \"\\v\")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\f\")\n    numbers = strings.Trim(numbers, \"\\v\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\f\")\n    numbers = strings.Trim(numbers,\
    \ \"\\v\")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\f\")\n    numbers = strings.Trim(numbers, \"\\v\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydh3dyej_test.go:60:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn94yy2x_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmptn94yy2x_test.go:12:16: undefined:\
    \ strings\n/tmp/tmptn94yy2x_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmptn94yy2x_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmptn94yy2x_test.go:13:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmptn94yy2x_test.go:14:5: undefined: sort\n/tmp/tmptn94yy2x_test.go:15:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = \"zero\"\n    }\n    for i := range numbers {\n    \
    \    if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i] != \"two\"\
    \ && numbers[i] != \"three\" && numbers[i] != \"four\" && numbers[i] != \"five\"\
    \ && numbers[i] != \"six\" && numbers[i] != \"seven\" && numbers[i] != \"eight\"\
    \ && numbers[i] != \"nine\" {\n            numbers[i] = \"zero\"\n        }\n\
    \    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1mxw0ms5_test.go:12:13: no new variables on left side of :=

    /tmp/tmp1mxw0ms5_test.go:12:16: undefined: strings

    /tmp/tmp1mxw0ms5_test.go:13:13: no new variables on left side of :=

    /tmp/tmp1mxw0ms5_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmp1mxw0ms5_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp1mxw0ms5_test.go:18:26: invalid operation: numbers[i] != "zero" (mismatched
    types byte and untyped string)

    /tmp/tmp1mxw0ms5_test.go:18:50: invalid operation: numbers[i] != "one" (mismatched
    types byte and untyped string)

    /tmp/tmp1mxw0ms5_test.go:18:73: invalid operation: numbers[i] != "two" (mismatched
    types byte and untyped string)

    /tmp/tmp1mxw0ms5_test.go:18:96: invalid operation: numbers[i] != "three" (mismatched
    types byte and untyped string)

    /tmp/tmp1mxw0ms5_test.go:18:121: invalid operation: numbers[i] != "four" (mismatched
    types byte and untyped string)

    /tmp/tmp1mxw0ms5_test.go:18:121: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7msyv7fa_test.go:12:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:12:16: undefined: strings

    /tmp/tmp7msyv7fa_test.go:13:13: no new variables on left side of :=

    /tmp/tmp7msyv7fa_test.go:13:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp7msyv7fa_test.go:14:5: undefined: sort

    /tmp/tmp7msyv7fa_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8h1217t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:12:16: undefined: strings

    /tmp/tmpy8h1217t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpy8h1217t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpy8h1217t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpy8h1217t_test.go:17:5: undefined: sort

    /tmp/tmpy8h1217t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2key5j5f_test.go:12:15: undefined: strings

    /tmp/tmp2key5j5f_test.go:13:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:13:16: undefined: strings

    /tmp/tmp2key5j5f_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2key5j5f_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp2key5j5f_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppq4o_g22_test.go:12:15: undefined: strings

    /tmp/tmppq4o_g22_test.go:13:13: no new variables on left side of :=

    /tmp/tmppq4o_g22_test.go:13:16: undefined: strings

    /tmp/tmppq4o_g22_test.go:14:5: undefined: sort

    /tmp/tmppq4o_g22_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    numbers := make([]string, len(numbers))\n    for i, number := range numbers\
    \ {\n        numbers[i] = fmt.Sprintf(\"%d\", number)\n    }\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgmrfxoe_test.go:12:13: no new variables on left side of :=

    /tmp/tmphgmrfxoe_test.go:12:16: undefined: strings

    /tmp/tmphgmrfxoe_test.go:13:13: no new variables on left side of :=

    /tmp/tmphgmrfxoe_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmphgmrfxoe_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmphgmrfxoe_test.go:17:5: undefined: sort

    /tmp/tmphgmrfxoe_test.go:18:13: no new variables on left side of :=

    /tmp/tmphgmrfxoe_test.go:18:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmphgmrfxoe_test.go:20:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmphgmrfxoe_test.go:22:12: undefined: strings

    /tmp/tmphgmrfxoe_test.go:22:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimLeft(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbie14tbd_test.go:55:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(numbers,\
    \ \"three\")\n    numbers := append(numbers, \"four\")\n    numbers := append(numbers,\
    \ \"five\")\n    numbers := append(numbers, \"six\")\n    numbers := append(numbers,\
    \ \"seven\")\n    numbers := append(numbers, \"eight\")\n    numbers := append(numbers,\
    \ \"nine\")\n    numbers := append(numbers, \"zero\")\n    numbers := append(numbers,\
    \ \"one\")\n    numbers := append(numbers, \"two\")\n    numbers := append(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpczxytw4e_test.go:66:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsk0lm3cj_test.go:62:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0e_7wqq_test.go:12:15: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:13:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:13:16: undefined: strings

    /tmp/tmpv0e_7wqq_test.go:14:13: no new variables on left side of :=

    /tmp/tmpv0e_7wqq_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmpv0e_7wqq_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4na6zuvl_test.go:12:15: undefined: strings

    /tmp/tmp4na6zuvl_test.go:13:13: no new variables on left side of :=

    /tmp/tmp4na6zuvl_test.go:13:16: undefined: strings

    /tmp/tmp4na6zuvl_test.go:14:13: no new variables on left side of :=

    /tmp/tmp4na6zuvl_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmp4na6zuvl_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, numbers...)\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq54drwrm_test.go:12:13: no new variables on left side of :=

    /tmp/tmpq54drwrm_test.go:12:16: undefined: strings

    /tmp/tmpq54drwrm_test.go:13:13: no new variables on left side of :=

    /tmp/tmpq54drwrm_test.go:13:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpq54drwrm_test.go:14:5: undefined: sort

    /tmp/tmpq54drwrm_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_sort(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnridoaq7_test.go:12:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:12:16: undefined: strings

    /tmp/tmpnridoaq7_test.go:13:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpnridoaq7_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqtayq91p_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_sort(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnridoaq7_test.go:12:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:12:16: undefined: strings

    /tmp/tmpnridoaq7_test.go:13:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpnridoaq7_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3vnh65xp_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn35fgs05_test.go:12:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:12:16: undefined: strings

    /tmp/tmpn35fgs05_test.go:13:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpn35fgs05_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpn35fgs05_test.go:17:5: undefined: sort

    /tmp/tmpn35fgs05_test.go:18:13: no new variables on left side of :=

    /tmp/tmpn35fgs05_test.go:18:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsfzszub_test.go:12:15: undefined: strings

    /tmp/tmppsfzszub_test.go:13:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:13:16: undefined: strings

    /tmp/tmppsfzszub_test.go:14:13: no new variables on left side of :=

    /tmp/tmppsfzszub_test.go:14:16: undefined: sort_numbers_test

    /tmp/tmppsfzszub_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var numbers []string\n\
    \    for _, number := range strings.Split(numbers, \" \") {\n        if number\
    \ == \"zero\" {\n            numbers = append(numbers, \"0\")\n        } else\
    \ if number == \"one\" {\n            numbers = append(numbers, \"1\")\n     \
    \   } else if number == \"two\" {\n            numbers = append(numbers, \"2\"\
    )\n        } else if number == \"three\" {\n            numbers = append(numbers,\
    \ \"3\")\n        } else if number == \"four\" {\n            numbers = append(numbers,\
    \ \"4\")\n        } else if number == \"five\" {\n            numbers = append(numbers,\
    \ \"5\")\n        } else if number == \"six\" {\n            numbers = append(numbers,\
    \ \"6\")\n        } else if number == \"seven\" {\n            numbers = append(numbers,\
    \ \"7\")\n        } else if number == \"eight\" {\n            numbers = append(numbers,\
    \ \"8\")\n        } else if number == \"nine\" {\n            numbers = append(numbers,\
    \ \"9\")\n        } else {\n            numbers = append(numbers, number)\n  \
    \      }\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpalvf5jn7_test.go:12:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpalvf5jn7_test.go:11:19: other declaration\
    \ of numbers\n/tmp/tmpalvf5jn7_test.go:13:28: undefined: strings\n/tmp/tmpalvf5jn7_test.go:15:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:17:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:19:30: first argument\
    \ to append must be a slice; have numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:21:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:23:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:25:30: first argument\
    \ to append must be a slice; have numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:27:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmpalvf5jn7_test.go:29:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmpalvf5jn7_test.go:29:30: too many\
    \ errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := append([]string{\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"}, numbers...)\n    sort.Strings(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ujok4s6_test.go:12:15:\
    \ undefined: strings\n/tmp/tmp8ujok4s6_test.go:13:13: no new variables on left\
    \ side of :=\n/tmp/tmp8ujok4s6_test.go:13:16: undefined: strings\n/tmp/tmp8ujok4s6_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmp8ujok4s6_test.go:14:16: cannot\
    \ use append([]string{\u2026}, numbers...) (value of type []string) as type string\
    \ in assignment\n/tmp/tmp8ujok4s6_test.go:14:113: cannot use numbers (variable\
    \ of type string) as type []string in argument to append\n/tmp/tmp8ujok4s6_test.go:15:5:\
    \ undefined: sort\n/tmp/tmp8ujok4s6_test.go:16:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\t\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.TrimSuffix(numbers, \"\\n\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\t\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\r\")\n    numbers = strings.\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnvmpygag_test.go:54:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var result string\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \".\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2d50d85d_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_sort(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnridoaq7_test.go:12:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:12:16: undefined: strings

    /tmp/tmpnridoaq7_test.go:13:13: no new variables on left side of :=

    /tmp/tmpnridoaq7_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpnridoaq7_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoy6876y2_test.go:54:40: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps953rnig_test.go:76:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvf5sq59_test.go:12:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:12:16: undefined: strings

    /tmp/tmptvf5sq59_test.go:13:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:13:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmptvf5sq59_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmptvf5sq59_test.go:17:5: undefined: sort

    /tmp/tmptvf5sq59_test.go:18:13: no new variables on left side of :=

    /tmp/tmptvf5sq59_test.go:18:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    var result string\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    for i = 0; i\
    \ <= len(numbers); i++ {\n        j = i\n        for k = i; k <= len(numbers);\
    \ k++ {\n            if numbers[k] < numbers[j] {\n                j = k\n   \
    \         }\n        }\n        result = result + numbers[i] + numbers[j]\n  \
    \  }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5kzxren_test.go:16:9: l declared but not used

    /tmp/tmpi5kzxren_test.go:24:18: invalid operation: result + numbers[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        numbers[i] = int(numbers[i])\n\
    \    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n\
    \    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwlsaighl_test.go:12:15: undefined: strings

    /tmp/tmpwlsaighl_test.go:13:13: no new variables on left side of :=

    /tmp/tmpwlsaighl_test.go:13:16: undefined: strings

    /tmp/tmpwlsaighl_test.go:14:13: no new variables on left side of :=

    /tmp/tmpwlsaighl_test.go:14:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpwlsaighl_test.go:16:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpwlsaighl_test.go:18:5: undefined: sort

    /tmp/tmpwlsaighl_test.go:19:13: no new variables on left side of :=

    /tmp/tmpwlsaighl_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn94yy2x_test.go:12:13:\
    \ no new variables on left side of :=\n/tmp/tmptn94yy2x_test.go:12:16: undefined:\
    \ strings\n/tmp/tmptn94yy2x_test.go:13:13: no new variables on left side of :=\n\
    /tmp/tmptn94yy2x_test.go:13:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmptn94yy2x_test.go:13:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmptn94yy2x_test.go:14:5: undefined: sort\n/tmp/tmptn94yy2x_test.go:15:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeqc5qfgb_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = \"zero\"\n    }\n    for i := range numbers {\n    \
    \    if numbers[i] != \"zero\" {\n            numbers[i] = \"one\"\n        }\n\
    \    }\n    for i := range numbers {\n        if numbers[i] != \"zero\" && numbers[i]\
    \ != \"one\" {\n            numbers[i] = \"two\"\n        }\n    }\n    for i\
    \ := range numbers {\n        if numbers[i] != \"zero\" && numbers[i] != \"one\"\
    \ && numbers[i] != \"two\" {\n            numbers[i] = \"three\"\n        }\n\
    \    }\n    for i := range numbers {\n        if numbers[i] != \"zero\" && numbers[i]\
    \ != \"one\" && numbers[i] != \"two\" && numbers[i] != \"three\" {\n         \
    \   numbers[i] = \"four\"\n        }\n    }\n    for i := range numbers {\n  \
    \      if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i] != \"\
    two\" && numbers[i] != \"three\" && numbers[i] != \"four\" {\n            numbers[i]\
    \ = \"five\"\n        }\n    }\n    for i := range numbers {\n        if numbers[i]\
    \ != \"zero\" && numbers[i] != \"one\" && numbers[i] != \"two\" && numbers[i]\
    \ != \"three\" && numbers[i] != \"four\" && numbers[i] != \"five\" {\n       \
    \     numbers[i] = \"six\"\n        }\n    }\n    for i := range numbers {\n \
    \       if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i] != \"\
    two\" && numbers[i] != \"three\" && numbers[i] != \"four\" && numbers[i] != \"\
    five\" && numbers[i] != \"six\" {\n            numbers[i] = \"seven\"\n      \
    \  }\n    }\n    for i := range numbers {\n        if numbers[i] != \"zero\" &&\
    \ numbers[i] != \"one\" && numbers[i] != \"two\" && numbers[i] != \"three\" &&\
    \ numbers[i] != \"four\" && numbers[i] != \"five\" && numbers[i] != \"six\" &&\
    \ numbers[i] != \"seven\" {\n            numbers[i] = \"eight\"\n        }\n \
    \   }\n    for i := range numbers {\n        if numbers[i] != \"zero\" && numbers[i]\
    \ != \"one\" && numbers[i] != \"two\" && numbers[i] != \"three\" && numbers[i]\
    \ != \"four\" && numbers[i] != \"five\" && numbers[i] != \"six\" && numbers[i]\
    \ != \"seven\" && numbers[i] != \"eight\" {\n            numbers[i] = \"nine\"\
    \n        }\n    }\n    for i := range numbers {\n        if numbers[i] != \"\
    zero\" && numbers[i] != \"one\" && numbers[i] != \"two\" && numbers[i] != \"three\"\
    \ && numbers[i] != \"four\" && numbers[i] != \"five\" && numbers[i] != \"six\"\
    \ && numbers[i] != \"seven\" && \nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7iishlck_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.sort_numbers_test(numbers)\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxj9w92v_test.go:12:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:12:16: undefined: strings

    /tmp/tmpvxj9w92v_test.go:13:13: no new variables on left side of :=

    /tmp/tmpvxj9w92v_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpvxj9w92v_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(numbers,\
    \ \"two\")\n    numbers := append(numbers, \"three\")\n    numbers := append(numbers,\
    \ \"four\")\n    numbers := append(numbers, \"five\")\n    numbers := append(numbers,\
    \ \"six\")\n    numbers := append(numbers, \"seven\")\n    numbers := append(numbers,\
    \ \"eight\")\n    numbers := append(numbers, \"nine\")\n    numbers := append(numbers,\
    \ \"zero\")\n    numbers := append(numbers, \"one\")\n    numbers := append(\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vjn6_sa_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmps7njyn_test.go:12:13: no new variables on left side of :=

    /tmp/tmpmps7njyn_test.go:12:16: undefined: strings

    /tmp/tmpmps7njyn_test.go:13:5: undefined: sort

    /tmp/tmpmps7njyn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgojodyae_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh_vi43q_test.go:12:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:12:16: undefined: strings

    /tmp/tmpbh_vi43q_test.go:13:13: no new variables on left side of :=

    /tmp/tmpbh_vi43q_test.go:13:16: undefined: sort_numbers_test

    /tmp/tmpbh_vi43q_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04a3b6t_test.go:12:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:12:16: undefined: strings

    /tmp/tmpd04a3b6t_test.go:13:13: no new variables on left side of :=

    /tmp/tmpd04a3b6t_test.go:13:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpd04a3b6t_test.go:15:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpd04a3b6t_test.go:17:5: undefined: sort

    /tmp/tmpd04a3b6t_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
