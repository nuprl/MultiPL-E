language: go_test.go
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"\
    Negative numbers are not allowed\")\n    }\n    if n == 0 || n == 1 {\n      \
    \  return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpo4x2a2jg_test.go:36: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpo4x2a2jg_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpo4x2a2jg_test.go:36: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpo4x2a2jg_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n \
    \       return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n \
    \       return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n\n    if n == 0 {\n        return 0\n\
    \    }\n\n    if n == 1 {\n        return 1\n    }\n\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"\
    Fibonacci number not defined for negative numbers\")\n        return -1\n    }\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpmr3o6k6__test.go:34: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpmr3o6k6__test.go:34: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpg1_bd2ho_test.go:33: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpg1_bd2ho_test.go:33: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8awihtn9_test.go:36: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8awihtn9_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"\
    Fibonacci number is not defined for negative numbers\")\n        return -1\n \
    \   }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n -\
    \ 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp01ds_e8v_test.go:37: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp01ds_e8v_test.go:37: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp01ds_e8v_test.go:37: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp01ds_e8v_test.go:37: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n \
    \       return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpjm0bg7hm_test.go:33: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpjm0bg7hm_test.go:33: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
