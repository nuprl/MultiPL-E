language: go_test.go
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptk88n6i7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i])) + \" \"\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecmdus8d_test.go:13:19: invalid operation: (int(b[i]) ^ int(a[i])) + "
    " (mismatched types int and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += (string([]byte{byte(a[i] ^ b[i])})) + \" \"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmppyfi_x9c_test.go:33: expected '010010', got '\0 \x01 \0\
    \ \0 \x01 \0 '\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmppyfi_x9c_test.go:33:\
    \ expected '0', got '\0 '\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmppyfi_x9c_test.go:33: expected '0101', got '\0 \x01 \0 \x01 '\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] != \"1\" || b[i] != \"1\" else \"0\"\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7t5ltuya_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] != \"1\" || b[i] != \"1\" else \"0\"\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7t5ltuya_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjmize3g_test.go:13:9: invalid operation: result += (int(b[i]) ^ int(a[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjmize3g_test.go:13:9: invalid operation: result += (int(b[i]) ^ int(a[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] == '1' ^ b[i] == '1' else \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8xt1zu48_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += (string([]byte{a[i], b[i]})) ^ string([]byte{a[i], b[i]})\n\
    \    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzys6mt9z_test.go:13:19:\
    \ invalid operation: operator ^ not defined on (string([]byte{\u2026})) (value\
    \ of type string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvkg6b8f_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp10bofjk6_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp10bofjk6_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp10bofjk6_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptk88n6i7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] == '1' || b[i] == '1' else \"0\"\n    }\n   \
    \ return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5i_e_3c7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptk88n6i7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptk88n6i7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] == '1' || b[i] == '1' else \"0\"\n    }\n   \
    \ return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5i_e_3c7_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (string([]byte{a[i], b[i]})) ^ a\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkkt5lr1__test.go:13:19:\
    \ invalid operation: operator ^ not defined on (string([]byte{\u2026})) (value\
    \ of type string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjmize3g_test.go:13:9: invalid operation: result += (int(b[i]) ^ int(a[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"\"\n        result\
    \ += \"0\" if a == \"0\" || b == \"0\" else \"\"\n    }\n    return result\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplst6ruj2_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" || a[i] == b[i] else \"0\"\
    \n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv3oarok0_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += a\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsvxisnpr_test.go:36: expected '010010', got '000000111000111000111000111000111000111000'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsvxisnpr_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpsvxisnpr_test.go:36: expected '0101', got '00000101010101010101'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjmize3g_test.go:13:9: invalid operation: result += (int(b[i]) ^ int(a[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" ^ a[i] ^ b[i]\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9u9hkg0_test.go:13:19: invalid operation: "1" ^ a[i] (mismatched types
    untyped string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += a[len(a)-len(b)+i]\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgk66ls6_test.go:16:9: invalid operation: result += a[len(a) - len(b)
    + i] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a == \"1\" || b == \"1\" else \"\"\n        result\
    \ += \"0\" if a == \"0\" || b == \"0\" else \"\"\n    }\n    return result\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplst6ruj2_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] != \"1\" || b[i] != \"1\" else \"0\"\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7t5ltuya_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmprb4mk97j_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmprb4mk97j_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmprb4mk97j_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += a\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsvxisnpr_test.go:36: expected '010010', got '000000111000111000111000111000111000111000'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsvxisnpr_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpsvxisnpr_test.go:36: expected '0101', got '00000101010101010101'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(b[i]) ^ int(a[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjmize3g_test.go:13:9: invalid operation: result += (int(b[i]) ^ int(a[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpc9h3v7d4_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpc9h3v7d4_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpc9h3v7d4_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"1\" if a[i] != \"0\" else \"\"\n    }\n    for i := 0; i\
    \ < len(b); i++ {\n        result += \"1\" if b[i] != \"0\" else \"\"\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch0hoice_test.go:13:23: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075748
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwj02vr3o_test.go:36: expected '010010', got '000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwj02vr3o_test.go:36:\
    \ expected '0', got '01'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwj02vr3o_test.go:36: expected '0101', got '00001111'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv70yvhyb_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv70yvhyb_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpv70yvhyb_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        result += \"0\"\n    }\n    for i := 0; i < len(b); i++ {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < len(a); i++ {\n        result += \"0\"\n\
    \    }\n    for i := 0; i < len(b); i++ {\n        result += \"1\"\n    }\n  \
    \  return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpunzs5aa9_test.go:42: expected '010010', got '000000111111000000111111'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpunzs5aa9_test.go:42:\
    \ expected '0', got '0101'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmpunzs5aa9_test.go:42: expected '0101', got '0000111100001111'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075749
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        result += (int(a[i]) ^ int(b[i]))\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptake9e_5_test.go:13:9: invalid operation: result += (int(a[i]) ^ int(b[i]))
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075749
