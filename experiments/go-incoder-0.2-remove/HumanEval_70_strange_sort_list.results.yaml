language: go_test.go
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[0]\n  \
    \  for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp0mnd2mbx_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp0mnd2mbx_test.go:40\
    \ +0x450\ntesting.tRunner(0xc00019aea0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp1ovs_3t_test.go:122:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    for _, value := range lst {\n   \
    \     sort.Ints(lst)\n        sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n  \
    \      result = append(result, value)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4s99n98_test.go:15:9: undefined: sort

    /tmp/tmpv4s99n98_test.go:16:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max to first element of list.\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    // Initialize new list with min and max elements.\n\
    \    result := make([]int, 2)\n    result[0] = min\n    result[1] = max\n\n  \
    \  // Sort remaining elements.\n    for _, v := range lst {\n        if v < min\
    \ {\n            v = v - min\n        }\n        if v > max {\n            v =\
    \ v - max\n        }\n        result[0] += v\n        result[1] += v\n    }\n\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bbf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpzpx08u7t_test.go:14 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpzpx08u7t_test.go:57 +0x2ee\ntesting.tRunner(0xc000103380, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values.\n    var min, max int\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    // Initialize\
    \ new list with min and max values.\n    result := make([]int, 0, 2)\n    result\
    \ <- min\n    result <- max\n    // Iterate over remaining list and add values\
    \ to the result.\n    for _, v := range lst {\n        if v < min {\n        \
    \    result <- v\n        }\n        if v > max {\n            result <- v\n \
    \       }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy89aiqpw_test.go:25:5: invalid operation: cannot send to non-channel result
    (variable of type []int)

    /tmp/tmpy89aiqpw_test.go:26:5: invalid operation: cannot send to non-channel result
    (variable of type []int)

    /tmp/tmpy89aiqpw_test.go:30:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    /tmp/tmpy89aiqpw_test.go:33:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var min int\n    var max int\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    for _, v\
    \ := range lst {\n        if v == min {\n            result = append(result, max)\n\
    \            max = v\n        } else {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == max {\n      \
    \      result = append(result, min)\n            min = v\n        } else {\n \
    \           result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpp4i8kpw1_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpp4i8kpw1_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpp4i8kpw1_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=-5) %!s(i"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    switch {\n    case n < 2:\n        return\
    \ lst\n    case n == 2:\n        return append([]int{lst[0], lst[1]}, lst...)\n\
    \    case n == 3:\n        return append([]int{lst[0], lst[1], lst[2]}, lst...)\n\
    \    case n == 4:\n        return append([]int{lst[0], lst[1], lst[2], lst[3]},\
    \ lst...)\n    case n == 5:\n        return append([]int{lst[0], lst[1], lst[2],\
    \ lst[3], lst[4]}, lst...)\n    case n == 6:\n        return append([]int{lst[0],\
    \ lst[1], lst[2], lst[3], lst[4], lst[5]}, lst...)\n    case n == 7:\n       \
    \ return append([]int{lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]},\
    \ lst...)\n    case n == 8:\n        return append([]int{lst[0], lst[1], lst[2],\
    \ lst[3], lst[4], lst[5], lst[6], lst[7]}, lst...)\n    case n == 9:\n       \
    \ return append([]int{lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6],\
    \ lst[7], lst[8]}, lst...)\n    case n == 10:\n        return append([]int{lst[0],\
    \ lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]}, lst...)\n\
    \    case n == 11:\n        return append([]int{lst[0], lst[1], lst[2], lst[3],\
    \ lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10]}, lst...)\n    case\
    \ n == 12:\n        return append([]int{lst[0], lst[1], lst[2], lst[3], lst[4],\
    \ lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11]}, lst...)\n    case\
    \ n == 13:\n        return append([]int{lst[0], lst[1], lst[2], lst[3], lst[4],\
    \ lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11], lst[12]}, lst...)\n\
    \    case n == 14:\n        return append([]int{lst[0], lst[1], lst[2], lst[3],\
    \ lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11], lst[12], lst[13]},\
    \ lst...)\n    case n == 15:\n        return append([]int{lst[0], lst[1], lst[2],\
    \ lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11], lst[12],\
    \ lst[13], lst[14\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz041s2uz_test.go:44:151: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074837
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append([]int{max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpku0831bk_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpku0831bk_test.go:40\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    result := make([]int, length)\n\
    \    min := lst[0]\n    max := lst[0]\n    for i := 1; i < length; i++ {\n   \
    \     if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < length;\
    \ i++ {\n        if lst[i] < min {\n            result[i] = min\n        } else\
    \ {\n            result[i] = max\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp6nne418c_test.go:15 +0xb3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp6nne418c_test.go:47 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v < min {\n            v = min - v\n        }\n\
    \        if v > max {\n            v = v - max\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpxm3trtnu_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpxm3trtnu_test.go:48\
    \ +0x685\ntesting.tRunner(0xc000199040, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, i := range\
    \ lst {\n        if i < min {\n            min = i\n        }\n        if i >\
    \ max {\n            max = i\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpjp0eqp2p_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpjp0eqp2p_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001a0340, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values.\n    min := lst[0]\n \
    \   max := lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n\n    // Initialize new list with min and max values.\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n\n    // Sort remaining values.\n\
    \    for _, v := range lst {\n        if v < min {\n            v = v - min\n\
    \        }\n        if v > max {\n            v = v - max\n        }\n       \
    \ result[0] = v\n        result[1] = v\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000107bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpiz48ip5f_test.go:14 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpiz48ip5f_test.go:57 +0x2ee\ntesting.tRunner(0xc000119040, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    for i < n {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \       i++\n    }\n    j := n - 1\n    for j > 0 {\n        if lst[j] < min {\n\
    \            lst[j], lst[i] = lst[i], lst[j]\n        }\n        j--\n    }\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmplvmug2bb_test.go:14 +0x8f\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmplvmug2bb_test.go:48 +0x229\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v < min {\n            v = min\n        }\n   \
    \     if v > max {\n            v = max\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpuxmgt75a_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpuxmgt75a_test.go:48\
    \ +0x635\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > min {\n            result = append(result, min)\n        }\n   \
    \     if lst[i] < max {\n            result = append(result, max)\n        }\n\
    \        if lst[i] < min {\n            result = append(result, lst[i])\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmplqfilc50_test.go:14 +0x225\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmplqfilc50_test.go:51 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    for i < j {\n        if lst[i] > max {\n    \
    \        max = lst[i]\n            j = i\n        } else if lst[j] < min {\n \
    \           min = lst[j]\n            i = j\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    result := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        result[i] = min + i\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpxjgwxro1_test.go:14 +0xe8\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpxjgwxro1_test.go:49 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    for i < n {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \       i++\n    }\n    j := 0\n    for j < n {\n        if lst[j] > max {\n \
    \           lst[j] = max\n        }\n        if lst[j] < min {\n            lst[j]\
    \ = min\n        }\n        j++\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpfbbjqc2n_test.go:14 +0x96\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpfbbjqc2n_test.go:51 +0x229\ntesting.tRunner(0xc000103380, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = min + max*len(lst)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpqbv76cbr_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpqbv76cbr_test.go:42\
    \ +0x3de\ntesting.tRunner(0xc000192680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, val := range\
    \ lst {\n        if val < min {\n            min = val\n        }\n        if\
    \ val > max {\n            max = val\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpiy95tvzl_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpiy95tvzl_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc000103380, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        } else if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if lst[i]\
    \ > max {\n            result = append(result, max)\n            max = lst[i]\n\
    \        } else if lst[i] < min {\n            result = append(result, min)\n\
    \            min = lst[i]\n        } else {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpo2e33ggg_test.go:14 +0x1fc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpo2e33ggg_test.go:50 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            result[i] = min\n        } else {\n        \
    \    result[i] = max\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmpi4ye83tf_test.go:15 +0xb3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpi4ye83tf_test.go:47 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, val := range\
    \ lst {\n        if val < min {\n            min = val\n        }\n        if\
    \ val > max {\n            max = val\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpiy95tvzl_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpiy95tvzl_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc000103380, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize new list to hold sorted list.\n    sorted_list\
    \ := make([]int, len(lst))\n\n    // Initialize min and max variables.\n    var\
    \ min, max int\n\n    // Initialize index variable.\n    var index int\n\n   \
    \ // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var min, max int\n\n    // Initialize\
    \ index variable.\n    var index int\n\n    // Initialize min and max variables.\n\
    \    var min, max int\n\n    // Initialize index variable.\n    var index int\n\
    \n    // Initialize min and max variables.\n    var \nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcxtpkkx_test.go:156:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074839
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    min := lst[0]\n    max := lst[length-1]\n\
    \    i := 0\n    for i < length {\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n        i++\n    }\n    j := 0\n    for j < length {\n        if lst[j]\
    \ > max {\n            lst[j] = max\n        }\n        if lst[j] < min {\n  \
    \          lst[j] = min\n        }\n        j++\n    }\n    return lst\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000150000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000150000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpjp6i_190_test.go:14 +0x96\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpjp6i_190_test.go:51 +0x229\ntesting.tRunner(0xc00011b040, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074840
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Sort first by minimum value, then by maximum.\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb_o6084_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074840
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, val := range\
    \ lst {\n        if val < min {\n            min = val\n        }\n        if\
    \ val > max {\n            max = val\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpiy95tvzl_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpiy95tvzl_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc000103380, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, min)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == max {\n      \
    \      result = append(result, v)\n        }\n        if v == min {\n        \
    \    result = append(result, max)\n        }\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpjh9mx946_test.go:14 +0x292\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpjh9mx946_test.go:55 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074840
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := make([]int, len(lst))\n    min := lst[0]\n   \
    \ max := lst[0]\n    for _, v := range lst {\n        if v < min {\n         \
    \   min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n     \
    \       lst[i], lst[min] = lst[min], lst[i]\n        }\n        if lst[i] > max\
    \ {\n            lst[i], lst[max] = lst[max], lst[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmpdmrt0h6k_test.go:14 +0xe6\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpdmrt0h6k_test.go:47 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  result[i] = min + i*((max-min)/n)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmpz8by78la_test.go:15 +0xc9\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpz8by78la_test.go:43 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    for _, value := range lst {\n    \
    \    result = append(result, value)\n    }\n    for i := len(lst) - 1; i > 0;\
    \ i-- {\n        for j := 0; j < i; j++ {\n            if result[j] > result[j+1]\
    \ {\n                tmp := result[j]\n                result[j] = result[j+1]\n\
    \                result[j+1] = tmp\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_gak47vj_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_gak47vj_test.go:50: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_gak47vj_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_gak47vj_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_gak47vj_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_gak47vj_test.go:50: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := []int{}\n    for\
    \ _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ min)\n        }\n        if v > max {\n            result = append(result, max)\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp80ut2cab_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp80ut2cab_test.go:48\
    \ +0xa30\ntesting.tRunner(0xc0001924e0, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    for i < j {\n        if lst[i] > max {\n    \
    \        max = lst[i]\n            j = i\n        } else if lst[i] < min {\n \
    \           min = lst[i]\n            i = i + 1\n        } else {\n          \
    \  i = i + 1\n        }\n    }\n    for i < j {\n        lst[i], lst[j] = lst[j],\
    \ lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpgzodxsa9_test.go:14 +0x88\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpgzodxsa9_test.go:47 +0x229\ntesting.tRunner(0xc000183380, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values.\n    min := lst[0]\n \
    \   max := lst[0]\n\n    // Iterate through all elements.\n    for _, v := range\
    \ lst {\n        // If current element is less than min, swap it with min.\n \
    \       if v < min {\n            min = v\n        }\n\n        // If current\
    \ element is greater than max, swap it with max.\n        if v > max {\n     \
    \       max = v\n        }\n    }\n\n    // Return sorted list.\n    return []int{min,\
    \ max}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp4txsfmr8_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp4txsfmr8_test.go:46\
    \ +0x365\ntesting.tRunner(0xc000103380, 0x527da0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > max {\n            result = append(result, max)\n            max\
    \ = lst[i]\n        } else if lst[i] < min {\n            result = append(result,\
    \ min)\n            min = lst[i]\n        } else {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bbf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpps51fxjp_test.go:14 +0x205\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpps51fxjp_test.go:51 +0x2ee\ntesting.tRunner(0xc0001031e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        } else if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if lst[i]\
    \ < min {\n            result = append(result, min)\n            lst[i] = min\n\
    \        } else if lst[i] > max {\n            result = append(result, max)\n\
    \            lst[i] = max\n        } else {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp3wsiquvk_test.go:14 +0x1f2\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp3wsiquvk_test.go:50 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    k := 0\n    result := make([]int, n)\n    for\
    \ i < n && j < n {\n        if lst[i] > max {\n            k = j\n        } else\
    \ {\n            k = i\n        }\n        if lst[j] > max {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        if lst[k] > max {\n\
    \            k = j\n        } else {\n            k = i\n        }\n        if\
    \ lst[k] < min {\n            k = j\n        } else {\n            k = i\n   \
    \     }\n        if lst[k] < min {\n            k = j\n        } else {\n    \
    \        k = i\n        }\n        if lst[k] > max {\n            k = j\n    \
    \    } else {\n            k = i\n        }\n        if lst[k] < min {\n     \
    \       k = j\n        } else {\n            k = i\n        }\n        if lst[k]\
    \ > max {\n            k = j\n        } else {\n            k = i\n        }\n\
    \        if lst[k] < min {\n            k = j\n        } else {\n            k\
    \ = i\n        }\n        if lst[k] > max {\n            k = j\n        } else\
    \ {\n            k = i\n        }\n        if lst[k] < min {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        if lst[k] > max {\n\
    \            k = j\n        } else {\n            k = i\n        }\n        if\
    \ lst[k] < min {\n            k = j\n        } else {\n            k = i\n   \
    \     }\n        if lst[k] > max {\n            k = j\n        } else {\n    \
    \        k = i\n        }\n        if lst[k] < min {\n            k = j\n    \
    \    } else {\n            k = i\n        }\n        if lst[k] > max {\n     \
    \       k = j\n        } else {\n            k = i\n        }\n        if lst[k]\
    \ < min {\n            k = j\n        } else {\n            k = i\n        }\n\
    \        if lst[k] > max {\n            k = j\n        } else {\n            k\
    \ = i\n        }\n        if lst[k] < min {\n            k = j\n        } else\
    \ {\n            k = i\n        }\n        if lst[k] > max {\n            k =\
    \ j\n        } else {\n            k = i\n        }\n        if lst[k] < min {\n\
    \            k = j\n        } else {\n            k = i\n        }\n        if\
    \ lst[k] > max {\n            k = j\n        } else {\n            k = i\n   \
    \     }\n        if lst[k] < min {\n            k = j\n        } else {\n    \
    \        k = i\n        }\n        if lst[k] > max {\n            k = j\n    \
    \    } else {\n            k = i\n        }\n        if lst[k\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplvs2f6cc_test.go:141:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074840
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := []int{}\n    for\
    \ _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n        if v < min {\n            result = append(result, v)\n   \
    \     }\n        if v > max {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpjzg2rg_b_test.go:13 +0x27d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpjzg2rg_b_test.go:53 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[0]\n  \
    \  for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp0mnd2mbx_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp0mnd2mbx_test.go:40\
    \ +0x450\ntesting.tRunner(0xc00019aea0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    k := 0\n    result := make([]int, n)\n    for\
    \ i < n && j < n {\n        if lst[i] < min {\n            i++\n            continue\n\
    \        }\n        if lst[j] > max {\n            j--\n            continue\n\
    \        }\n        if lst[i] > lst[j] {\n            result[k] = lst[i]\n   \
    \         i++\n            j--\n            k++\n            continue\n      \
    \  }\n        result[k] = lst[j]\n        j--\n        k++\n    }\n    for i <\
    \ n {\n        result[k] = lst[i]\n        i++\n        k++\n    }\n    for j\
    \ < n {\n        result[k] = lst[j]\n        j--\n        k++\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0x4, 0x450329?})\n\
    \t/tmp/tmpexb2awrx_test.go:25 +0x16d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpexb2awrx_test.go:60 +0x93\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append([]int{max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpku0831bk_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpku0831bk_test.go:40\
    \ +0x538\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var min int\n    var max int\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    for _, v\
    \ := range lst {\n        if v == min {\n            result = append(result, max)\n\
    \        } else {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == max {\n            result = append(result,\
    \ min)\n        } else {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpsd1ap1b8_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpsd1ap1b8_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpsd1ap1b8_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpsd1ap1b8_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpsd1ap1b8_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpsd1ap1b8_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpsd1ap1b8_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(in"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[n-1]\n    for i := 1; i < n; i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n    \
    \    if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n;\
    \ i++ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmpe96f3avh_test.go:15 +0xda\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpe96f3avh_test.go:51 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[0]\n  \
    \  for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        } else if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    lst = append([]int{min, max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpbcfkp7m1_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpbcfkp7m1_test.go:39\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, i := range\
    \ lst {\n        if i < min {\n            min = i\n        }\n        if i >\
    \ max {\n            max = i\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpjp0eqp2p_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpjp0eqp2p_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001a0340, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    for i < n {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \       i++\n    }\n    j := 0\n    for j < n {\n        if lst[j] > max {\n \
    \           lst[j] = max\n        }\n        if lst[j] < min {\n            lst[j]\
    \ = min\n        }\n        j++\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpzh5o8w79_test.go:14 +0x96\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpzh5o8w79_test.go:51 +0x229\ntesting.tRunner(0xc000198000, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp1ovs_3t_test.go:122:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = \nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpysalyzaw_test.go:123:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074840
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Sort list from min to max of remaining integers\n   \
    \ for i := len(lst) - 1; i > 0; i-- {\n        j := i\n        for {\n       \
    \     // If j is greater than or equal to i, then swap them\n            if j\
    \ >= len(lst) {\n                break\n            }\n            if lst[j] <\
    \ lst[j-1] {\n                j += 1\n                continue\n            }\n\
    \            // Swap them\n            tmp := lst[j]\n            lst[j] = lst[j-1]\n\
    \            lst[j-1] = tmp\n            j -= 1\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpky6gm6_j_test.go:21\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpky6gm6_j_test.go:42\
    \ +0xacf\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, val := range\
    \ lst {\n        if val < min {\n            min = val\n        }\n        if\
    \ val > max {\n            max = val\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpiy95tvzl_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpiy95tvzl_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc000103380, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize first element of list as minimum of list.\n\
    \    min := lst[0]\n    // Initialize last element of list as maximum of list.\n\
    \    max := lst[len(lst)-1]\n    // Initialize remaining elements as minimum of\
    \ remaining elements.\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    // Initialize new list with minimum\
    \ and maximum elements.\n    result := make([]int, 2, 2)\n    result[0] = min\n\
    \    result[1] = max\n    // Initialize remaining elements as minimum of remaining\
    \ elements.\n    for i := 2; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    // Initialize new list with minimum and maximum\
    \ elements.\n    result := make([]int, 2, 2)\n    result[0] = min\n    result[1]\
    \ = max\n    // Initialize remaining elements as minimum of remaining elements.\n\
    \    for i := 2; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    // Initialize new list with minimum and maximum elements.\n\
    \    result := make([]int, 2, 2)\n    result[0] = min\n    result[1] = max\n \
    \   // Initialize remaining elements as minimum of remaining elements.\n    for\
    \ i := 2; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    // Initialize new list with minimum and maximum elements.\n    result\
    \ := make([]int, 2, 2)\n    result[0] = min\n    result[1] = max\n    // Initialize\
    \ remaining elements as minimum of remaining elements.\n    for i := 2; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    // Initialize\
    \ new list with minimum and maximum elements.\n    result := make([]int, 2, 2)\n\
    \    result[0] = min\n    result[1] = max\n    // Initialize remaining elements\
    \ as minimum of remaining elements.\n    for i := 2; i < len(lst); i++ {\n   \
    \     if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    // Initialize new list\
    \ with minimum and maximum elements.\n    result := make([]int, 2, 2)\n    result[0]\
    \ = min\n    result[1] = max\n    // \nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2l5ftjf4_test.go:96:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    result := make([]int, length)\n\
    \    min := lst[0]\n    max := lst[0]\n    for i := 1; i < length; i++ {\n   \
    \     if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < length;\
    \ i++ {\n        result[i] = min + i * (max-min)/length\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp010a0ys8_test.go:15 +0xc9\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp010a0ys8_test.go:43 +0x2ee\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max to first element of list\n   \
    \ var min, max int\n    min, max = lst[0], lst[0]\n\n    // Loop through remaining\
    \ elements\n    for i := 1; i < len(lst); i++ {\n        // If current element\
    \ is greater than max, swap it with max\n        if lst[i] > max {\n         \
    \   max = lst[i]\n        }\n\n        // If current element is less than min,\
    \ swap it with min\n        if lst[i] < min {\n            min = lst[i]\n    \
    \    }\n    }\n\n    // Return list with min and max swapped.\n    return []int{min,\
    \ max}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp0qunf4nq_test.go:15\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp0qunf4nq_test.go:46\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x527da0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values.\n    min := lst[0]\n \
    \   max := lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n\n    // Initialize new list.\n    result := make([]int, len(lst))\n\n\
    \    // Sort list using min and max values.\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            result[i] = min\n        } else {\n\
    \            result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpmasln3hm_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpmasln3hm_test.go:52\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    for i := 0; i < len(lst); i++ {\n\
    \        j := i\n        for j > 0 && lst[j-1] > lst[j] {\n            lst[j-1],\
    \ lst[j] = lst[j], lst[j-1]\n            j--\n        }\n        result = append(result,\
    \ lst[j])\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmph4n3r2qq_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmph4n3r2qq_test.go:46: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmph4n3r2qq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmph4n3r2qq_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmph4n3r2qq_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmph4n3r2qq_test.go:46: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        result[i] = lst[i]\n    }\n    for i := n - 1; i >=\
    \ 0; i-- {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpaw08bwob_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpaw08bwob_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpaw08bwob_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpaw08bwob_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpaw08bwob_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpaw08bwob_test.go:45: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max variables.\n    var min, max int\n\
    \    // Initialize result variable.\n    var result []int\n    // Initialize first\
    \ element of result variable.\n    result := append(result, lst[0])\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range lst[1:]\
    \ {\n        if element < min {\n            min = element\n        }\n      \
    \  if element > max {\n            max = element\n        }\n    }\n    // Initialize\
    \ remaining elements of result variable.\n    for _, element := range \nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmwql4nwx_test.go:120:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            result[i]\
    \ = min\n        } else {\n            result[i] = max\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp4slkhio5_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp4slkhio5_test.go:46\
    \ +0x427\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp1ovs_3t_test.go:122:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074837
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    min := lst[0]\n    max := lst[length-1]\n\
    \    for i := 1; i < length; i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    result := make([]int, length)\n    for i := 0; i < length;\
    \ i++ {\n        result[i] = min + i*(max-min+1)\n    }\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp3gsjhxl5_test.go:14 +0xd2\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp3gsjhxl5_test.go:43 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append([]int{max}, lst...)\n    lst = append([]int{min}, lst...)\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc0001d2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc0001d2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp5adh3dep_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp5adh3dep_test.go:41\
    \ +0x6d0\ntesting.tRunner(0xc00019b1e0, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var min int\n    var max int\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    for _, v\
    \ := range lst {\n        if v == min {\n            result = append(result, max)\n\
    \            max = v\n        } else {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == max {\n      \
    \      result = append(result, min)\n            min = v\n        } else {\n \
    \           result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpp4i8kpw1_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpp4i8kpw1_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpp4i8kpw1_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpp4i8kpw1_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=-5) %!s(i"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := []int{}\n    for\
    \ _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ min)\n        }\n        if v > max {\n            result = append(result, max)\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmp80ut2cab_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmp80ut2cab_test.go:48\
    \ +0xa30\ntesting.tRunner(0xc0001924e0, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := []int{}\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    for _,\
    \ v := range lst {\n        if v < min {\n            v = min - v\n        }\n\
    \        if v > max {\n            v = v - max\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpxm3trtnu_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpxm3trtnu_test.go:48\
    \ +0x685\ntesting.tRunner(0xc000199040, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values\n    min := lst[0]\n  \
    \  max := lst[0]\n    for _, v := range lst {\n        if v < min {\n        \
    \    min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n\n    // Initialize new list with min and max values\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n\n    // Sort remaining values\n\
    \    for _, v := range lst {\n        if v < min {\n            v = v - min\n\
    \        }\n        if v > max {\n            v = v - max\n        }\n       \
    \ result[0] = v\n        result[1] = v\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bbf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpgsju2am8_test.go:14 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpgsju2am8_test.go:57 +0x2ee\ntesting.tRunner(0xc000103380, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    min := lst[0]\n    max := lst[length-1]\n\
    \    i := 0\n    j := length - 1\n    k := length - 2\n    temp := lst[k]\n  \
    \  lst[k] = lst[j]\n    lst[j] = temp\n    for i < j {\n        if lst[i] > max\
    \ {\n            max = lst[i]\n            k = k - 1\n        }\n        if lst[j]\
    \ > max {\n            max = lst[j]\n            k = k - 1\n        }\n      \
    \  if lst[i] < min {\n            min = lst[i]\n            i = i + 1\n      \
    \  }\n        if lst[j] < min {\n            min = lst[j]\n            i = i +\
    \ 1\n        }\n        if lst[i] > lst[j] {\n            temp = lst[i]\n    \
    \        lst[i] = lst[j]\n            lst[j] = temp\n            i = i + 1\n \
    \           j = j - 1\n        }\n    }\n    temp = lst[k]\n    lst[k] = lst[j]\n\
    \    lst[j] = temp\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074856
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max values\n    min := lst[0]\n  \
    \  max := lst[0]\n    for _, v := range lst {\n        if v < min {\n        \
    \    min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n\n    // Initialize new list with min and max values\n    result := make([]int,\
    \ 2)\n    result[0] = min\n    result[1] = max\n\n    // Sort remaining values\n\
    \    for _, v := range lst {\n        if v < min {\n            v = min - v\n\
    \        }\n        if v > max {\n            v = v - max\n        }\n       \
    \ result[0] += v\n        result[1] -= v\n    }\n\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpxp6qlal4_test.go:14 +0xe5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpxp6qlal4_test.go:57 +0x2ee\ntesting.tRunner(0xc000192820, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    k := 0\n    result := make([]int, n)\n    for\
    \ i < n && j < n {\n        if lst[i] > lst[j] {\n            result[k] = lst[j]\n\
    \            j = j - 1\n        } else {\n            result[k] = lst[i]\n   \
    \         i = i + 1\n        }\n        k = k + 1\n    }\n    result[k] = lst[j]\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7iv37o3_test.go:14:5: min declared but not used

    /tmp/tmpk7iv37o3_test.go:15:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > min {\n            result = append(result, lst[i])\n        }\n\
    \        if lst[i] < max {\n            result = append(result, min)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp0zvve1e3_test.go:14 +0x1bc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp0zvve1e3_test.go:48 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize min and max to first element of list.\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    // Initialize new list to hold sorted elements.\n\
    \    result := make([]int, 0, len(lst))\n\n    // Sort list by comparing min and\
    \ max values.\n    for _, v := range lst {\n        if v < min {\n           \
    \ v = min\n        } else if v > max {\n            v = max\n        }\n     \
    \   result = append(result, v)\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmppd9bk1er_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmppd9bk1er_test.go:53\
    \ +0x710\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > min {\n            result = append(result, lst[i])\n        }\n\
    \        if lst[i] < max {\n            result = append(result, min)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp0zvve1e3_test.go:14 +0x1bc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp0zvve1e3_test.go:48 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize result with first element of list\n    result\
    \ := []int{lst[0]}\n\n    // Iterate over remaining elements\n    for i := 1;\
    \ i < len(lst); i++ {\n        // If current element is greater than previous\
    \ element, swap elements\n        if lst[i] > result[len(result)-1] {\n      \
    \      result = append(result, lst[i])\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmprmeu1hgh_test.go:14\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmprmeu1hgh_test.go:39\
    \ +0x53c\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  result[i] = min + max\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp2yl5ey0n_test.go:15 +0xa6\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp2yl5ey0n_test.go:43 +0x2ee\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize first element to minimum.\n    min := lst[0]\n\
    \    // Initialize last element to maximum.\n    max := lst[len(lst)-1]\n    //\
    \ Initialize remaining elements to minimum.\n    rest := []int{}\n    for i :=\
    \ 1; i < len(lst); i++ {\n        // If current element is greater than minimum,\
    \ swap it with minimum.\n        if lst[i] > min {\n            min = lst[i]\n\
    \        }\n        // If current element is less than maximum, swap it with maximum.\n\
    \        if lst[i] < max {\n            max = lst[i]\n        }\n        // If\
    \ current element is equal to minimum or maximum, move to next element.\n    \
    \    if lst[i] == min || lst[i] == max {\n            continue\n        }\n  \
    \      // If current element is greater than maximum, swap it with maximum.\n\
    \        if lst[i] > max {\n            max = lst[i]\n        }\n        // If\
    \ current element is less than minimum, swap it with minimum.\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        // If current element\
    \ is equal to minimum or maximum, move to next element.\n        if lst[i] ==\
    \ min || lst[i] == max {\n            continue\n        }\n        // If current\
    \ element is greater than maximum, swap it with maximum.\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n        // If current element is\
    \ less than minimum, swap it with minimum.\n        if lst[i] < min {\n      \
    \      min = lst[i]\n        }\n        // If current element is equal to minimum\
    \ or maximum, move to next element.\n        if lst[i] == min || lst[i] == max\
    \ {\n            continue\n        }\n        // If current element is greater\
    \ than maximum, swap it with maximum.\n        if lst[i] > max {\n           \
    \ max = lst[i]\n        }\n        // If current element is less than minimum,\
    \ swap it with minimum.\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        // If current element is equal to minimum or maximum, move\
    \ to next element.\n        if lst[i] == min || lst[i] == max {\n            continue\n\
    \        }\n        // If current element is greater than maximum, swap it with\
    \ maximum.\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \       // If current element is less than minimum, swap it with minimum.\n  \
    \      if lst[i] < min {\n            min = lst[i]\n        }\n        // If current\
    \ element is equal to minimum or maximum, move to next element.\n        if lst[i]\
    \ == min || lst[i] == max {\n            continue\n        }\n        // If current\
    \ element is greater than maximum, swap it with maximum.\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n        // If current element is\
    \ less than minimum, swap it with minimum.\n        if lst[i] < min \nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62s4rmzg_test.go:86:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := make([]int, len(lst))\n    min := lst[0]\n   \
    \ max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n        if lst[i] > max {\n        \
    \    max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmpomrdfo3k_test.go:14 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpomrdfo3k_test.go:50 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[0]\n  \
    \  for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > min && lst[i] < max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000fdbf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp6v2r6hbe_test.go:14 +0x149\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp6v2r6hbe_test.go:45 +0x2ee\ntesting.tRunner(0xc00011a820, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] < min {\n            result = append(result, min)\n        }\n   \
    \     if lst[i] > max {\n            result = append(result, max)\n        }\n\
    \        result = append(result, lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmpp_shi2hj_test.go:14 +0x214\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpp_shi2hj_test.go:49 +0x2ee\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    min := lst[0]\n    max := lst[length-1]\n\
    \    i := 0\n    j := 1\n    k := length - 2\n    for i < length && j < length\
    \ {\n        if lst[i] > lst[j] {\n            lst[i], lst[j] = lst[j], lst[i]\n\
    \        }\n        i++\n        j++\n    }\n    for i < length {\n        lst[i],\
    \ lst[k] = lst[k], lst[i]\n        k--\n        i++\n    }\n    for j < length\
    \ {\n        lst[j], lst[k] = lst[k], lst[j]\n        k--\n        j++\n    }\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez80ml2c_test.go:14:5: min declared but not used

    /tmp/tmpez80ml2c_test.go:15:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    for i := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n       \
    \ if lst[i] > max {\n            result = append(result, max)\n            max\
    \ = lst[i]\n        } else {\n            result = append(result, lst[i])\n  \
    \      }\n    }\n    for i := 0; i < n; i++ {\n        if lst[i] < min {\n   \
    \         result = append(result, min)\n            min = lst[i]\n        } else\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000187bf0?, 0x4?,\
    \ 0x450329?})\n\t/tmp/tmp9z4cm_ma_test.go:14 +0x285\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9z4cm_ma_test.go:56 +0x2ee\ntesting.tRunner(0xc0001991e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := make([]int, len(lst))\n    min := lst[0]\n   \
    \ max := lst[0]\n    for _, v := range lst {\n        if v < min {\n         \
    \   min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    for _, v := range lst {\n        if v == min {\n            result[0]\
    \ = v\n        } else {\n            result[result.Len()-1] = v\n        }\n \
    \   }\n    for i := 0; i < result.Len(); i++ {\n        result[i] = min\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfbbnxpb_test.go:28:27: result.Len undefined (type []int has no field
    or method Len)

    /tmp/tmppfbbnxpb_test.go:31:28: result.Len undefined (type []int has no field
    or method Len)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    result := make([]int, 0, len(lst))\n\
    \    for _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ min)\n        }\n        if v > max {\n            result = append(result, max)\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpdp4n4b1o_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpdp4n4b1o_test.go:48\
    \ +0xa70\ntesting.tRunner(0xc000103520, 0x528d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(strangeSort(lst))\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoupvzvua_test.go:13:5: undefined: sort

    /tmp/tmpoupvzvua_test.go:13:15: undefined: strangeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n\
    \    i := 0\n    j := n - 1\n    k := 0\n    result := make([]int, n)\n    for\
    \ i < n && j < n {\n        if lst[i] > lst[j] {\n            result[k] = lst[i]\n\
    \            i++\n        } else if lst[i] < lst[j] {\n            result[k] =\
    \ lst[j]\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n        k++\n    }\n    result[k] = lst[i]\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpko31ap96_test.go:14:5: min declared but not used

    /tmp/tmpko31ap96_test.go:15:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := make([]int, len(lst))\n    min := lst[0]\n   \
    \ max := lst[0]\n    for _, i := range lst {\n        if i < min {\n         \
    \   min = i\n        }\n        if i > max {\n            max = i\n        }\n\
    \    }\n    for _, i := range lst {\n        if i == min {\n            i = max\n\
    \        }\n        if i == max {\n            i = min\n        }\n        result[result.length()-1]\
    \ = i\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy1j70q2y_test.go:31:23: result.length undefined (type []int has no field
    or method length)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Initialize first element as minimum\n    min := lst[0]\n\
    \    // Initialize last element as maximum\n    max := lst[len(lst)-1]\n    //\
    \ Initialize remaining elements as minimum\n    for i := 1; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if\
    \ lst[i] > max {\n            max = lst[i]\n        }\n    }\n    // Initialize\
    \ remaining elements as maximum\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n    // Initialize remaining\
    \ elements as minimum\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    // Initialize remaining elements\
    \ as maximum\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    // Initialize remaining elements as minimum\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    // Initialize remaining elements as maximum\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    // Initialize remaining elements as minimum\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    // Initialize\
    \ remaining elements as maximum\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] >\
    \ max {\n            max = lst[i]\n        }\n    }\n    // Initialize remaining\
    \ elements as minimum\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    // Initialize remaining elements\
    \ as maximum\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    // Initialize remaining \nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbldw3wyp_test.go:108:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    min := lst[0]\n    max := lst[length-1]\n\
    \    i := 0\n    j := length - 1\n    for i < j {\n        if lst[i] > max {\n\
    \            max = lst[i]\n            j = i\n        } else if lst[i] < min {\n\
    \            min = lst[i]\n            i = i + 1\n        } else {\n         \
    \   i = i + 1\n        }\n    }\n    for i < j {\n        lst[i], lst[j] = lst[j],\
    \ lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0x62a7e0?, 0x5d4210?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpvcd70jyk_test.go:14 +0x88\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpvcd70jyk_test.go:47 +0x229\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var min int\n    var max int\n   \
    \ for _, v := range lst {\n        if min > v {\n            min = v\n       \
    \ }\n        if max < v {\n            max = v\n        }\n    }\n    for _, v\
    \ := range lst {\n        if min > v {\n            min = v\n        }\n     \
    \   if max < v {\n            max = v\n        }\n    }\n    for _, v := range\
    \ lst {\n        if min > v {\n            min = v\n        }\n        if max\
    \ < v {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if min > v {\n            min = v\n        }\n        if max < v {\n\
    \            max = v\n        }\n    }\n    for _, v := range lst {\n        if\
    \ min > v {\n            min = v\n        }\n        if max < v {\n          \
    \  max = v\n        }\n    }\n    for _, v := range lst {\n        if min > v\
    \ {\n            min = v\n        }\n        if max < v {\n            max = v\n\
    \        }\n    }\n    for _, v := range lst {\n        if min > v {\n       \
    \     min = v\n        }\n        if max < v {\n            max = v\n        }\n\
    \    }\n    for _, v := range lst {\n        if min > v {\n            min = v\n\
    \        }\n        if max < v {\n            max = v\n        }\n    }\n    for\
    \ _, v := range lst {\n        if min > v {\n            min = v\n        }\n\
    \        if max < v {\n            max = v\n        }\n    }\n    for _, v :=\
    \ range lst {\n        if min > v {\n            min = v\n        }\n        if\
    \ max < v {\n            max = v\n        }\n    }\n    for _, v := range lst\
    \ {\n        if min > v {\n            min = v\n        }\n        if max < v\
    \ {\n            max = v\n        }\n    }\n    for _, v := range lst {\n    \
    \    if min > v {\n            min = v\n        }\n        if max < v {\n    \
    \        max = v\n        }\n    }\n    for _, v := range lst {\n        if min\
    \ > v {\n            min = v\n        }\n        if max < v {\n            max\
    \ = v\n        }\n    }\n    for _, v := range lst {\n        if min > v {\n \
    \           min = v\n        }\n        if max < v {\n            max = v\n  \
    \      }\n    }\n    for _, v := range lst {\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpor5d0kve_test.go:130:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    result := make([]int, n)\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for i := 1; i < n; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n    \
    \        max = lst[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n      \
    \  if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] >\
    \ max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result[i] = lst[i]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5bf0, 0x0, 0x450329?})\n\
    \t/tmp/tmp9rlpz148_test.go:15 +0xd3\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9rlpz148_test.go:51 +0x2ee\ntesting.tRunner(0xc0001964e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074838
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmpypek__test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074838
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunc strange_sort_list(lst\
    \ []int) []int {\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list(...)\n\t/tmp/tmpf4eofeu8_test.go:13\n\
    command-line-arguments_test.TestStrange_Sort_List(0x0?)\n\t/tmp/tmpf4eofeu8_test.go:39\
    \ +0x3d0\ntesting.tRunner(0xc0001924e0, 0x527ee0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074838
