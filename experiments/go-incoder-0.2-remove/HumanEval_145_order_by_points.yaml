name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\nfunc order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sort.Ints(nums)\n    var result []int\n    var sum int\n    for\
    \ _, v := range nums {\n        sum += v\n    }\n    for _, v := range nums {\n\
    \        if sum > 0 {\n            sum += v\n            if sum == 100 {\n   \
    \             result = append(result, v)\n            }\n        }\n    }\n  \
    \  return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    sum :=\
    \ 0\n    for _, v := range nums {\n        sum += v\n    }\n    for _, v := range\
    \ nums {\n        if sum < v {\n            result = append(result, v)\n     \
    \   }\n    }\n    for _, v := range nums {\n        if sum > v {\n           \
    \ result = append(result, v)\n        }\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n\
    \        if sum < 10 {\n            sum += v\n            result[i] = v\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum *= -1\n        }\n        if sum != 0 {\n            sum += v\n        \
    \    if sum < 0 {\n                sum *= -1\n            }\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    index :=\
    \ 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n        result[index]\
    \ = v\n        index++\n    }\n    for _, v := range nums {\n        if sum <\
    \ v {\n            sum -= v\n            result[index] = v\n            index++\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            fmt.Println(err)\n        }\n        if\
    \ digitSum > 0 {\n            result[index] = num\n            index++\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum_digits := make(map[int]int)\n    for i, v := range nums {\n        sum_digits[v]\
    \ = sum_digits[v] + 1\n    }\n    for k, v := range sum_digits {\n        result[k]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n\
    \        result := append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 10 {\n            sum += v\n           \
    \ result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum_digits\
    \ := make([]int, len(nums))\n    for i, v := range nums {\n        sum_digits[i]\
    \ = 0\n        for j := len(v) - 1; j >= 0; j-- {\n            sum_digits[i] +=\
    \ int(v[j])\n        }\n    }\n    for i, v := range sum_digits {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += v\n            if sum > 0 {\n                result[i] = v\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 10\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, v := range nums {\n        sum += v\n        result[index] = v\n        index++\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, num := range nums {\n        digits, _ := sum_digits(num)\n        index\
    \ := index + 1\n        result[index] = num\n    }\n    sort.Ints(result)\n  \
    \  return result\n}\n", "    result := make([]int, len(nums))\n    sum_digits\
    \ := make([]int, len(nums))\n    for i, v := range nums {\n        sum_digits[i]\
    \ = sumDigits(v)\n    }\n    for i, v := range sum_digits {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    return\
    \ nums\n}\n", "    // Write your code here\n    sort.Ints(nums)\n    var result\
    \ []int\n    for _, v := range nums {\n        total := 0\n        for i := 0;\
    \ i < len(v); i++ {\n            total += int(v[i])\n        }\n        if total\
    \ == 0 {\n            result = append(result, v)\n        } else {\n         \
    \   i := 0\n            for ; total > 0; i++ {\n                total -= int(v[i])\n\
    \            }\n            result = append(result, nums[i])\n        }\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for\
    \ _, v := range nums {\n        d := sumDigits(v)\n        if d > 0 {\n      \
    \      result = append(result, v)\n        }\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum *= -1\n \
    \       }\n        if sum == 0 {\n            continue\n        }\n        j :=\
    \ i\n        for ; j < len(nums); j++ {\n            sum += nums[j]\n        \
    \    if sum == 0 {\n                break\n            }\n            if sum <\
    \ 0 {\n                sum *= -1\n            }\n            if sum == 0 {\n \
    \               continue\n            }\n            if nums[j] < v {\n      \
    \          result[j] = nums[j]\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < v {\n           \
    \ sort.Ints(nums)\n            sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, v := range nums\
    \ {\n        sum += v\n        result[index] = v\n        index++\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := range nums {\n\
    \            sum += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sums []int\n    for _, num := range nums {\n        sums = append(sums, num/10)\n\
    \    }\n    for _, sum := range sums {\n        result = append(result, sum)\n\
    \    }\n    return append(result, nums...)\n}\n", "    sort.Ints(nums)\n    var\
    \ result []int\n    for _, v := range nums {\n        total := 0\n        for\
    \ _, i := range []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}[:len(v)] {\n            total\
    \ += int(v[i]) * i\n        }\n        if total > 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digitSum, _ := sum_digits(num)\n        if digitSum > 0 {\n     \
    \       result[index] = num\n            index++\n        }\n    }\n    for i\
    \ := 0; i < index; i++ {\n        result[i] = nums[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 10 {\n            sum += v\n            result[i] =\
    \ v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var\
    \ result []int\n    for _, v := range nums {\n        sum += v\n    }\n    for\
    \ _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum *= -1\n        }\n        if sum != 0 {\n            sum /= 10\n       \
    \ }\n        if sum != v {\n            sum -= v\n        }\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    for i := 0; i <\
    \ len(nums); i++ {\n        total := 0\n        for _, d := range nums[i:] {\n\
    \            total += int(d)\n        }\n        result[i] = total\n    }\n  \
    \  return append(nums, result...)\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := 0; i < len(nums); i++ {\n        v := nums[i]\n   \
    \     j := i\n        for ; j < len(nums); j++ {\n            if sum < nums[j]\
    \ {\n                break\n            }\n        }\n        if j > i {\n   \
    \         j := j - 1\n        }\n        for k := i; k < j; k++ {\n          \
    \  sum -= nums[k]\n        }\n        sum -= v\n        result[i] = v\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < v {\n            sort.Ints(nums)\n\
    \            sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n        }\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sum int\n    for _, v := range nums {\n        sum += v\n    }\n    for _, v\
    \ := range nums {\n        if sum < v {\n            result = append(result, v)\n\
    \            sum -= v\n        } else {\n            result = append(result, sum)\n\
    \            sum = 0\n        }\n    }\n    for _, v := range result {\n     \
    \   result = append(result, v)\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    index := 0\n    for _, n := range nums {\n     \
    \   index += 1\n        digit := n % 10\n        sum += digit\n        result[index]\
    \ = n\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = result[i]\
    \ + sum\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    sum\
    \ := 0\n    for _, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v\
    \ := range result {\n        result[i] = sum - v\n    }\n    return result\n}\n",
  "    // Write your code here\n    \n    sort.Slice(nums, func(i, j int) bool {\n\
    \        sum := nums[i] + nums[j]\n        return sum < 10\n    })\n    \n   \
    \ return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n   \
    \ for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n \
    \   for i := range result {\n        result[i] = sum - result[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    for i := range nums\
    \ {\n        total := 0\n        for _, d := range nums[i:] {\n            total\
    \ += d\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var sum\
    \ int\n    for _, v := range nums {\n        sum += v\n    }\n    for _, v :=\
    \ range nums {\n        if sum < 10 {\n            result = append(result, v)\n\
    \        } else {\n            sum -= 10\n            result = append(result,\
    \ v%10)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n       \
    \ for j := 0; j < len(nums); j++ {\n            sum += nums[j]\n        }\n  \
    \      result[i] = nums[sum]\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    \n    return nums\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, 0)\n \
    \   sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    for _,\
    \ v := range nums {\n        if sum < v {\n            result = append(result,\
    \ v)\n            sum -= v\n        } else {\n            result = append(result,\
    \ v)\n            sum += v\n        }\n    }\n    return result\n}\n", "    //\
    \ Write your code here\n    \n    return nums\n}\n", "    sort.Ints(nums)\n  \
    \  var result []int\n    for _, v := range nums {\n        sum += v\n    }\n \
    \   for _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := range nums {\n\
    \            sum += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var res []int\n    for _,\
    \ v := range nums {\n        sum += v\n    }\n    for _, v := range nums {\n \
    \       if sum == v {\n            res = append(res, v)\n        }\n    }\n  \
    \  return res\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n   \
    \ for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n \
    \   for i, v := range nums {\n        if sum < 0 {\n            sum *= -1\n  \
    \      }\n        if sum == 0 {\n            break\n        }\n        sum -=\
    \ v\n        if sum < 0 {\n            sum *= -1\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    for i := range nums\
    \ {\n        total := 0\n        for _, d := range nums[i:] {\n            total\
    \ += int(d)\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    index :=\
    \ 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < v\
    \ {\n            sum -= v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum_digits := make(map[int]int)\n\
    \    for _, v := range nums {\n        sum_digits[v] = sum_digits[v] + 1\n   \
    \ }\n    for _, v := range sum_digits {\n        result[sum_digits[v]] = v\n \
    \   }\n    for i := range result {\n        result[i] = nums[result[i]]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 10 {\n            sum += v\n \
    \           result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    var sum int\n    for _, v := range nums {\n       \
    \ sum += v\n    }\n    for _, v := range nums {\n        if sum == v {\n     \
    \       result = append(result, v)\n        }\n    }\n    for _, v := range nums\
    \ {\n        if sum != v {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digitSum,\
    \ err := sum_digits(num)\n        if err != nil {\n            panic(err)\n  \
    \      }\n        if digitSum > 0 {\n            result[index] = num\n       \
    \     index++\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 10\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, num := range nums {\n        sum += num\n        result[index] = num\n  \
    \      index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    sum := 0\n    for _, v := range nums {\n    \
    \    sum += v\n    }\n    for _, v := range nums {\n        if sum < v {\n   \
    \         result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ nums {\n        if sum > v {\n            result = append(result, v)\n     \
    \   }\n    }\n    for _, v := range nums {\n        if sum == v {\n          \
    \  result = append(result, v)\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 10 {\n            sum += v\n            result[i] = v\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < v {\n           \
    \ sum -= v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    index := 0\n    for _, v := range nums\
    \ {\n        sum += v\n        result[index] = v\n        index++\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 10 {\n          \
    \  sum += v\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n\
    \        sum := 0\n        for i := 0; i < len(v); i++ {\n            sum += int(v[i])\n\
    \        }\n        if sum > 0 {\n            result = append(result, v)\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    sum\
    \ := 0\n    for _, v := range nums {\n        sum += v\n    }\n    for _, v :=\
    \ range nums {\n        if sum < v {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range nums {\n        if sum > v {\n      \
    \      result = append(result, v)\n        }\n    }\n    for _, v := range nums\
    \ {\n        if sum == v {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n\
    \    for _, num := range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    sum := 0\n    for _, num := range nums {\n        sum\
    \ += num\n        result = append(result, num)\n    }\n    sort.Ints(result)\n\
    \    for _, num := range result {\n        if sum == num {\n            return\
    \ result\n        }\n    }\n    return nums\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 10\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    index := 0\n    for _, num :=\
    \ range nums {\n        sum += num\n        result[index] = num\n        index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum_digits\
    \ := make([]int, len(nums))\n    for i := range nums {\n        sum_digits[i]\
    \ = nums[i]\n    }\n    sum_digits = sort_digits(sum_digits)\n    for i := range\
    \ sum_digits {\n        result[i] = nums[sum_digits[i]]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    index := 0\n    for _, num :=\
    \ range nums {\n        digitSum, err := sum_digits(num)\n        if err != nil\
    \ {\n            panic(err)\n        }\n        if digitSum < 0 {\n          \
    \  digitSum = -digitSum\n        }\n        result[index] = num\n        index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        index += 1\n        sumOfDigits\
    \ := 0\n        for _, digit := range strconv.Itoa(num) {\n            sumOfDigits\
    \ += int(digit)\n        }\n        result[index] = num\n        if sumOfDigits\
    \ > result[index-1].SumOfDigits() {\n            result[index] = num\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 10 {\n          \
    \  sum += v\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 0 {\n            sum *= -1\n        }\n        if sum\
    \ == 0 {\n            continue\n        }\n        j := i\n        for ; j < len(nums);\
    \ j++ {\n            sum += nums[j]\n            if sum == 0 {\n             \
    \   break\n            }\n            if sum < 0 {\n                sum *= -1\n\
    \            }\n            if sum < v {\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n                i = j\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum_digits := make([]int,\
    \ len(nums))\n    for i := range nums {\n        sum_digits[i] = nums[i]\n   \
    \ }\n    sort.Ints(sum_digits)\n    for i := range sum_digits {\n        result[i]\
    \ = nums[sum_digits[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum *= -1\n        }\n        if sum != 0 {\n            sum\
    \ += v\n            if sum < 0 {\n                sum *= -1\n            }\n \
    \           if sum == 0 {\n                result[i] = v\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        total := 0\n     \
    \   for j := 0; j < len(nums); j++ {\n            total += nums[j]\n         \
    \   if total%10 == 0 {\n                result[i] = j\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digitSum,\
    \ err := getDigitSum(num)\n        if err != nil {\n            panic(err)\n \
    \       }\n        if digitSum > 0 {\n            result[index] = num\n      \
    \      index++\n        }\n    }\n    for i := 0; i < index; i++ {\n        result[i]\
    \ = nums[i]\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n", "    // Write your code\
    \ here\n    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = sum\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sum int\n    for _, v := range nums {\n        sum += v\n    }\n    for _, v\
    \ := range nums {\n        if sum < v {\n            result = append(result, v)\n\
    \            sum += v\n        }\n    }\n    for _, v := range nums {\n      \
    \  if sum > v {\n            result = append(result, v)\n            sum -= v\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 10 {\n          \
    \  sum += v\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    return nums\n}\n", "    result :=\
    \ make([]int, 0)\n    sum := 0\n    for _, num := range nums {\n        sum +=\
    \ num\n        result = append(result, num)\n    }\n    sort.Ints(result)\n  \
    \  return result\n}\n", "    // Write your code here\n    result := make([]int,\
    \ 0)\n    sum := 0\n    for _, num := range nums {\n        sum += num\n     \
    \   result = append(result, num)\n    }\n    sort.Ints(result)\n    for _, num\
    \ := range result {\n        if sum == num {\n            return result\n    \
    \    }\n    }\n    return nil\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := range result {\n        result[i] =\
    \ sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < v\
    \ {\n            sort.Ints(nums)\n            sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    sum := 0\n\
    \    for _, v := range nums {\n        sum += v\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        if\
    \ sum == 0 {\n            break\n        }\n        if sum < v {\n           \
    \ sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            ", "    // Write your code here\n\
    \    sort.Ints(nums)\n    result := make([]int, len(nums))\n    for i := 0; i\
    \ < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums); j++\
    \ {\n            sum += nums[j]\n        }\n        result[i] = nums[sum]\n  \
    \  }\n    return result\n}\n", "    result := make([]int, len(nums))\n    for\
    \ i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums);\
    \ j++ {\n            sum += nums[j]\n        }\n        result[i] = nums[sum]\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    sum := 0\n\
    \    for _, v := range nums {\n        sum += v\n        result = append(result,\
    \ v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 10 {\n            sum += v\n            result[i] =\
    \ v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := range nums {\n\
    \            sum += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ cur int\n    for _, v := range nums {\n        cur = cur*10 + v\n        if\
    \ cur > 0 {\n            result = append(result, cur)\n            cur = 0\n \
    \       }\n    }\n    return append(result, cur)\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 10\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    for _, v := range nums {\n        if sum\
    \ == v {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    for i := range nums {\n     \
    \   total := 0\n        for j := range nums {\n            total += nums[j]\n\
    \        }\n        result[i] = total\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 10 {\n            sum += v\n           \
    \ result[i] = v\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = v\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum_digits\
    \ := make([]int, len(nums))\n    for i, v := range nums {\n        sum_digits[i]\
    \ = sumDigits(v)\n    }\n    for i, v := range sum_digits {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        sum += v\n        result[index]\
    \ = v\n        index++\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum := 0\n    for\
    \ i, v := range nums {\n        sum += v\n        result[i] = sum\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 10 {\n            sum += v\n \
    \           result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > 0\
    \ {\n            sum += 10\n        }\n        if sum != 0 {\n            sum\
    \ += v\n        }\n        if sum == 0 {\n            sum = 1\n        }\n   \
    \     if sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n   \
    \         sum += 10\n        }\n        if sum != 0 {\n            sum += v\n\
    \        }\n        if sum == 0 {\n            sum = 1\n        }\n        if\
    \ sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n          \
    \  sum += 10\n        }\n        if sum != 0 {\n            sum += v\n       \
    \ }\n        if sum == 0 {\n            sum = 1\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n        if sum > 0 {\n            sum +=\
    \ 10\n        }\n        if sum != 0 {\n            sum += v\n        }\n    \
    \    if sum == 0 {\n            sum = 1\n        }\n        if sum < 0 {\n   \
    \         sum = 0\n        }\n        if sum > 0 {\n            sum += 10\n  \
    \      }\n        if sum != 0 {\n            sum += v\n        }\n        if sum\
    \ == 0 {\n            sum = 1\n        }\n        if sum < 0 {\n            sum\
    \ = 0\n        }\n        if sum > 0 {\n            sum += 10\n        }\n   \
    \     if sum != 0 {\n            sum += v\n        }\n        if sum == 0 {\n\
    \            sum = 1\n        }\n        if sum < 0 {\n            sum = 0\n \
    \       }\n        if sum > 0 {\n            sum += 10\n        }\n        if\
    \ sum != 0 {\n            sum += v\n        }\n        if sum == 0 {\n       \
    \     sum = 1\n        }\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum > 0 {\n            sum += 10\n        }\n        if sum != 0 {\n\
    \            sum += v\n        }\n        if sum == 0 {\n            sum = 1\n\
    \        }\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ > 0 {\n            sum += 10\n        }\n        if sum != 0 {\n           \
    \ sum += v\n        }\n        if sum == 0 {\n            sum = 1\n        }\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n\
    \            sum += 10\n        }\n        if sum != 0 {\n            sum += v\n\
    \        }\n        if sum == 0 {\n            sum = 1\n        }\n        if\
    \ sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n          \
    \  sum += 10\n        }\n        if sum", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    sum := 0\n\
    \    for _, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n     \
    \   if sum < 10 {\n            sum += v\n            result[i] = v\n        }\n\
    \    }\n    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 10\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, v := range nums {\n        digitSum, err := sum_digits(v)\n        if err\
    \ != nil {\n            panic(err)\n        }\n        if digitSum <= 0 {\n  \
    \          continue\n        }\n        result[index] = v\n        index++\n \
    \   }\n    for i := 0; i < index; i++ {\n        result[i] = nums[i]\n    }\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum *= -1\n        }\n        if sum != 0 {\n            sum += v\n        \
    \    if sum < 0 {\n                sum *= -1\n            }\n            if sum\
    \ != 0 {\n                sum += v\n                if sum < 0 {\n           \
    \         sum *= -1\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        digitSum, err := sum_digits(v)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ < 0 {\n            digitSum *= -1\n        }\n        result[index] = v\n  \
    \      index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = sum - result[i]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        digits, _ := sum_digits(v)\n\
    \        index := index + 1\n        if digits > result[index] {\n           \
    \ result[index] = digits\n        }\n    }\n    for i := 0; i < len(result); i++\
    \ {\n        result[i] = i\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < v\
    \ {\n            sum -= v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]-sum]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    for i :=\
    \ 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums);\
    \ j++ {\n            sum += nums[j]\n        }\n        result[i] = nums[sum]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    for _, v := range result {\n        if sum != 0 {\n            sum -= v\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := range nums {\n\
    \            sum += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    sum := 0\n    for\
    \ _, v := range nums {\n        sum += v\n        result = append(result, v)\n\
    \    }\n    sort.Ints(result)\n    for _, v := range result {\n        if sum\
    \ == 0 {\n            break\n        }\n        if sum < v {\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            sort.Ints(result)\n            sort.Ints(result)\n            sort.Ints(result)\n\
    \            ", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < v {\n            sort.Ints(nums)\n     \
    \       sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum_digits := make([]int, len(nums))\n    for i, v := range nums {\n    \
    \    sum_digits[i] = v\n    }\n    sort.Ints(sum_digits)\n    for i, v := range\
    \ sum_digits {\n        result[i] = nums[v]\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    \n    return nums\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > result[index] {\n            result[index] = digits\n   \
    \         index++\n        }\n    }\n    for i := 0; i < index; i++ {\n      \
    \  result[i] = result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 10 {\n          \
    \  sum += v\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    index := 0\n    for _, num :=\
    \ range nums {\n        sum += num\n        result[index] = num\n        index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < v {\n            sum -=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n    \
    \    sum += v\n    }\n    for _, v := range nums {\n        if sum == v {\n  \
    \          result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < v {\n            sum -= v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += nums[i][j]\n        }\n        result[i] = nums[sum]\n\
    \    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    for i := 0;\
    \ i < len(nums); i++ {\n        total := 0\n        for _, digit := range nums[i:]\
    \ {\n            total += digit\n        }\n        result[i] = total\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    for i := 0; i < len(nums);\
    \ i++ {\n        total := 0\n        for _, d := range nums[i:] {\n          \
    \  total += d\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    index :=\
    \ 0\n    for _, n := range nums {\n        digits, _ := strconv.Atoi(string(n))\n\
    \        sum += digits\n        result[index] = n\n        index++\n    }\n  \
    \  for i := 0; i < len(nums); i++ {\n        if result[i] < result[i+1] {\n  \
    \          j := i\n            for ; j < len(nums)-1 && result[j] == result[j+1];\
    \ j++ {\n            }\n            j := j - 1\n            result[i], result[j]\
    \ = result[j], result[i]\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n  \
    \      if sum < 10 {\n            sum += v\n            result[i] = v\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    for i := range nums {\n        sum :=\
    \ 0\n        for j := range nums {\n            sum += nums[j]\n        }\n  \
    \      result[i] = nums[sum]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, n := range nums {\n        index += 1\n\
    \        digits, _ := n.ModInt64().Int64()\n        sum := 0\n        for d :=\
    \ 0; d < len(digits); d++ {\n            sum += digits[d]\n        }\n       \
    \ result[index] = sum\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    sort.Ints(nums)\n    var result []int\n    var sum int\n    for _, v := range\
    \ nums {\n        sum += v\n        result = append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for\
    \ _, v := range nums {\n        sum := 0\n        for _, i := range nums {\n \
    \           sum += int(i%10)*10\n            i /= 10\n        }\n        if sum\
    \ == v {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    return nums\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 10 {\n            sum += v\n            result[i] = v\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 10 {\n          \
    \  sum += v\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[sum-result[i]]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum *= -1\n \
    \       }\n        if sum == 0 {\n            return nums\n        }\n       \
    \ if sum > 0 {\n            sum -= v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < v {\n            sum -= v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var\
    \ result []int\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, d := range strconv.Itoa(num) {\n            sum += int(d)\n        }\n  \
    \      if sum > 0 {\n            result = append(result, num)\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n \
    \   }\n    sort.Ints(result)\n    for i := range result {\n        result[i] =\
    \ nums[sum-result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, n := range nums {\n        sum += n\n\
    \        result[index] = n\n        index++\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    for _, v := range result {\n        if sum != 0 {\n            sum -= v\n\
    \        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var res\
    \ []int\n    for _, v := range nums {\n        sum := 0\n        for _, i := range\
    \ strconv.Itoa(v) {\n            sum += int(i)\n        }\n        if sum > 9\
    \ {\n            sum -= 9\n        }\n        if res == nil {\n            res\
    \ = make([]int, 0)\n        }\n        res = append(res, v)\n    }\n    return\
    \ res\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v\
    \ := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ > 0 {\n            result[index] = num\n            index++\n        }\n   \
    \ }\n    for i := 0; i < index; i++ {\n        result[i] = nums[i]\n    }\n  \
    \  return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = v\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n\
    \    for _, v := range nums {\n        sum := 0\n        for i := 0; i < len(v);\
    \ i++ {\n            sum += int(v[i])\n        }\n        if sum > 0 {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < v {\n           \
    \ sort.Ints(nums)\n            sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var cur int\n    var sum int\n    for _, v := range nums {\n    \
    \    cur = sum\n        for _, c := range strconv.Itoa(v) {\n            cur +=\
    \ int(c)-'0'\n        }\n        if cur > sum {\n            result = append(result,\
    \ v)\n        }\n        sum = cur\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := 0; i < len(nums); i++ {\n        v := nums[i]\n        j := i\n\
    \        for ; j < len(nums) && sum < v; j++ {\n            sum += nums[j]\n \
    \       }\n        if sum == v {\n            result[i] = j\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum_digits\
    \ := make([]int, len(nums))\n    for i := range nums {\n        sum_digits[i]\
    \ = 0\n        for j := range nums {\n            sum_digits[i] += nums[j] % 10\n\
    \            nums[j] /= 10\n        }\n    }\n    for i := range nums {\n    \
    \    result[i] = nums[sum_digits[i]]\n        nums[sum_digits[i]] = nums[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[sum-result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum !=\
    \ 0 {\n            sum += v\n            if sum < 0 {\n                sum *=\
    \ -1\n            }\n        }\n    }\n    for i, v := range nums {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < v {\n           \
    \ sum -= v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    for i := 0; i < len(nums); i++ {\n  \
    \      sum := 0\n        for j := 0; j < len(nums); j++ {\n            sum +=\
    \ nums[j]\n            if sum > 9 {\n                sum -= 10\n            }\n\
    \        }\n        result[i] = i\n    }\n    for i := 0; i < len(nums); i++ {\n\
    \        for j := i + 1; j < len(nums); j++ {\n            if nums[i] + nums[j]\
    \ > 9 {\n                tmp := nums[i] + nums[j]\n                nums[i] = nums[j]\n\
    \                nums[j] = tmp\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 0 {\n            sum *= -1\n        }\n        if sum\
    \ != 0 {\n            sum -= v\n            if sum < 0 {\n                sum\
    \ *= -1\n            }\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
