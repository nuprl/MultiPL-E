language: go_test.go
name: HumanEval_68_pluck
results:
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    for _, value := range arr {\n\
    \        if value%2 == 0 {\n            if value < smalest_value {\n         \
    \       smalest_value = value\n                index = index + 1\n           \
    \ }\n        } else {\n            if value == smalest_value {\n             \
    \   index = index + 1\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1mno69t_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    var smalest_value int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n   \
    \         index = -1\n        } else {\n            if smalest_value < v {\n \
    \               smalest_value = v\n                index = -1\n            } else\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    if\
    \ index == -1 {\n        result = append(result, smalest_value)\n    } else {\n\
    \        result = append(result, smalest_value, index)\n    }\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_ooyjc9_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    var smalest_value int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n   \
    \         index = -1\n        } else {\n            if smalest_value < v {\n \
    \               smalest_value = v\n                index = -1\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ if index == -1 {\n        index = sort.Search(len(arr), func(i int) bool {\n\
    \            return arr[i] < smalest_value\n        })\n    }\n    result = append(result,\
    \ smalest_value)\n    result = append(result, index)\n    return result\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppcgidavv_test.go:42:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    return arr\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmp0_1ozdp7_test.go:53: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n     \
    \   tmp0_1ozdp7_test.go:53: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n     \
    \   tmp0_1ozdp7_test.go:53: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4\
    \ (0.00s)\n        tmp0_1ozdp7_test.go:53: expected '[%!s(int=0) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=5) %!s(int=4) %!s(int=8) %!s(int=4)\
    \ %!s(int=8)]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[%!s(int=7) %!s(int=6) %!s(int=7) %!s(int=1)]'\n\
    \    --- FAIL: TestPluck/test_num__7 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[]', got '[%!s(int=7) %!s(int=9) %!s(int=7) %!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchIntSlice(arr[:],\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n8wflfy_test.go:26:5: undefined: sort

    /tmp/tmp9n8wflfy_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minValue int\n    for _, value := range\
    \ arr {\n        if minValue == 0 || value < minValue {\n            minValue\
    \ = value\n            minIndex = -1\n        }\n        if value == minValue\
    \ {\n            minIndex++\n        }\n    }\n    if minIndex == -1 {\n     \
    \   return nil\n    }\n    for _, value := range arr {\n        if value == minValue\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ append(result, [minValue, minIndex])\n}\n\nfunc TestPluck(t *testing.T) {\n\
    \  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmojexx7s_test.go:46:36: unexpected comma; expecting ]

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    index := 0\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = index\
    \ + 1\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n    if\
    \ index == 1 {\n        return append(result, arr[0])\n    }\n    if index > 1\
    \ {\n        return append(result, arr[index-1])\n    }\n    return nil\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7kpd7ge_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool { return arr[i] >= value })\n            }\n        }\n   \
    \ }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn1sjz5_7_test.go:26:5: undefined: sort

    /tmp/tmpn1sjz5_7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            if v < smalest_value {\n                smalest_value\
    \ = v\n                index = index + 1\n            }\n        }\n    }\n  \
    \  if index == 0 {\n        return []\n    }\n    return []int{smalest_value,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz04rqe6r_test.go:38:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn6tkxkk3_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ make([]int, 0)\n    index := 0\n    smallest := arr[0]\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if smallest > v {\n              \
    \  smallest = v\n                index = index + 1\n            }\n        } else\
    \ {\n            if smallest == v {\n                index = index + 1\n     \
    \       }\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n\
    \    result = append(result, smallest, index)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmp82t31z3t_test.go:28\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmp82t31z3t_test.go:57 +0x176\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = index\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw58spuc_test.go:26:5: undefined: sort

    /tmp/tmpqw58spuc_test.go:33:33: undefined: index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - i\n    \
    \        }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9m2tzu5a_test.go:26:5: undefined: sort

    /tmp/tmp9m2tzu5a_test.go:33:48: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    var smalest_value int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n   \
    \         index = -1\n        } else {\n            if index == -1 || smalest_value\
    \ < v {\n                smalest_value = v\n                index = index + 1\n\
    \            }\n        }\n    }\n    if index == -1 {\n        return nil\n \
    \   }\n    result = append(result, smalest_value, index)\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpow7fveys_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var index int\n    var smalest_value int\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            smalest_value = value\n      \
    \      index = -1\n        } else {\n            if index == -1 || smalest_value\
    \ < value {\n                smalest_value = value\n                index = -1\n\
    \            } else {\n                index = index + 1\n            }\n    \
    \    }\n    }\n    if index == -1 {\n        return []\n    }\n    if smalest_value\
    \ == 0 {\n        return []\n    }\n    result = append(result, smalest_value,\
    \ index)\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ikg89p0_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var index int\n    var smalest_value int\n    for _, v := range arr {\n \
    \       if v%2 == 0 {\n            smalest_value = v\n            index = v\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ arr2 := make([]int, 0)\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            arr2 = append(arr2, v)\n        }\n    }\n    return arr2\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_tk3fbwm_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    result := make([]int, 0)\n    min := arr[0]\n    min := 0\n    index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if min > value {\n                min = value\n                index = index\n\
    \            }\n        } else {\n            if min > value {\n             \
    \   min = value\n                index = index\n            }\n        }\n   \
    \ }\n    result := append(result, min)\n    result := append(result, index)\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3s4yoy4_test.go:27:12: no new variables on left side of :=

    /tmp/tmpp3s4yoy4_test.go:29:9: no new variables on left side of :=

    /tmp/tmpp3s4yoy4_test.go:44:12: no new variables on left side of :=

    /tmp/tmpp3s4yoy4_test.go:45:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool { return arr[i] < value })\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy197bk4m_test.go:26:5: undefined: sort

    /tmp/tmpy197bk4m_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, val := range arr\
    \ {\n        if val%2 == 0 {\n            if minVal == 0 || val < minVal {\n \
    \               minVal = val\n                minIndex = arr\n            }\n\
    \        } else {\n            if minVal == 0 || val < minVal {\n            \
    \    minVal = val\n                minIndex = arr\n            }\n        }\n\
    \    }\n    if minVal == 0 {\n        return []\n    }\n    result = append(result,\
    \ minVal)\n    result = append(result, minIndex)\n    return result\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6j20pe6_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.Search(len(arr), func(i\
    \ int) bool {\n                    return arr[i] < v\n                })\n   \
    \         }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5z8nvgn_test.go:26:5: undefined: sort

    /tmp/tmpv5z8nvgn_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    result := make([]int,\
    \ 0)\n    for _, v := range m {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    if len(result) == 1 {\n        return result[0]\n    }\n    smallestValue\
    \ := result[0]\n    smallestIndex := 0\n    for i := 1; i < len(result); i++ {\n\
    \        if result[i] < smallestValue {\n            smallestValue = result[i]\n\
    \            smallestIndex = i\n        }\n    }\n    return []int{smallestValue,\
    \ smallestIndex}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffqb5ud8_test.go:40:16: cannot use result[0] (variable of type int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate :=\
    \ pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt_co_ck4_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == v {\n                index = index + 1\n\
    \            } else {\n                smalest = v\n                index = index\n\
    \            }\n        }\n    }\n    return []int{smalest, index}\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz7oc949_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var minIndex int\n    for _, v := range arr {\n   \
    \     if v%2 == 0 {\n            result = append(result, v)\n            if minIndex\
    \ == 0 || v < result[minIndex] {\n                minIndex = v\n            }\n\
    \        }\n    }\n    if minIndex == 0 {\n        return []\n    }\n    return\
    \ append([]int{minIndex, minIndex}, result...)\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9nqfd0c4_test.go:38:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ []int{}\n    index := 0\n    smalest_value := arr[0]\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                index = index\n       \
    \     }\n        } else {\n            if value == smalest_value {\n         \
    \       index = index + 1\n            }\n        }\n    }\n    result = append(result,\
    \ smalest_value, index)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpsu5y2csh_test.go:28\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpsu5y2csh_test.go:54 +0x16b\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    return nil\n}\n\nfunc TestPluck(t *testing.T) {\n\
    \  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpn5rps35x_test.go:51: expected '[%!s(int=2) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpn5rps35x_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestPluck/test_num__3\
    \ (0.00s)\n        tmpn5rps35x_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpn5rps35x_test.go:51:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[]'\n    --- FAIL: TestPluck/test_num__5\
    \ (0.00s)\n        tmpn5rps35x_test.go:51: expected '[%!s(int=4) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmpn5rps35x_test.go:51:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var smallestValue int\n    var smallestIndex int\n    for _, value\
    \ := range arr {\n        if smallestValue == 0 || value < smallestValue {\n \
    \           smallestValue = value\n            smallestIndex = 0\n        }\n\
    \        if smallestValue == value {\n            smallestIndex++\n        }\n\
    \    }\n    if smallestValue == 0 {\n        return []\n    }\n    result = append(result,\
    \ smallestValue, smallestIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_bgibs5i_test.go:39:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var smallestValue int\n    var smallestIndex int\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smallestValue == 0 {\n  \
    \              smallestValue = v\n                smallestIndex = v\n        \
    \    } else {\n                if smallestValue > v {\n                    smallestValue\
    \ = v\n                    smallestIndex = v\n                }\n            }\n\
    \        } else {\n            if smallestValue > 0 {\n                smallestValue\
    \ = 0\n                smallestIndex = 0\n            }\n        }\n    }\n  \
    \  if smallestValue > 0 {\n        result = append(result, smallestValue, smallestIndex)\n\
    \    }\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate :=\
    \ pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpph7ggv_x_test.go:73: expected '[%!s(int=2) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpph7ggv_x_test.go:73:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestPluck/test_num__3\
    \ (0.00s)\n        tmpph7ggv_x_test.go:73: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n\
    \        tmpph7ggv_x_test.go:73: expected '[%!s(int=0) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmpph7ggv_x_test.go:73:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestPluck/test_num__6 (0.00s)\n        tmpph7ggv_x_test.go:73: expected '[%!s(int=6)\
    \ %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return nil\n\
    \    }\n    return append(result, arr[index])\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzchprwlu_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyi2m928o_test.go:69:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchInts(arr,\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0mpia1e_test.go:26:5: undefined: sort

    /tmp/tmpp0mpia1e_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ []int{}\n    index := 0\n    smalest_value := arr[0]\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                index = index\n       \
    \     }\n        } else {\n            if value == smalest_value {\n         \
    \       index = index\n            }\n        }\n    }\n    result = append(result,\
    \ smalest_value, index)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmp0t_q1l7w_test.go:28\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmp0t_q1l7w_test.go:54 +0x131\n\
    testing.tRunner(0xc0001031e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    smalest_index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smalest == v {\n        \
    \        smalest_index = index\n            }\n            smalest = v\n     \
    \       smalest_index = index\n        }\n        index++\n    }\n    if smalest_index\
    \ == 0 {\n        return []\n    }\n    return []int{smalest, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd29uoeec_test.go:41:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = len(arr)\
    \ - 1 - sort.SearchInts(arr[:len(arr)-1], value)\n            }\n        }\n \
    \   }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprb69fsix_test.go:26:5: undefined: sort

    /tmp/tmprb69fsix_test.go:33:48: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var minVal\
    \ int\n    var minIndex int\n    var minVal int\n    var minIndex int\n    var\
    \ minVal int\n    var minIndex int\n    var minVal int\n    var minIndex int\n\
    \    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var min\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxy2z42jm_test.go:128:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyyu9rrl3_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwfeunzrd_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprqjehq77_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyyu9rrl3_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < min {\n           \
    \     min = value\n                index = index\n            }\n        } else\
    \ {\n            if min > value {\n                min = value\n             \
    \   index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmp4myy09s6_test.go:27\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmp4myy09s6_test.go:56 +0x1b0\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    var smalest_index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest_value\
    \ == 0 {\n                smalest_value = v\n                smalest_index = v\n\
    \            } else {\n                if v < smalest_value {\n              \
    \      smalest_value = v\n                    smalest_index = v\n            \
    \    }\n            }\n        }\n    }\n    if smalest_value == 0 {\n       \
    \ return []\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpromqis5h_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkpr8ibf7_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpywyfn2t8_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestEven == v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return nil\n    }\n    result = append(result, smallestEven)\n\
    \    result = append(result, smallestIndex)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37zp7jqo_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n            }\n      \
    \  }\n    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T) {\n\
    \  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg5a2gtpx_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var index int\n    var smalest_value int\n    for _, v := range arr {\n \
    \       if v%2 == 0 {\n            smalest_value = v\n            index = v\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ smalest_value -= 1\n    return []int{smalest_value, index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppkqlzuhw_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n            }\n      \
    \  }\n    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T) {\n\
    \  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg5a2gtpx_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = index\n            }\n            index++\n\
    \        }\n    }\n    if smalest_index == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1upfz3_1_test.go:41:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    return arr\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmp7odmruhv_test.go:52: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n     \
    \   tmp7odmruhv_test.go:52: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n     \
    \   tmp7odmruhv_test.go:52: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4\
    \ (0.00s)\n        tmp7odmruhv_test.go:52: expected '[%!s(int=0) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmp7odmruhv_test.go:52:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=5) %!s(int=4) %!s(int=8) %!s(int=4)\
    \ %!s(int=8)]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmp7odmruhv_test.go:52:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[%!s(int=7) %!s(int=6) %!s(int=7) %!s(int=1)]'\n\
    \    --- FAIL: TestPluck/test_num__7 (0.00s)\n        tmp7odmruhv_test.go:52:\
    \ expected '[]', got '[%!s(int=7) %!s(int=9) %!s(int=7) %!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n         \
    \       minVal = v\n                minIndex = v\n            }\n        } else\
    \ {\n            if minVal == 0 || v > minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        }\n    }\n    if minVal\
    \ == 0 {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2wmhj2g_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < v\n                })\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy34mry9v_test.go:26:5: undefined: sort

    /tmp/tmpy34mry9v_test.go:33:48: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    index := 0\n    smallest := arr[0]\n    for _, value\
    \ := range arr {\n        if value%2 == 0 {\n            if smallest > value {\n\
    \                smallest = value\n                index = index + 1\n       \
    \     }\n        } else {\n            if smallest == value {\n              \
    \  index = index + 1\n            }\n        }\n    }\n    if smallest == arr[0]\
    \ {\n        result = append(result, smallest, index)\n    }\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabfjacy9_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool { return arr[i] > value })\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzqyssd9_test.go:26:5: undefined: sort

    /tmp/tmpbzqyssd9_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value % 2 == 0 {\n            if value < smalest_value {\n\
    \                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpumylm5qe_test.go:26:5: undefined: sort

    /tmp/tmpumylm5qe_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    smalest_value\
    \ := 0\n    smalest_index := 0\n    for v, count := range m {\n        if count\
    \ > smalest_value {\n            smalest_value = count\n            smalest_index\
    \ = v\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmp2bq7xct8_test.go:61: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=4)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmp2bq7xct8_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL:\
    \ TestPluck/test_num__2 (0.00s)\n        tmp2bq7xct8_test.go:61: expected '[]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmp2bq7xct8_test.go:61: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=2)\
    \ %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmp2bq7xct8_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestPluck/test_num__5 (0.00s)\n        tmp2bq7xct8_test.go:61: expected '[%!s(int=4)\
    \ %!s(int=1)]', got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestPluck/test_num__6\
    \ (0.00s)\n        tmp2bq7xct8_test.go:61: expected '[%!s(int=6) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=7)]'\n    --- FAIL: TestPluck/test_num__7 (0.00s)\n\
    \        tmp2bq7xct8_test.go:61: expected '[]', got '[%!s(int=2) %!s(int=7)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var smallestValue int\n    var smallestIndex int\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smallestValue == 0 {\n  \
    \              smallestValue = v\n                smallestIndex = 0\n        \
    \    } else {\n                if smallestValue > v {\n                    smallestValue\
    \ = v\n                    smallestIndex = 0\n                } else {\n     \
    \               smallestIndex++\n                }\n            }\n        } else\
    \ {\n            if smallestValue == 0 {\n                smallestValue = v\n\
    \                smallestIndex = 0\n            } else {\n                if smallestValue\
    \ > v {\n                    smallestValue = v\n                    smallestIndex\
    \ = 0\n                } else {\n                    smallestIndex++\n       \
    \         }\n            }\n        }\n    }\n    if smallestValue == 0 {\n  \
    \      return nil\n    }\n    result = make([]int, smallestIndex+1)\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            result[smallestIndex] =\
    \ v\n        } else {\n            result[smallestIndex] = v\n        }\n    \
    \    smallestIndex++\n    }\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513680, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513680,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck({0xc0000c4518, 0x3, 0x685?})\n\t/tmp/tmps_exa5y3_test.go:62\
    \ +0x11c\ncommand-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmps_exa5y3_test.go:78\
    \ +0x87\ntesting.tRunner(0xc0001a0340, 0x528f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if v == min {\n                index = index + 1\n          \
    \  }\n        }\n    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphqurbq_y_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmss5ygeu_test.go:26:5: undefined: sort

    /tmp/tmpmss5ygeu_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if v == min {\n                index = index\n            }\n\
    \        }\n    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy713ufg1_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ v\n        }\n    }\n    if len(result) == 0 {\n        return []\n    }\n \
    \   if index == 0 {\n        return nil\n    }\n    if index == len(arr) {\n \
    \       return append(result, arr[index])\n    }\n    if result[0]%2 == 0 {\n\
    \        return append(result, arr[index])\n    }\n    return nil\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2hggwmyo_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    return []int{arr[0], 0}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpdcw9osxk_test.go:29\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpdcw9osxk_test.go:41 +0xb4\n\
    testing.tRunner(0xc0001031e0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    n := len(arr)\n\
    \    if n == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n\
    \    for i := 1; i < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n\
    \            index = i\n        }\n    }\n    return []int{min, index}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9343kuo2_test.go:28:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchInts(arr,\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0mpia1e_test.go:26:5: undefined: sort

    /tmp/tmpp0mpia1e_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6lqkdly_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchIntSlice(arr[:],\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n8wflfy_test.go:26:5: undefined: sort

    /tmp/tmp9n8wflfy_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    n := len(arr)\n\
    \    if n == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n\
    \    for i := 1; i < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n\
    \            index = i\n        }\n    }\n    return []int{min, index}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9343kuo2_test.go:28:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    i := 0\n    j := len(arr) - 1\n    k\
    \ := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for i < j {\n\
    \        if arr[i] % 2 == 0 {\n            if arr[i] < smalest_value {\n     \
    \           smalest_value = arr[i]\n                smalest_index = i\n      \
    \      }\n            i++\n        } else {\n            i++\n        }\n    }\n\
    \    if smalest_value == 0 {\n        return []\n    }\n    if smalest_index ==\
    \ 0 {\n        return []\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6fst9w8u_test.go:45:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestIndex < v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        } else {\n           \
    \ if smallestEven == 0 {\n                smallestEven = v\n                smallestIndex\
    \ = v\n            }\n        }\n    }\n    if smallestEven == 0 {\n        return\
    \ []\n    }\n    result = append(result, smallestEven, smallestIndex)\n    return\
    \ result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkub7y_x2_test.go:54:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw9dvnffh_test.go:69:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    sort.Ints(arr)\n\
    \    for _, v := range arr {\n        if m[v] % 2 == 0 {\n            return []int{v,\
    \ m[v]}\n        }\n    }\n    return []int{}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp154usyye_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n         \
    \       minVal = v\n                minIndex = v\n            }\n        } else\
    \ {\n            if minVal == 0 || v > minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        }\n    }\n    if minVal\
    \ == 0 {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2wmhj2g_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // Your code\
    \ here\n    \n    return arr\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpb_xmj2ov_test.go:51: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n     \
    \   tmpb_xmj2ov_test.go:51: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n     \
    \   tmpb_xmj2ov_test.go:51: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4\
    \ (0.00s)\n        tmpb_xmj2ov_test.go:51: expected '[%!s(int=0) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmpb_xmj2ov_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=5) %!s(int=4) %!s(int=8) %!s(int=4)\
    \ %!s(int=8)]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmpb_xmj2ov_test.go:51:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[%!s(int=7) %!s(int=6) %!s(int=7) %!s(int=1)]'\n\
    \    --- FAIL: TestPluck/test_num__7 (0.00s)\n        tmpb_xmj2ov_test.go:51:\
    \ expected '[]', got '[%!s(int=7) %!s(int=9) %!s(int=7) %!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        } else {\n            if value == smalest_value\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    return\
    \ []int{smalest_value, index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2_4_53o_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    for _, value := range arr {\n\
    \        if value%2 == 0 {\n            if value < smalest_value {\n         \
    \       smalest_value = value\n                index = index + 1\n           \
    \ }\n        } else {\n            if value == smalest_value {\n             \
    \   index = index + 1\n            }\n        }\n    }\n    if index == 0 {\n\
    \        return []\n    }\n    return []int{smalest_value, index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpheey1i9f_test.go:42:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - v\n    \
    \        }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5mj975u__test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if v == min {\n                index = index + 1\n          \
    \  }\n        }\n    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphqurbq_y_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    n := len(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    even_index := 0\n  \
    \  for i := 1; i < n; i++ {\n        if arr[i] % 2 == 0 {\n            if arr[i]\
    \ < smalest_value {\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            }\n        } else {\n            if arr[i] < smalest_value\
    \ {\n                even_index = i\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            }\n        }\n    }\n    if smalest_value\
    \ == 0 {\n        return []\n    }\n    if even_index == 0 {\n        return make([]int,\
    \ 1, 2)\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyuq171a__test.go:45:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minVal int\n    var index int\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            minVal = v\n       \
    \     minIndex = index\n        }\n        index++\n    }\n    if minIndex ==\
    \ 0 {\n        return []\n    }\n    for _, v := range arr {\n        if v%2 ==\
    \ 0 {\n            if v < minVal {\n                minVal = v\n             \
    \   minIndex = index\n            }\n            index++\n        }\n    }\n \
    \   if minIndex == 0 {\n        return []\n    }\n    result = []int{minVal, minIndex}\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphcchllb4_test.go:38:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest := arr[0]\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest ==\
    \ 0 {\n                smalest = v\n                index = index + 1\n      \
    \      } else {\n                if v < smalest {\n                    smalest\
    \ = v\n                    index = index + 1\n                }\n            }\n\
    \        }\n    }\n    if smalest == 0 {\n        return []\n    }\n    return\
    \ []int{smalest, index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt8v10fb8_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == v {\n                index = index + 1\n\
    \            } else {\n                smalest = v\n                index = index\n\
    \            }\n        }\n    }\n    return []int{smalest, index}\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixp5v682_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    index := 0\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = index\
    \ + 1\n        }\n    }\n    if index == 0 {\n        return []\n    }\n    if\
    \ index > 0 {\n        result = append(result, arr[index-1])\n    }\n    return\
    \ result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_e2rjbs4_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    var smalest_value int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n   \
    \         index = -1\n        } else {\n            if smalest_value < v {\n \
    \               smalest_value = v\n                index = -1\n            } else\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    if\
    \ index == -1 {\n        result = make([]int, 0)\n    } else {\n        result\
    \ = append(result, smalest_value, index)\n    }\n    return result\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ltqn1x3_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr)-1\n            }\n        }\n    }\n    return\
    \ []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n \
    \ candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplk5uqhtw_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.SearchInts(arr, v)\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcv54xco_test.go:26:5: undefined: sort

    /tmp/tmptcv54xco_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpywyfn2t8_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyi2m928o_test.go:69:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkpr8ibf7_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return nil\n   \
    \ }\n    return append([]int{result[0], index}, pluck(arr[index:])...)\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5k58xq2g_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest_value == 0 {\n            \
    \    smalest_value = v\n                smalest_index = v\n            } else\
    \ {\n                if v < smalest_value {\n                    smalest_value\
    \ = v\n                    smalest_index = v\n                }\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn7_wg5vc_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == 0 {\n        return\
    \ []\n    }\n    return []int{smalest_value, index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcbmcnrhu_test.go:39:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n            index++\n        }\n    }\n    if smalest_index ==\
    \ 0 {\n        return []\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1g2jwho_test.go:40:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    n := len(arr)\n\
    \    result := make([]int, n)\n    min := arr[0]\n    index := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n     \
    \       index = i\n        }\n    }\n    result[index] = min\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpcosv3nvv_test.go:28\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpcosv3nvv_test.go:49 +0x135\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    arr2 := make([]int, 0)\n    arr3 := make([]int, 0)\n   \
    \ arr4 := make([]int, 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int,\
    \ 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int,\
    \ 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int,\
    \ 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int,\
    \ 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int,\
    \ 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int,\
    \ 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int,\
    \ 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int,\
    \ 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int,\
    \ 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int,\
    \ 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int,\
    \ 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int,\
    \ 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int,\
    \ 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int,\
    \ 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int,\
    \ 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int, 0)\n    arr51 := make(\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcf1peqqv_test.go:77:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if v < smalest_value\
    \ {\n                smalest_value = v\n                index = -1\n         \
    \   }\n        } else {\n            if v < smalest_value {\n                smalest_value\
    \ = v\n                index = index + 1\n            }\n        }\n    }\n  \
    \  if index == -1 {\n        return []\n    }\n    return []int{smalest_value,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe1vi26r8_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    arr2 := make([]int,\
    \ 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int,\
    \ 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int,\
    \ 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int,\
    \ 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int,\
    \ 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int,\
    \ 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int,\
    \ 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int,\
    \ 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int,\
    \ 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int,\
    \ 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int,\
    \ 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int,\
    \ 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int,\
    \ 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int,\
    \ 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int,\
    \ 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int,\
    \ 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int,\
    \ 0)\n    arr51 := make([]int, 0)\n    \nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw53nq5kf_test.go:77:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestIndex < v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        } else {\n           \
    \ if smallestEven == 0 {\n                smallestEven = v\n                smallestIndex\
    \ = v\n            }\n        }\n    }\n    if smallestEven == 0 {\n        return\
    \ nil\n    }\n    result = append(result, smallestEven)\n    result = append(result,\
    \ smallestIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn41p0aaq_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, val := range arr\
    \ {\n        if val < min {\n            min = val\n            index = -1\n \
    \       }\n        if val == min {\n            index = index + 1\n        }\n\
    \    }\n    if index == -1 {\n        return []\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgb9yss6p_test.go:39:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.SearchInts(arr, v)\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcv54xco_test.go:26:5: undefined: sort

    /tmp/tmptcv54xco_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value % 2 == 0 {\n            if value <\
    \ smalest_value {\n                smalest_value = value\n                smalest_index\
    \ = index\n            }\n            index++\n        }\n    }\n    if smalest_index\
    \ == 0 {\n        return []\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmdjh07sq_test.go:40:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n        }\n        index++\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqiekr35_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmss5ygeu_test.go:26:5: undefined: sort

    /tmp/tmpmss5ygeu_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool { return arr[i] < value })\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy197bk4m_test.go:26:5: undefined: sort

    /tmp/tmpy197bk4m_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    smalest_index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smalest == v {\n        \
    \        smalest_index = index\n            }\n            smalest = v\n     \
    \       index = index + 1\n        }\n    }\n    if smalest_index == 0 {\n   \
    \     return []\n    }\n    return []int{smalest, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpve1odkak_test.go:40:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - v\n    \
    \        }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpioj918f1_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6lqkdly_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkpr8ibf7_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minValue int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if minValue == 0 || v < minValue {\n \
    \               minValue = v\n                minIndex = v\n            }\n  \
    \      } else {\n            if minValue == 0 || v > minValue {\n            \
    \    minValue = v\n                minIndex = v\n            }\n        }\n  \
    \  }\n    if minValue == 0 {\n        return []\n    }\n    result = append(result,\
    \ minValue)\n    result = append(result, minIndex)\n    return result\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq3o03ixr_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - sort.SearchInts(arr[:len(arr)-1],\
    \ v)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvpgcequ_test.go:26:5: undefined: sort

    /tmp/tmpmvpgcequ_test.go:33:48: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minValue int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if minValue == 0 || v < minValue {\n \
    \               minValue = v\n                minIndex = v\n            }\n  \
    \      } else {\n            if minValue == 0 || v > minValue {\n            \
    \    minValue = v\n                minIndex = v\n            }\n        }\n  \
    \  }\n    result = append(result, minValue)\n    result = append(result, minIndex)\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpv5fth3nz_test.go:67:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL:\
    \ TestPluck/test_num__2 (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpv5fth3nz_test.go:67:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestPluck/test_num__5 (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[%!s(int=4)\
    \ %!s(int=1)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestPluck/test_num__6\
    \ (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[%!s(int=6) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=7)]'\n    --- FAIL: TestPluck/test_num__7 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[]', got '[%!s(int=9) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    var smalest_value int\n    var smalest_index\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest_value\
    \ == 0 {\n                smalest_value = v\n                smalest_index = v\n\
    \            } else {\n                if v < smalest_value {\n              \
    \      smalest_value = v\n                    smalest_index = v\n            \
    \    }\n            }\n        }\n    }\n    if smalest_value == 0 {\n       \
    \ return []\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfcyh796o_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minValue int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if minValue == 0 || v < minValue {\n \
    \               minValue = v\n                minIndex = v\n            }\n  \
    \      } else {\n            if minValue == 0 || v > minValue {\n            \
    \    minValue = v\n                minIndex = v\n            }\n        }\n  \
    \  }\n    result = append(result, minValue)\n    result = append(result, minIndex)\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpv5fth3nz_test.go:67:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL:\
    \ TestPluck/test_num__2 (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpv5fth3nz_test.go:67:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestPluck/test_num__5 (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[%!s(int=4)\
    \ %!s(int=1)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestPluck/test_num__6\
    \ (0.00s)\n        tmpv5fth3nz_test.go:67: expected '[%!s(int=6) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=7)]'\n    --- FAIL: TestPluck/test_num__7 (0.00s)\n\
    \        tmpv5fth3nz_test.go:67: expected '[]', got '[%!s(int=9) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074669
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n            index++\n        }\n    }\n    if smalest_index >\
    \ 0 {\n        return []int{smalest_value, smalest_index}\n    }\n    return []int{0,\
    \ 0}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqc3eqzq_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n         \
    \       minVal = v\n                minIndex = v\n            }\n        } else\
    \ {\n            if minVal == 0 || v > minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        }\n    }\n    if minVal\
    \ == 0 {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2wmhj2g_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minIndex int\n    var minVal int\n    var i int\n    for i =\
    \ 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n            if minVal\
    \ == 0 || arr[i] < minVal {\n                minVal = arr[i]\n               \
    \ minIndex = i\n            }\n        } else {\n            if minVal != 0 {\n\
    \                minVal = 0\n                minIndex = 0\n            }\n   \
    \     }\n    }\n    if minVal == 0 {\n        return []\n    }\n    result = append(result,\
    \ minVal)\n    result = append(result, minIndex)\n    return result\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65fgcnnm_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    arr2 := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            arr2 = append(arr2,\
    \ v)\n            if v < min {\n                min = v\n                index\
    \ = arr2\n            }\n        }\n    }\n    if min == 0 {\n        return []\n\
    \    }\n    return []int{min, index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate\
    \ := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvle4helh_test.go:40:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate :=\
    \ pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt_co_ck4_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ v\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n    return\
    \ append([]int{index, arr[0]}, result...)\n}\n\nfunc TestPluck(t *testing.T) {\n\
    \  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 2,\
    \ 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n  \
    \   { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n \
    \    { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n\
    \     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n  \
    \   { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
    \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89lcf50d_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0)\n    index := 0\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            evens = append(evens, v)\n            index\
    \ = index + 1\n        }\n    }\n    if len(evens) == 0 {\n        return []\n\
    \    }\n    if len(evens) == 1 {\n        return evens\n    }\n    smallest :=\
    \ evens[0]\n    smallest := index\n    for _, v := range evens {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n    }\n    return []int{smallest,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfkfm9n3o_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyyu9rrl3_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgeutlut0_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    return nil\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpu_yuc_xu_test.go:52: expected '[%!s(int=2) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpu_yuc_xu_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestPluck/test_num__3\
    \ (0.00s)\n        tmpu_yuc_xu_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpu_yuc_xu_test.go:52:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[]'\n    --- FAIL: TestPluck/test_num__5\
    \ (0.00s)\n        tmpu_yuc_xu_test.go:52: expected '[%!s(int=4) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmpu_yuc_xu_test.go:52:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    result := []int{}\n    index := 0\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = index\
    \ + 1\n        }\n    }\n    if index == 0 {\n        return []\n    }\n    return\
    \ append(result[:index], result[index:]...)\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9dhgwlly_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == 0 {\n        return nil\n \
    \   }\n    return append([]int{result[0], index}, pluck(result[1:]))\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeq4e5cce_test.go:26:5: undefined: sort

    /tmp/tmpeq4e5cce_test.go:38:44: cannot use pluck(result[1:]) (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - value\n            }\n        }\n  \
    \  }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgqmuez2_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    var index int\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if minVal == 0 || minVal\
    \ > v {\n                minVal = v\n                minIndex = index\n      \
    \      }\n            index = index + 1\n        }\n    }\n    if minVal == 0\
    \ {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv_p19725_test.go:40:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var index int\n    var smalest_value int\n    for _, v := range arr {\n \
    \       if v%2 == 0 {\n            smalest_value = v\n            index = v\n\
    \        }\n    }\n    if index == 0 {\n        return []\n    }\n    if smalest_value\
    \ == 0 {\n        return []\n    }\n    return []int{smalest_value, index}\n}\n\
    \nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__w1wknx_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyyu9rrl3_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestEven == v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        }\n    }\n    if smallestEven\
    \ == 0 {\n        return []\n    }\n    result = append(result, smallestEven)\n\
    \    result = append(result, smallestIndex)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8mga1ah_test.go:49:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n        }\n        index++\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cl6yiaa_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ []int{}\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            if v < min {\n                min = v\n    \
    \            index = index\n            }\n        } else {\n            if min\
    \ == v {\n                index = index\n            }\n        }\n    }\n   \
    \ result = append(result, min)\n    result = append(result, index)\n    return\
    \ result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpghuuldar_test.go:27\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpghuuldar_test.go:55 +0x172\n\
    testing.tRunner(0xc000199040, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    result :=\
    \ make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if min > v {\n                min = v\n\
    \                index = index\n            }\n        } else {\n            if\
    \ min == v {\n                index = index\n            }\n        }\n    }\n\
    \    result = append(result, min)\n    result = append(result, index)\n    return\
    \ result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpquc46n07_test.go:27\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpquc46n07_test.go:55 +0x1a5\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = len(arr)\
    \ - 1 - i\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6dvjfj1_test.go:26:5: undefined: sort

    /tmp/tmpk6dvjfj1_test.go:33:48: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    sort.Ints(arr)\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for index, value := range arr {\n        if value%2\
    \ == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = index\n            }\n        }\n \
    \   }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62pwr0rt_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var index int\n    var smalest_value int\n    for _, v := range arr {\n \
    \       if v%2 == 0 {\n            smalest_value = v\n            index = -1\n\
    \            break\n        }\n    }\n    if index == -1 {\n        return []\n\
    \    }\n    if smalest_value == 0 {\n        return []\n    }\n    arr2 := make([]int,\
    \ 0)\n    for _, v := range arr {\n        if v%2 == 0 {\n            arr2 = append(arr2,\
    \ v)\n        }\n    }\n    sort.Ints(arr2)\n    arr2 = append(arr2, smalest_value)\n\
    \    return arr2\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_lj4w7sx_test.go:37:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpywyfn2t8_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var index int\n    var smallestValue int\n    var smallestIndex int\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if smallestValue\
    \ == 0 || value < smallestValue {\n                smallestValue = value\n   \
    \             smallestIndex = index\n            }\n        }\n        index++\n\
    \    }\n    if smallestValue == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestValue, smallestIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmpl3ltvbjc_test.go:66: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=2)\
    \ %!s(int=5)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpl3ltvbjc_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    i := 0\n    j := len(arr) - 1\n    k\
    \ := 0\n    result := []int{}\n    for i < j {\n        if arr[i] % 2 == 0 {\n\
    \            result = append(result, arr[i])\n            i++\n        } else\
    \ {\n            if arr[j] % 2 == 0 {\n                result = append(result,\
    \ arr[j])\n                j--\n            } else {\n                if arr[k]\
    \ % 2 == 0 {\n                    result = append(result, arr[k])\n          \
    \          k++\n                } else {\n                    if arr[i] < arr[j]\
    \ {\n                        result = append(result, arr[i])\n               \
    \         i++\n                    } else {\n                        result =\
    \ append(result, arr[j])\n                        j--\n                    }\n\
    \                }\n            }\n        }\n    }\n    if i == j {\n       \
    \ if arr[i] % 2 == 0 {\n            result = append(result, arr[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate :=\
    \ pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkcye0gg4_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2r2gvtt7_test.go:26:5: undefined: sort

    /tmp/tmp2r2gvtt7_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var smalest_value int\n    var smalest_index int\n    var smalest_index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest_value\
    \ == 0 {\n                smalest_value = v\n                smalest_index = v\n\
    \            } else {\n                if v < smalest_value {\n              \
    \      smalest_value = v\n                    smalest_index = v\n            \
    \    }\n            }\n        }\n    }\n    if smalest_value == 0 {\n       \
    \ return []\n    }\n    result := []int{smalest_value, smalest_index}\n    return\
    \ result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdbnjsf1v_test.go:44:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == 0 {\n                smalest = v\n   \
    \             index = index + 1\n            } else {\n                if v <\
    \ smalest {\n                    smalest = v\n                    index = index\
    \ + 1\n                }\n            }\n        }\n    }\n    if smalest == 0\
    \ {\n        return []\n    }\n    return []int{smalest, index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgzsj6hb0_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var minVal\
    \ int\n    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0\
    \ {\n            if minVal == 0 || v < minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        }\n    }\n    if minVal\
    \ == 0 {\n        return []\n    }\n    return []int{minVal, minIndex}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmk_r158w_test.go:37:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = v\n            }\n    \
    \    }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppubp309u_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7qbutav_test.go:27:5: undefined: sort

    /tmp/tmpk7qbutav_test.go:34:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0, len(arr))\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            evens = append(evens, v)\n       \
    \     index = index + 1\n        }\n    }\n    if len(evens) == 0 {\n        return\
    \ []\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens[:1]\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx375c9k5_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smalest := arr[0]\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest ==\
    \ 0 {\n                smalest = v\n                index = index + 1\n      \
    \      } else {\n                if v < smalest {\n                    smalest\
    \ = v\n                    index = index + 1\n                }\n            }\n\
    \        }\n    }\n    return []int{smalest, index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp955itrx7_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v <\
    \ smalest_value {\n                smalest_value = v\n                smalest_index\
    \ = len(arr)\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgm7kskk_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6lqkdly_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqevuzbzq_test.go:281:6: expected ''('', found TestPluck

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var index int\n    var smalest_value int\n    var smalest_index int\n\
    \    for _, node := range arr {\n        if node % 2 == 0 {\n            smalest_value\
    \ = node\n            smalest_index = index\n        }\n        index++\n    }\n\
    \    if smalest_value == 0 {\n        return nil\n    }\n    for _, node := range\
    \ arr {\n        if node == smalest_value {\n            result = append(result,\
    \ node)\n        }\n    }\n    if smalest_index == 0 {\n        return nil\n \
    \   }\n    return append(result, [smalest_value, smalest_index])\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplut8oxvj_test.go:48:41: unexpected comma; expecting ]

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n            index++\n        }\n    }\n    if smalest_index >\
    \ 0 {\n        return append([]int{smalest_value, smalest_index}, arr[index:]...)\n\
    \    }\n    return []int{}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate :=\
    \ pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected:\
    \ []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual:\
    \ candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7,\
    \ 6, 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7,\
    \ 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzndylv24_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven != v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   }\n            }\n        } else {\n            if smallestEven == 0 {\n \
    \               smallestEven = v\n                smallestIndex = v\n        \
    \    } else {\n                if smallestEven != v {\n                    smallestEven\
    \ = v\n                    smallestIndex = v\n                }\n            }\n\
    \        }\n    }\n    if smallestEven == 0 {\n        return nil\n    }\n   \
    \ result = append(result, smallestEven)\n    result = append(result, smallestIndex)\n\
    \    return result\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7cys4b4_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    index := 0\n    smallest := arr[0]\n\
    \    smallest := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if smallest > v {\n                smallest = v\n               \
    \ index = v\n            }\n        }\n    }\n    return []int{smallest, index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyctfnka__test.go:27:5: undefined: sort

    /tmp/tmpyctfnka__test.go:30:14: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = len(arr)\
    \ - 1 - i\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6dvjfj1_test.go:26:5: undefined: sort

    /tmp/tmpk6dvjfj1_test.go:33:48: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.Search(len(arr), func(i\
    \ int) bool {\n                    return arr[i] < v\n                })\n   \
    \         }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdeib9qe8_test.go:26:5: undefined: sort

    /tmp/tmpdeib9qe8_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    var i int\n    for i =\
    \ 0; i < len(arr); i++ {\n        if arr[i] < minVal {\n            minVal = arr[i]\n\
    \            minIndex = i\n        }\n    }\n    for i = 0; i < len(arr); i++\
    \ {\n        if arr[i] == minVal {\n            result = append(result, arr[i])\n\
    \        }\n    }\n    if minIndex == len(arr) {\n        return nil\n    }\n\
    \    return append(result, minVal, minIndex)\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpyofzz565_test.go:67: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpyofzz565_test.go:67:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestPluck/test_num__3 (0.00s)\n        tmpyofzz565_test.go:67: expected '[%!s(int=0)\
    \ %!s(int=1)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestPluck/test_num__4 (0.00s)\n        tmpyofzz565_test.go:67: expected '[%!s(int=0)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__5\
    \ (0.00s)\n        tmpyofzz565_test.go:67: expected '[%!s(int=4) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n\
    \        tmpyofzz565_test.go:67: expected '[%!s(int=6) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__7 (0.00s)\n        tmpyofzz565_test.go:67:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    \n    return arr\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmp0_1ozdp7_test.go:53: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n     \
    \   tmp0_1ozdp7_test.go:53: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n     \
    \   tmp0_1ozdp7_test.go:53: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestPluck/test_num__4\
    \ (0.00s)\n        tmp0_1ozdp7_test.go:53: expected '[%!s(int=0) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=5) %!s(int=4) %!s(int=8) %!s(int=4)\
    \ %!s(int=8)]'\n    --- FAIL: TestPluck/test_num__6 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[%!s(int=6) %!s(int=1)]', got '[%!s(int=7) %!s(int=6) %!s(int=7) %!s(int=1)]'\n\
    \    --- FAIL: TestPluck/test_num__7 (0.00s)\n        tmp0_1ozdp7_test.go:53:\
    \ expected '[]', got '[%!s(int=7) %!s(int=9) %!s(int=7) %!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    \n    \n    return []int{arr[0], 0}\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpdcw9osxk_test.go:29\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpdcw9osxk_test.go:41 +0xb4\n\
    testing.tRunner(0xc0001031e0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    var i int\n    for i =\
    \ 0; i < len(arr); i++ {\n        if arr[i] < minVal {\n            minVal = arr[i]\n\
    \            minIndex = i\n        }\n    }\n    result = append(result, minVal)\n\
    \    result = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t\
    \ *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpm5klbwzl_test.go:61: expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__1 (0.00s)\n        tmpm5klbwzl_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestPluck/test_num__2 (0.00s)\n        tmpm5klbwzl_test.go:61: expected '[]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmpm5klbwzl_test.go:61: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__4 (0.00s)\n        tmpm5klbwzl_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestPluck/test_num__5 (0.00s)\n        tmpm5klbwzl_test.go:61: expected '[%!s(int=4)\
    \ %!s(int=1)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__6\
    \ (0.00s)\n        tmpm5klbwzl_test.go:61: expected '[%!s(int=6) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestPluck/test_num__7 (0.00s)\n\
    \        tmpm5klbwzl_test.go:61: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgeutlut0_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    // write\
    \ your code here\n    sort.Ints(arr)\n    var index int\n    var smalest_value\
    \ int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n   \
    \         smalest_value = arr[i]\n            index = i\n        }\n    }\n  \
    \  if index == 0 {\n        return []\n    }\n    if smalest_value == 0 {\n  \
    \      return []\n    }\n    if index == len(arr) {\n        return []\n    }\n\
    \    if smalest_value < arr[index] {\n        return []\n    }\n    return []int{smalest_value,\
    \ index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8r3u5a1r_test.go:37:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var index int\n    var smallestValue int\n    var smallestIndex int\n\
    \    for _, value := range arr {\n        if value % 2 == 0 {\n            if\
    \ smallestValue < value {\n                smallestValue = value\n           \
    \     smallestIndex = index\n            }\n        } else {\n            if smallestValue\
    \ == value {\n                smallestIndex = index\n            }\n        }\n\
    \        index++\n    }\n    if smallestIndex == 0 {\n        return nil\n   \
    \ }\n    result = append(result, smallestValue, smallestIndex)\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__0 (0.00s)\n\
    \        tmpny72i4fi_test.go:70: expected '[%!s(int=2) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestPluck/test_num__3 (0.00s)\n        tmpny72i4fi_test.go:70:\
    \ expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestPluck/test_num__4 (0.00s)\n        tmpny72i4fi_test.go:70: expected '[%!s(int=0)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestPluck/test_num__5\
    \ (0.00s)\n        tmpny72i4fi_test.go:70: expected '[%!s(int=4) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var index int\n    var smalest_value int\n    var smalest_index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            smalest_value\
    \ = v\n            smalest_index = index\n        }\n        index++\n    }\n\
    \    if smalest_index == 0 {\n        return nil\n    }\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if v < smalest_value {\n         \
    \       smalest_value = v\n                smalest_index = index\n           \
    \ }\n            index++\n        }\n    }\n    result = make([]int, 2)\n    result[0]\
    \ = smalest_value\n    result[1] = smalest_index\n    return result\n}\n\nfunc\
    \ TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\n    --- FAIL: TestPluck/test_num__3 (0.00s)\n\
    \        tmpumed6z8o_test.go:75: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=6)]'\n    --- FAIL: TestPluck/test_num__5 (0.00s)\n        tmpumed6z8o_test.go:75:\
    \ expected '[%!s(int=4) %!s(int=1)]', got '[%!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 2
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchInts(arr,\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0mpia1e_test.go:26:5: undefined: sort

    /tmp/tmpp0mpia1e_test.go:33:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v <\
    \ smalest_value {\n                smalest_value = v\n                smalest_index\
    \ = len(arr)\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpykle1zdv_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n         \
    \       minVal = v\n                minIndex = v\n            }\n        } else\
    \ {\n            if minVal == 0 || v < minVal {\n                minVal = v\n\
    \                minIndex = v\n            }\n        }\n    }\n    if minVal\
    \ == 0 {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15h36d07_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n\n\
    func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkpr8ibf7_test.go:36:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest_value == 0 {\n            \
    \    smalest_value = v\n                smalest_index = v\n            } else\
    \ {\n                if v < smalest_value {\n                    smalest_value\
    \ = v\n                    smalest_index = v\n                }\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn7_wg5vc_test.go:43:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    n := len(arr)\n\
    \    result := make([]int, n)\n    min := arr[0]\n    index := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n     \
    \       index = i\n        }\n    }\n    result[index] = min\n    return result\n\
    }\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
    \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected:\
    \ []int{0, 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4,\
    \ 1} },\n     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n\
    \     { actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPluck (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pluck(...)\n\t/tmp/tmpcosv3nvv_test.go:28\n\
    command-line-arguments_test.TestPluck(0x0?)\n\t/tmp/tmpcosv3nvv_test.go:49 +0x135\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    m := make(map[int]int)\n\
    \    for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    smalest_value\
    \ := -1\n    smalest_index := -1\n    for k, v := range m {\n        if v < smalest_value\
    \ {\n            smalest_value = v\n            smalest_index = k\n        }\n\
    \    }\n    if smalest_value == -1 {\n        return []\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n\nfunc TestPluck(t *testing.T) {\n  candidate := pluck\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 2, 3}), expected: []int{2,\
    \ 1} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 0, 3, 0, 4, 2}), expected: []int{0, 1} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 0, 5, 3}), expected: []int{0, 3} },\n     { actual: candidate([]int{5,\
    \ 4, 8, 4, 8}), expected: []int{4, 1} },\n     { actual: candidate([]int{7, 6,\
    \ 7, 1}), expected: []int{6, 1} },\n     { actual: candidate([]int{7, 9, 7, 1}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpggnl7zwl_test.go:39:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ \"Given an array representing a branch of a tree that has non-negative integer\
    \ nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked\
    \ node should be the node with the smallest even value.\n// If multiple nodes\
    \ with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - value\n            }\n        }\n  \
    \  }\n    return []int{smalest_value, smalest_index}\n}\n\nfunc TestPluck(t *testing.T)\
    \ {\n  candidate := pluck\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{1, 2, 3}),\
    \ expected: []int{2, 1} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected: []int{0, 1}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0, 3}\
    \ },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
    \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     {\
    \ actual: candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgqmuez2_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074668
